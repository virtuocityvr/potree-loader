{"version":3,"file":"binary-decoder.worker-fd37b973.js","sources":["../src/point-attributes.ts","../src/version.ts","../src/workers/custom-array-view.ts","../src/workers/binary-decoder-worker-internal.ts","../src/workers/binary-decoder.worker.js"],"sourcesContent":["// -------------------------------------------------------------------------------------------------\r\n// Converted to Typescript and adapted from https://github.com/potree/potree\r\n// -------------------------------------------------------------------------------------------------\r\n\r\nexport enum PointAttributeName {\r\n  POSITION_CARTESIAN = 0, // float x, y, z;\r\n  COLOR_PACKED = 1, // byte r, g, b, a; \tI = [0,1]\r\n  COLOR_FLOATS_1 = 2, // float r, g, b; \t\tI = [0,1]\r\n  COLOR_FLOATS_255 = 3, // float r, g, b; \t\tI = [0,255]\r\n  NORMAL_FLOATS = 4, // float x, y, z;\r\n  FILLER = 5,\r\n  INTENSITY = 6,\r\n  CLASSIFICATION = 7,\r\n  NORMAL_SPHEREMAPPED = 8,\r\n  NORMAL_OCT16 = 9,\r\n  NORMAL = 10,\r\n}\r\n\r\nexport interface PointAttributeType {\r\n  ordinal: number;\r\n  size: number;\r\n}\r\n\r\nexport const POINT_ATTRIBUTE_TYPES: Record<string, PointAttributeType> = {\r\n  DATA_TYPE_DOUBLE: { ordinal: 0, size: 8 },\r\n  DATA_TYPE_FLOAT: { ordinal: 1, size: 4 },\r\n  DATA_TYPE_INT8: { ordinal: 2, size: 1 },\r\n  DATA_TYPE_UINT8: { ordinal: 3, size: 1 },\r\n  DATA_TYPE_INT16: { ordinal: 4, size: 2 },\r\n  DATA_TYPE_UINT16: { ordinal: 5, size: 2 },\r\n  DATA_TYPE_INT32: { ordinal: 6, size: 4 },\r\n  DATA_TYPE_UINT32: { ordinal: 7, size: 4 },\r\n  DATA_TYPE_INT64: { ordinal: 8, size: 8 },\r\n  DATA_TYPE_UINT64: { ordinal: 9, size: 8 },\r\n};\r\n\r\nexport interface IPointAttribute {\r\n  name: PointAttributeName;\r\n  type: PointAttributeType;\r\n  numElements: number;\r\n  byteSize: number;\r\n}\r\n\r\nexport interface IPointAttributes {\r\n  attributes: IPointAttribute[];\r\n  byteSize: number;\r\n  size: number;\r\n}\r\n\r\nfunction makePointAttribute(\r\n  name: PointAttributeName,\r\n  type: PointAttributeType,\r\n  numElements: number,\r\n): IPointAttribute {\r\n  return {\r\n    name,\r\n    type,\r\n    numElements,\r\n    byteSize: numElements * type.size,\r\n  };\r\n}\r\n\r\nconst RGBA_PACKED = makePointAttribute(\r\n  PointAttributeName.COLOR_PACKED,\r\n  POINT_ATTRIBUTE_TYPES.DATA_TYPE_INT8,\r\n  4,\r\n);\r\n\r\nexport const POINT_ATTRIBUTES = {\r\n  POSITION_CARTESIAN: makePointAttribute(\r\n    PointAttributeName.POSITION_CARTESIAN,\r\n    POINT_ATTRIBUTE_TYPES.DATA_TYPE_FLOAT,\r\n    3,\r\n  ),\r\n  RGBA_PACKED,\r\n  COLOR_PACKED: RGBA_PACKED,\r\n  RGB_PACKED: makePointAttribute(\r\n    PointAttributeName.COLOR_PACKED,\r\n    POINT_ATTRIBUTE_TYPES.DATA_TYPE_INT8,\r\n    3,\r\n  ),\r\n  NORMAL_FLOATS: makePointAttribute(\r\n    PointAttributeName.NORMAL_FLOATS,\r\n    POINT_ATTRIBUTE_TYPES.DATA_TYPE_FLOAT,\r\n    3,\r\n  ),\r\n  FILLER_1B: makePointAttribute(\r\n    PointAttributeName.FILLER,\r\n    POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT8,\r\n    1,\r\n  ),\r\n  INTENSITY: makePointAttribute(\r\n    PointAttributeName.INTENSITY,\r\n    POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT16,\r\n    1,\r\n  ),\r\n  CLASSIFICATION: makePointAttribute(\r\n    PointAttributeName.CLASSIFICATION,\r\n    POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT8,\r\n    1,\r\n  ),\r\n  NORMAL_SPHEREMAPPED: makePointAttribute(\r\n    PointAttributeName.NORMAL_SPHEREMAPPED,\r\n    POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT8,\r\n    2,\r\n  ),\r\n  NORMAL_OCT16: makePointAttribute(\r\n    PointAttributeName.NORMAL_OCT16,\r\n    POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT8,\r\n    2,\r\n  ),\r\n  NORMAL: makePointAttribute(PointAttributeName.NORMAL, POINT_ATTRIBUTE_TYPES.DATA_TYPE_FLOAT, 3),\r\n};\r\n\r\nexport type PointAttributeStringName = keyof typeof POINT_ATTRIBUTES;\r\n\r\nexport class PointAttributes implements IPointAttributes {\r\n  attributes: IPointAttribute[] = [];\r\n  byteSize: number = 0;\r\n  size: number = 0;\r\n\r\n  constructor(pointAttributeNames: PointAttributeStringName[] = []) {\r\n    for (let i = 0; i < pointAttributeNames.length; i++) {\r\n      const pointAttributeName = pointAttributeNames[i];\r\n      const pointAttribute = POINT_ATTRIBUTES[pointAttributeName];\r\n      this.attributes.push(pointAttribute);\r\n      this.byteSize += pointAttribute.byteSize;\r\n      this.size++;\r\n    }\r\n  }\r\n\r\n  add(pointAttribute: IPointAttribute): void {\r\n    this.attributes.push(pointAttribute);\r\n    this.byteSize += pointAttribute.byteSize;\r\n    this.size++;\r\n  }\r\n\r\n  hasColors(): boolean {\r\n    return this.attributes.find(isColorAttribute) !== undefined;\r\n  }\r\n\r\n  hasNormals(): boolean {\r\n    return this.attributes.find(isNormalAttribute) !== undefined;\r\n  }\r\n}\r\n\r\nfunction isColorAttribute({ name }: IPointAttribute): boolean {\r\n  return name === PointAttributeName.COLOR_PACKED;\r\n}\r\n\r\nfunction isNormalAttribute({ name }: IPointAttribute): boolean {\r\n  return (\r\n    name === PointAttributeName.NORMAL_SPHEREMAPPED ||\r\n    name === PointAttributeName.NORMAL_FLOATS ||\r\n    name === PointAttributeName.NORMAL ||\r\n    name === PointAttributeName.NORMAL_OCT16\r\n  );\r\n}\r\n","export class Version {\r\n  version: string;\r\n  versionMajor: number;\r\n  versionMinor: number = 0;\r\n\r\n  constructor(version: string) {\r\n    this.version = version;\r\n\r\n    const vmLength = version.indexOf('.') === -1 ? version.length : version.indexOf('.');\r\n    this.versionMajor = parseInt(version.substr(0, vmLength), 10);\r\n    this.versionMinor = parseInt(version.substr(vmLength + 1), 10);\r\n    if (isNaN(this.versionMinor)) {\r\n      this.versionMinor = 0;\r\n    }\r\n  }\r\n\r\n  newerThan(version: string): boolean {\r\n    const v = new Version(version);\r\n\r\n    if (this.versionMajor > v.versionMajor) {\r\n      return true;\r\n    } else if (this.versionMajor === v.versionMajor && this.versionMinor > v.versionMinor) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  equalOrHigher(version: string): boolean {\r\n    const v = new Version(version);\r\n\r\n    if (this.versionMajor > v.versionMajor) {\r\n      return true;\r\n    } else if (this.versionMajor === v.versionMajor && this.versionMinor >= v.versionMinor) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  upTo(version: string): boolean {\r\n    return !this.newerThan(version);\r\n  }\r\n}\r\n","/**\r\n * Adapted from Potree.js http://potree.org\r\n * Potree License: https://github.com/potree/potree/blob/1.5/LICENSE\r\n */\r\n\r\n// http://jsperf.com/uint8array-vs-dataview3/3\r\n// tslint:disable:no-bitwise\r\nexport class CustomArrayView {\r\n  private u8: Uint8Array;\r\n  private tmp = new ArrayBuffer(4);\r\n  private tmpf = new Float32Array(this.tmp);\r\n  private tmpu8 = new Uint8Array(this.tmp);\r\n\r\n  constructor(buffer: ArrayBuffer) {\r\n    this.u8 = new Uint8Array(buffer);\r\n  }\r\n\r\n  getUint32(i: number) {\r\n    return (this.u8[i + 3] << 24) | (this.u8[i + 2] << 16) | (this.u8[i + 1] << 8) | this.u8[i];\r\n  }\r\n\r\n  getUint16(i: number): number {\r\n    return (this.u8[i + 1] << 8) | this.u8[i];\r\n  }\r\n\r\n  getFloat32(i: number): number {\r\n    const tmpu8 = this.tmpu8;\r\n    const u8 = this.u8;\r\n    const tmpf = this.tmpf;\r\n\r\n    tmpu8[0] = u8[i + 0];\r\n    tmpu8[1] = u8[i + 1];\r\n    tmpu8[2] = u8[i + 2];\r\n    tmpu8[3] = u8[i + 3];\r\n\r\n    return tmpf[0];\r\n  }\r\n\r\n  getUint8(i: number): number {\r\n    return this.u8[i];\r\n  }\r\n}\r\n// tslint:enable:no-bitwise\r\n","/**\r\n * Adapted from Potree.js http://potree.org\r\n * Potree License: https://github.com/potree/potree/blob/1.5/LICENSE\r\n */\r\n\r\nimport {\r\n  IPointAttribute,\r\n  IPointAttributes,\r\n  PointAttributeName,\r\n  POINT_ATTRIBUTES,\r\n} from '../point-attributes';\r\nimport { Version } from '../version';\r\nimport { CustomArrayView } from './custom-array-view';\r\n\r\n// IE11 does not have Math.sign(), this has been adapted from CoreJS es6.math.sign.js for TypeScript\r\nconst mathSign =\r\n  Math.sign ||\r\n  function(x: number): number {\r\n    // tslint:disable-next-line:triple-equals\r\n    return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;\r\n  };\r\n\r\ninterface DecodedAttribute {\r\n  buffer: ArrayBuffer;\r\n  attribute: IPointAttribute;\r\n}\r\n\r\ninterface Ctx {\r\n  attributeBuffers: Record<string, DecodedAttribute>;\r\n  currentOffset: number;\r\n  data: CustomArrayView;\r\n  mean: [number, number, number];\r\n  nodeOffset: [number, number, number];\r\n  numPoints: number;\r\n  pointAttributes: IPointAttributes;\r\n  scale: number;\r\n  tightBoxMax: [number, number, number];\r\n  tightBoxMin: [number, number, number];\r\n  transferables: ArrayBuffer[];\r\n  version: Version;\r\n}\r\n\r\nexport function handleMessage(event: MessageEvent) {\r\n  const buffer = event.data.buffer;\r\n  const pointAttributes: IPointAttributes = event.data.pointAttributes;\r\n\r\n  const ctx: Ctx = {\r\n    attributeBuffers: {},\r\n    currentOffset: 0,\r\n    data: new CustomArrayView(buffer),\r\n    mean: [0, 0, 0],\r\n    nodeOffset: event.data.offset,\r\n    numPoints: event.data.buffer.byteLength / pointAttributes.byteSize,\r\n    pointAttributes,\r\n    scale: event.data.scale,\r\n    tightBoxMax: [Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY],\r\n    tightBoxMin: [Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY],\r\n    transferables: [],\r\n    version: new Version(event.data.version),\r\n  };\r\n\r\n  for (const pointAttribute of ctx.pointAttributes.attributes) {\r\n    decodeAndAddAttribute(pointAttribute, ctx);\r\n    ctx.currentOffset += pointAttribute.byteSize;\r\n  }\r\n\r\n  const indices = new ArrayBuffer(ctx.numPoints * 4);\r\n  const iIndices = new Uint32Array(indices);\r\n  for (let i = 0; i < ctx.numPoints; i++) {\r\n    iIndices[i] = i;\r\n  }\r\n\r\n  if (!ctx.attributeBuffers[PointAttributeName.CLASSIFICATION]) {\r\n    addEmptyClassificationBuffer(ctx);\r\n  }\r\n\r\n  const message = {\r\n    buffer: buffer,\r\n    mean: ctx.mean,\r\n    attributeBuffers: ctx.attributeBuffers,\r\n    tightBoundingBox: { min: ctx.tightBoxMin, max: ctx.tightBoxMax },\r\n    indices,\r\n  };\r\n\r\n  // console.log(\"old\", message)\r\n  postMessage(message, ctx.transferables as any);\r\n}\r\n\r\nfunction addEmptyClassificationBuffer(ctx: Ctx): void {\r\n  const buffer = new ArrayBuffer(ctx.numPoints * 4);\r\n  const classifications = new Float32Array(buffer);\r\n\r\n  for (let i = 0; i < ctx.numPoints; i++) {\r\n    classifications[i] = 0;\r\n  }\r\n\r\n  ctx.attributeBuffers[PointAttributeName.CLASSIFICATION] = {\r\n    buffer,\r\n    attribute: POINT_ATTRIBUTES.CLASSIFICATION,\r\n  };\r\n}\r\n\r\nfunction decodeAndAddAttribute(attribute: IPointAttribute, ctx: Ctx): void {\r\n  const decodedAttribute = decodePointAttribute(attribute, ctx);\r\n  if (decodedAttribute === undefined) {\r\n    return;\r\n  }\r\n\r\n  ctx.attributeBuffers[decodedAttribute.attribute.name] = decodedAttribute;\r\n  ctx.transferables.push(decodedAttribute.buffer);\r\n}\r\n\r\nfunction decodePointAttribute(attribute: IPointAttribute, ctx: Ctx): DecodedAttribute | undefined {\r\n  switch (attribute.name) {\r\n    case PointAttributeName.POSITION_CARTESIAN:\r\n      return decodePositionCartesian(attribute, ctx);\r\n    case PointAttributeName.COLOR_PACKED:\r\n      return decodeColor(attribute, ctx);\r\n    case PointAttributeName.INTENSITY:\r\n      return decodeIntensity(attribute, ctx);\r\n    case PointAttributeName.CLASSIFICATION:\r\n      return decodeClassification(attribute, ctx);\r\n    case PointAttributeName.NORMAL_SPHEREMAPPED:\r\n      return decodeNormalSphereMapped(attribute, ctx);\r\n    case PointAttributeName.NORMAL_OCT16:\r\n      return decodeNormalOct16(attribute, ctx);\r\n    case PointAttributeName.NORMAL:\r\n      return decodeNormal(attribute, ctx);\r\n    default:\r\n      return undefined;\r\n  }\r\n}\r\n\r\nfunction decodePositionCartesian(attribute: IPointAttribute, ctx: Ctx): DecodedAttribute {\r\n  const buffer = new ArrayBuffer(ctx.numPoints * 4 * 3);\r\n  const positions = new Float32Array(buffer);\r\n\r\n  for (let i = 0; i < ctx.numPoints; i++) {\r\n    let x;\r\n    let y;\r\n    let z;\r\n\r\n    if (ctx.version.newerThan('1.3')) {\r\n      x = ctx.data.getUint32(ctx.currentOffset + i * ctx.pointAttributes.byteSize + 0) * ctx.scale;\r\n      y = ctx.data.getUint32(ctx.currentOffset + i * ctx.pointAttributes.byteSize + 4) * ctx.scale;\r\n      z = ctx.data.getUint32(ctx.currentOffset + i * ctx.pointAttributes.byteSize + 8) * ctx.scale;\r\n    } else {\r\n      x = ctx.data.getFloat32(i * ctx.pointAttributes.byteSize + 0) + ctx.nodeOffset[0];\r\n      y = ctx.data.getFloat32(i * ctx.pointAttributes.byteSize + 4) + ctx.nodeOffset[1];\r\n      z = ctx.data.getFloat32(i * ctx.pointAttributes.byteSize + 8) + ctx.nodeOffset[2];\r\n    }\r\n\r\n    positions[3 * i + 0] = x;\r\n    positions[3 * i + 1] = y;\r\n    positions[3 * i + 2] = z;\r\n\r\n    ctx.mean[0] += x / ctx.numPoints;\r\n    ctx.mean[1] += y / ctx.numPoints;\r\n    ctx.mean[2] += z / ctx.numPoints;\r\n\r\n    ctx.tightBoxMin[0] = Math.min(ctx.tightBoxMin[0], x);\r\n    ctx.tightBoxMin[1] = Math.min(ctx.tightBoxMin[1], y);\r\n    ctx.tightBoxMin[2] = Math.min(ctx.tightBoxMin[2], z);\r\n\r\n    ctx.tightBoxMax[0] = Math.max(ctx.tightBoxMax[0], x);\r\n    ctx.tightBoxMax[1] = Math.max(ctx.tightBoxMax[1], y);\r\n    ctx.tightBoxMax[2] = Math.max(ctx.tightBoxMax[2], z);\r\n  }\r\n\r\n  return { buffer, attribute };\r\n}\r\n\r\nfunction decodeColor(attribute: IPointAttribute, ctx: Ctx): DecodedAttribute {\r\n  const buffer = new ArrayBuffer(ctx.numPoints * 3);\r\n  const colors = new Uint8Array(buffer);\r\n\r\n  for (let i = 0; i < ctx.numPoints; i++) {\r\n    colors[3 * i + 0] = ctx.data.getUint8(ctx.currentOffset + i * ctx.pointAttributes.byteSize + 0);\r\n    colors[3 * i + 1] = ctx.data.getUint8(ctx.currentOffset + i * ctx.pointAttributes.byteSize + 1);\r\n    colors[3 * i + 2] = ctx.data.getUint8(ctx.currentOffset + i * ctx.pointAttributes.byteSize + 2);\r\n  }\r\n\r\n  return { buffer, attribute };\r\n}\r\n\r\nfunction decodeIntensity(attribute: IPointAttribute, ctx: Ctx): DecodedAttribute {\r\n  const buffer = new ArrayBuffer(ctx.numPoints * 4);\r\n  const intensities = new Float32Array(buffer);\r\n\r\n  for (let i = 0; i < ctx.numPoints; i++) {\r\n    intensities[i] = ctx.data.getUint16(ctx.currentOffset + i * ctx.pointAttributes.byteSize);\r\n  }\r\n\r\n  return { buffer, attribute };\r\n}\r\n\r\nfunction decodeClassification(attribute: IPointAttribute, ctx: Ctx): DecodedAttribute {\r\n  const buffer = new ArrayBuffer(ctx.numPoints);\r\n  const classifications = new Uint8Array(buffer);\r\n\r\n  for (let j = 0; j < ctx.numPoints; j++) {\r\n    classifications[j] = ctx.data.getUint8(ctx.currentOffset + j * ctx.pointAttributes.byteSize);\r\n  }\r\n\r\n  return { buffer, attribute };\r\n}\r\n\r\nfunction decodeNormalSphereMapped(attribute: IPointAttribute, ctx: Ctx): DecodedAttribute {\r\n  const buffer = new ArrayBuffer(ctx.numPoints * 4 * 3);\r\n  const normals = new Float32Array(buffer);\r\n\r\n  for (let j = 0; j < ctx.numPoints; j++) {\r\n    const bx = ctx.data.getUint8(ctx.currentOffset + j * ctx.pointAttributes.byteSize + 0);\r\n    const by = ctx.data.getUint8(ctx.currentOffset + j * ctx.pointAttributes.byteSize + 1);\r\n\r\n    const ex = bx / 255;\r\n    const ey = by / 255;\r\n\r\n    let nx = ex * 2 - 1;\r\n    let ny = ey * 2 - 1;\r\n    let nz = 1;\r\n    const nw = -1;\r\n\r\n    const l = nx * -nx + ny * -ny + nz * -nw;\r\n    nz = l;\r\n    nx = nx * Math.sqrt(l);\r\n    ny = ny * Math.sqrt(l);\r\n\r\n    nx = nx * 2;\r\n    ny = ny * 2;\r\n    nz = nz * 2 - 1;\r\n\r\n    normals[3 * j + 0] = nx;\r\n    normals[3 * j + 1] = ny;\r\n    normals[3 * j + 2] = nz;\r\n  }\r\n\r\n  return { buffer, attribute };\r\n}\r\n\r\nfunction decodeNormalOct16(attribute: IPointAttribute, ctx: Ctx): DecodedAttribute {\r\n  const buff = new ArrayBuffer(ctx.numPoints * 4 * 3);\r\n  const normals = new Float32Array(buff);\r\n\r\n  for (let j = 0; j < ctx.numPoints; j++) {\r\n    const bx = ctx.data.getUint8(ctx.currentOffset + j * ctx.pointAttributes.byteSize + 0);\r\n    const by = ctx.data.getUint8(ctx.currentOffset + j * ctx.pointAttributes.byteSize + 1);\r\n\r\n    const u = (bx / 255) * 2 - 1;\r\n    const v = (by / 255) * 2 - 1;\r\n\r\n    let z = 1 - Math.abs(u) - Math.abs(v);\r\n\r\n    let x = 0;\r\n    let y = 0;\r\n    if (z >= 0) {\r\n      x = u;\r\n      y = v;\r\n    } else {\r\n      x = -(v / mathSign(v) - 1) / mathSign(u);\r\n      y = -(u / mathSign(u) - 1) / mathSign(v);\r\n    }\r\n\r\n    const length = Math.sqrt(x * x + y * y + z * z);\r\n    x = x / length;\r\n    y = y / length;\r\n    z = z / length;\r\n\r\n    normals[3 * j + 0] = x;\r\n    normals[3 * j + 1] = y;\r\n    normals[3 * j + 2] = z;\r\n  }\r\n\r\n  return { buffer: buff, attribute };\r\n}\r\n\r\nfunction decodeNormal(attribute: IPointAttribute, ctx: Ctx): DecodedAttribute {\r\n  const buffer = new ArrayBuffer(ctx.numPoints * 4 * 3);\r\n  const normals = new Float32Array(buffer);\r\n\r\n  for (let j = 0; j < ctx.numPoints; j++) {\r\n    const x = ctx.data.getFloat32(ctx.currentOffset + j * ctx.pointAttributes.byteSize + 0);\r\n    const y = ctx.data.getFloat32(ctx.currentOffset + j * ctx.pointAttributes.byteSize + 4);\r\n    const z = ctx.data.getFloat32(ctx.currentOffset + j * ctx.pointAttributes.byteSize + 8);\r\n\r\n    normals[3 * j + 0] = x;\r\n    normals[3 * j + 1] = y;\r\n    normals[3 * j + 2] = z;\r\n  }\r\n\r\n  return { buffer, attribute };\r\n}\r\n","import { handleMessage } from './binary-decoder-worker-internal';\r\n\r\n/*eslint-disable */\r\nonmessage = handleMessage;\r\n"],"names":["PointAttributeName","POINT_ATTRIBUTE_TYPES","makePointAttribute","name","type","numElements","RGBA_PACKED","POINT_ATTRIBUTES","Version","version","vmLength","v","CustomArrayView","buffer","i","tmpu8","u8","tmpf","mathSign","x","handleMessage","event","pointAttributes","ctx","pointAttribute","decodeAndAddAttribute","indices","iIndices","addEmptyClassificationBuffer","message","classifications","attribute","decodedAttribute","decodePointAttribute","decodePositionCartesian","decodeColor","decodeIntensity","decodeClassification","decodeNormalSphereMapped","decodeNormalOct16","decodeNormal","positions","y","z","colors","intensities","j","normals","bx","by","ex","ey","nx","ny","nz","nw","l","buff","u","length"],"mappings":"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"}