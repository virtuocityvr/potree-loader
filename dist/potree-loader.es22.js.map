{"version":3,"file":"potree-loader.es22.js","sources":["../src/point-attributes.ts"],"sourcesContent":["// -------------------------------------------------------------------------------------------------\r\n// Converted to Typescript and adapted from https://github.com/potree/potree\r\n// -------------------------------------------------------------------------------------------------\r\n\r\nexport enum PointAttributeName {\r\n  POSITION_CARTESIAN = 0, // float x, y, z;\r\n  COLOR_PACKED = 1, // byte r, g, b, a; \tI = [0,1]\r\n  COLOR_FLOATS_1 = 2, // float r, g, b; \t\tI = [0,1]\r\n  COLOR_FLOATS_255 = 3, // float r, g, b; \t\tI = [0,255]\r\n  NORMAL_FLOATS = 4, // float x, y, z;\r\n  FILLER = 5,\r\n  INTENSITY = 6,\r\n  CLASSIFICATION = 7,\r\n  NORMAL_SPHEREMAPPED = 8,\r\n  NORMAL_OCT16 = 9,\r\n  NORMAL = 10,\r\n}\r\n\r\nexport interface PointAttributeType {\r\n  ordinal: number;\r\n  size: number;\r\n}\r\n\r\nexport const POINT_ATTRIBUTE_TYPES: Record<string, PointAttributeType> = {\r\n  DATA_TYPE_DOUBLE: { ordinal: 0, size: 8 },\r\n  DATA_TYPE_FLOAT: { ordinal: 1, size: 4 },\r\n  DATA_TYPE_INT8: { ordinal: 2, size: 1 },\r\n  DATA_TYPE_UINT8: { ordinal: 3, size: 1 },\r\n  DATA_TYPE_INT16: { ordinal: 4, size: 2 },\r\n  DATA_TYPE_UINT16: { ordinal: 5, size: 2 },\r\n  DATA_TYPE_INT32: { ordinal: 6, size: 4 },\r\n  DATA_TYPE_UINT32: { ordinal: 7, size: 4 },\r\n  DATA_TYPE_INT64: { ordinal: 8, size: 8 },\r\n  DATA_TYPE_UINT64: { ordinal: 9, size: 8 },\r\n};\r\n\r\nexport interface IPointAttribute {\r\n  name: PointAttributeName;\r\n  type: PointAttributeType;\r\n  numElements: number;\r\n  byteSize: number;\r\n}\r\n\r\nexport interface IPointAttributes {\r\n  attributes: IPointAttribute[];\r\n  byteSize: number;\r\n  size: number;\r\n}\r\n\r\nfunction makePointAttribute(\r\n  name: PointAttributeName,\r\n  type: PointAttributeType,\r\n  numElements: number,\r\n): IPointAttribute {\r\n  return {\r\n    name,\r\n    type,\r\n    numElements,\r\n    byteSize: numElements * type.size,\r\n  };\r\n}\r\n\r\nconst RGBA_PACKED = makePointAttribute(\r\n  PointAttributeName.COLOR_PACKED,\r\n  POINT_ATTRIBUTE_TYPES.DATA_TYPE_INT8,\r\n  4,\r\n);\r\n\r\nexport const POINT_ATTRIBUTES = {\r\n  POSITION_CARTESIAN: makePointAttribute(\r\n    PointAttributeName.POSITION_CARTESIAN,\r\n    POINT_ATTRIBUTE_TYPES.DATA_TYPE_FLOAT,\r\n    3,\r\n  ),\r\n  RGBA_PACKED,\r\n  COLOR_PACKED: RGBA_PACKED,\r\n  RGB_PACKED: makePointAttribute(\r\n    PointAttributeName.COLOR_PACKED,\r\n    POINT_ATTRIBUTE_TYPES.DATA_TYPE_INT8,\r\n    3,\r\n  ),\r\n  NORMAL_FLOATS: makePointAttribute(\r\n    PointAttributeName.NORMAL_FLOATS,\r\n    POINT_ATTRIBUTE_TYPES.DATA_TYPE_FLOAT,\r\n    3,\r\n  ),\r\n  FILLER_1B: makePointAttribute(\r\n    PointAttributeName.FILLER,\r\n    POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT8,\r\n    1,\r\n  ),\r\n  INTENSITY: makePointAttribute(\r\n    PointAttributeName.INTENSITY,\r\n    POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT16,\r\n    1,\r\n  ),\r\n  CLASSIFICATION: makePointAttribute(\r\n    PointAttributeName.CLASSIFICATION,\r\n    POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT8,\r\n    1,\r\n  ),\r\n  NORMAL_SPHEREMAPPED: makePointAttribute(\r\n    PointAttributeName.NORMAL_SPHEREMAPPED,\r\n    POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT8,\r\n    2,\r\n  ),\r\n  NORMAL_OCT16: makePointAttribute(\r\n    PointAttributeName.NORMAL_OCT16,\r\n    POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT8,\r\n    2,\r\n  ),\r\n  NORMAL: makePointAttribute(PointAttributeName.NORMAL, POINT_ATTRIBUTE_TYPES.DATA_TYPE_FLOAT, 3),\r\n};\r\n\r\nexport type PointAttributeStringName = keyof typeof POINT_ATTRIBUTES;\r\n\r\nexport class PointAttributes implements IPointAttributes {\r\n  attributes: IPointAttribute[] = [];\r\n  byteSize: number = 0;\r\n  size: number = 0;\r\n\r\n  constructor(pointAttributeNames: PointAttributeStringName[] = []) {\r\n    for (let i = 0; i < pointAttributeNames.length; i++) {\r\n      const pointAttributeName = pointAttributeNames[i];\r\n      const pointAttribute = POINT_ATTRIBUTES[pointAttributeName];\r\n      this.attributes.push(pointAttribute);\r\n      this.byteSize += pointAttribute.byteSize;\r\n      this.size++;\r\n    }\r\n  }\r\n\r\n  add(pointAttribute: IPointAttribute): void {\r\n    this.attributes.push(pointAttribute);\r\n    this.byteSize += pointAttribute.byteSize;\r\n    this.size++;\r\n  }\r\n\r\n  hasColors(): boolean {\r\n    return this.attributes.find(isColorAttribute) !== undefined;\r\n  }\r\n\r\n  hasNormals(): boolean {\r\n    return this.attributes.find(isNormalAttribute) !== undefined;\r\n  }\r\n}\r\n\r\nfunction isColorAttribute({ name }: IPointAttribute): boolean {\r\n  return name === PointAttributeName.COLOR_PACKED;\r\n}\r\n\r\nfunction isNormalAttribute({ name }: IPointAttribute): boolean {\r\n  return (\r\n    name === PointAttributeName.NORMAL_SPHEREMAPPED ||\r\n    name === PointAttributeName.NORMAL_FLOATS ||\r\n    name === PointAttributeName.NORMAL ||\r\n    name === PointAttributeName.NORMAL_OCT16\r\n  );\r\n}\r\n"],"names":["PointAttributeName","POINT_ATTRIBUTE_TYPES","makePointAttribute","name","type","numElements","RGBA_PACKED","POINT_ATTRIBUTES","PointAttributes","pointAttributeNames","i","pointAttributeName","pointAttribute","isColorAttribute","isNormalAttribute"],"mappings":"AAIY,IAAAA,sBAAAA,OACVA,EAAAA,EAAA,qBAAqB,CAArB,IAAA,sBACAA,EAAAA,EAAA,eAAe,CAAf,IAAA,gBACAA,EAAAA,EAAA,iBAAiB,CAAjB,IAAA,kBACAA,EAAAA,EAAA,mBAAmB,CAAnB,IAAA,oBACAA,EAAAA,EAAA,gBAAgB,CAAhB,IAAA,iBACAA,EAAAA,EAAA,SAAS,CAAT,IAAA,UACAA,EAAAA,EAAA,YAAY,CAAZ,IAAA,aACAA,EAAAA,EAAA,iBAAiB,CAAjB,IAAA,kBACAA,EAAAA,EAAA,sBAAsB,CAAtB,IAAA,uBACAA,EAAAA,EAAA,eAAe,CAAf,IAAA,gBACAA,EAAAA,EAAA,SAAS,EAAT,IAAA,UAXUA,IAAAA,KAAA,CAAA,CAAA;AAmBL,MAAMC,IAA4D;AAAA,EACvE,kBAAkB,EAAE,SAAS,GAAG,MAAM,EAAE;AAAA,EACxC,iBAAiB,EAAE,SAAS,GAAG,MAAM,EAAE;AAAA,EACvC,gBAAgB,EAAE,SAAS,GAAG,MAAM,EAAE;AAAA,EACtC,iBAAiB,EAAE,SAAS,GAAG,MAAM,EAAE;AAAA,EACvC,iBAAiB,EAAE,SAAS,GAAG,MAAM,EAAE;AAAA,EACvC,kBAAkB,EAAE,SAAS,GAAG,MAAM,EAAE;AAAA,EACxC,iBAAiB,EAAE,SAAS,GAAG,MAAM,EAAE;AAAA,EACvC,kBAAkB,EAAE,SAAS,GAAG,MAAM,EAAE;AAAA,EACxC,iBAAiB,EAAE,SAAS,GAAG,MAAM,EAAE;AAAA,EACvC,kBAAkB,EAAE,SAAS,GAAG,MAAM,EAAE;AAC1C;AAeA,SAASC,EACPC,GACAC,GACAC,GACiB;AACV,SAAA;AAAA,IACL,MAAAF;AAAA,IACA,MAAAC;AAAA,IACA,aAAAC;AAAA,IACA,UAAUA,IAAcD,EAAK;AAAA,EAAA;AAEjC;AAEA,MAAME,IAAcJ;AAAA,EAClB;AAAA,EACAD,EAAsB;AAAA,EACtB;AACF,GAEaM,IAAmB;AAAA,EAC9B,oBAAoBL;AAAA,IAClB;AAAA,IACAD,EAAsB;AAAA,IACtB;AAAA,EACF;AAAA,EACA,aAAAK;AAAA,EACA,cAAcA;AAAA,EACd,YAAYJ;AAAA,IACV;AAAA,IACAD,EAAsB;AAAA,IACtB;AAAA,EACF;AAAA,EACA,eAAeC;AAAA,IACb;AAAA,IACAD,EAAsB;AAAA,IACtB;AAAA,EACF;AAAA,EACA,WAAWC;AAAA,IACT;AAAA,IACAD,EAAsB;AAAA,IACtB;AAAA,EACF;AAAA,EACA,WAAWC;AAAA,IACT;AAAA,IACAD,EAAsB;AAAA,IACtB;AAAA,EACF;AAAA,EACA,gBAAgBC;AAAA,IACd;AAAA,IACAD,EAAsB;AAAA,IACtB;AAAA,EACF;AAAA,EACA,qBAAqBC;AAAA,IACnB;AAAA,IACAD,EAAsB;AAAA,IACtB;AAAA,EACF;AAAA,EACA,cAAcC;AAAA,IACZ;AAAA,IACAD,EAAsB;AAAA,IACtB;AAAA,EACF;AAAA,EACA,QAAQC,EAAmB,IAA2BD,EAAsB,iBAAiB,CAAC;AAChG;AAIO,MAAMO,EAA4C;AAAA,EAKvD,YAAYC,IAAkD,IAAI;AAJlE,SAAA,aAAgC,IACb,KAAA,WAAA,GACJ,KAAA,OAAA;AAGb,aAASC,IAAI,GAAGA,IAAID,EAAoB,QAAQC,KAAK;AAC7C,YAAAC,IAAqBF,EAAoBC,CAAC,GAC1CE,IAAiBL,EAAiBI,CAAkB;AACrD,WAAA,WAAW,KAAKC,CAAc,GACnC,KAAK,YAAYA,EAAe,UAC3B,KAAA;AAAA;AAAA,EAET;AAAA,EAEA,IAAIA,GAAuC;AACpC,SAAA,WAAW,KAAKA,CAAc,GACnC,KAAK,YAAYA,EAAe,UAC3B,KAAA;AAAA,EACP;AAAA,EAEA,YAAqB;AACnB,WAAO,KAAK,WAAW,KAAKC,CAAgB,MAAM;AAAA,EACpD;AAAA,EAEA,aAAsB;AACpB,WAAO,KAAK,WAAW,KAAKC,CAAiB,MAAM;AAAA,EACrD;AACF;AAEA,SAASD,EAAiB,EAAE,MAAAV,KAAkC;AAC5D,SAAOA,MAAS;AAClB;AAEA,SAASW,EAAkB,EAAE,MAAAX,KAAkC;AAC7D,SACEA,MAAS,KACTA,MAAS,KACTA,MAAS,MACTA,MAAS;AAEb;"}