const l = "", V = typeof window < "u" && window.Blob && new Blob([atob(l)], { type: "text/javascript;charset=utf-8" });
function X() {
  let d;
  try {
    if (d = V && (window.URL || window.webkitURL).createObjectURL(V), !d)
      throw "";
    return new Worker(d);
  } catch {
    return new Worker("data:application/javascript;base64," + l);
  } finally {
    d && (window.URL || window.webkitURL).revokeObjectURL(d);
  }
}
export {
  X as default
};
//# sourceMappingURL=potree-loader.es23.js.map
