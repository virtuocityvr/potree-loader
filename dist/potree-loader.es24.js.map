{"version":3,"file":"potree-loader.es24.js","sources":["../src/loading/load-poc.ts"],"sourcesContent":["// -------------------------------------------------------------------------------------------------\r\n// Converted to Typescript and adapted from https://github.com/potree/potree\r\n// -------------------------------------------------------------------------------------------------\r\n\r\nimport { Box3, Vector3 } from 'three';\r\nimport { PointAttributes, PointAttributeStringName } from '../point-attributes';\r\nimport { PointCloudOctreeGeometry } from '../point-cloud-octree-geometry';\r\nimport { PointCloudOctreeGeometryNode } from '../point-cloud-octree-geometry-node';\r\nimport { createChildAABB } from '../utils/bounds';\r\nimport { getIndexFromName } from '../utils/utils';\r\nimport { Version } from '../version';\r\nimport { BinaryLoader } from './binary-loader';\r\nimport { GetUrlFn, XhrRequest } from './types';\r\n\r\ninterface BoundingBoxData {\r\n  lx: number;\r\n  ly: number;\r\n  lz: number;\r\n  ux: number;\r\n  uy: number;\r\n  uz: number;\r\n}\r\n\r\ninterface POCJson {\r\n  version: string;\r\n  octreeDir: string;\r\n  projection: string;\r\n  points: number;\r\n  boundingBox: BoundingBoxData;\r\n  tightBoundingBox?: BoundingBoxData;\r\n  pointAttributes: PointAttributeStringName[];\r\n  spacing: number;\r\n  scale: number;\r\n  hierarchyStepSize: number;\r\n  hierarchy: [string, number][]; // [name, numPoints][]\r\n}\r\n\r\n/**\r\n *\r\n * @param url\r\n *    The url of the point cloud file (usually cloud.js).\r\n * @param getUrl\r\n *    Function which receives the relative URL of a point cloud chunk file which is to be loaded\r\n *    and shoud return a new url (e.g. signed) in the form of a string or a promise.\r\n * @param xhrRequest An arrow function for a fetch request\r\n * @returns\r\n *    An observable which emits once when the first LOD of the point cloud is loaded.\r\n */\r\nexport function loadPOC(\r\n  url: string,\r\n  getUrl: GetUrlFn,\r\n  xhrRequest: XhrRequest,\r\n): Promise<PointCloudOctreeGeometry> {\r\n  return Promise.resolve(getUrl(url)).then(transformedUrl => { // 1. Make a request to the URL\r\n    return xhrRequest(transformedUrl, { mode: 'cors' })\r\n      .then(res => res.json())\r\n      .then(parse(transformedUrl, getUrl, xhrRequest)); // 2. Parse the response\r\n  });\r\n}\r\n\r\nfunction parse(url: string, getUrl: GetUrlFn, xhrRequest: XhrRequest) {\r\n  return (data: POCJson): Promise<PointCloudOctreeGeometry> => { // Note: The response gets passed from loadPOC()\r\n    const { offset, boundingBox, tightBoundingBox } = getBoundingBoxes(data);\r\n    const loader = new BinaryLoader({\r\n      getUrl,\r\n      version: data.version,\r\n      boundingBox,\r\n      scale: data.scale,\r\n      xhrRequest,\r\n    }); // 3. Create a BinaryLoader with the bounding box and scale\r\n\r\n    const pco = new PointCloudOctreeGeometry(\r\n      loader,\r\n      boundingBox,\r\n      tightBoundingBox,\r\n      offset,\r\n      xhrRequest,\r\n    ); // 4. Create a PointCloudOctreeGeometry\r\n\r\n    // 5. Fill in Geometry with the data from the POCJson\r\n    pco.url = url;\r\n    pco.octreeDir = data.octreeDir;\r\n    pco.needsUpdate = true;\r\n    pco.spacing = data.spacing;\r\n    pco.hierarchyStepSize = data.hierarchyStepSize;\r\n    pco.projection = data.projection;\r\n    pco.offset = offset;\r\n    pco.pointAttributes = new PointAttributes(data.pointAttributes);\r\n    console.log(pco.pointAttributes)\r\n    \r\n    \r\n\r\n    const nodes: Record<string, PointCloudOctreeGeometryNode> = {}; // HMM! Juicy! 6. Create a map of nodes\r\n\r\n    const version = new Version(data.version);\r\n\r\n    return loadRoot(pco, data, nodes, version).then(() => { // 7. Load the root node\r\n      if (version.upTo('1.4')) {\r\n        loadRemainingHierarchy(pco, data, nodes);\r\n      }\r\n\r\n      pco.nodes = nodes;\r\n      return pco;\r\n    });\r\n  };\r\n}\r\n\r\nfunction getBoundingBoxes(\r\n  data: POCJson,\r\n): { offset: Vector3; boundingBox: Box3; tightBoundingBox: Box3 } {\r\n  const min = new Vector3(data.boundingBox.lx, data.boundingBox.ly, data.boundingBox.lz);\r\n  const max = new Vector3(data.boundingBox.ux, data.boundingBox.uy, data.boundingBox.uz);\r\n  const boundingBox = new Box3(min, max);\r\n  const tightBoundingBox = boundingBox.clone();\r\n\r\n  const offset = min.clone();\r\n\r\n  if (data.tightBoundingBox) {\r\n    const { lx, ly, lz, ux, uy, uz } = data.tightBoundingBox;\r\n    tightBoundingBox.min.set(lx, ly, lz);\r\n    tightBoundingBox.max.set(ux, uy, uz);\r\n  }\r\n\r\n  boundingBox.min.sub(offset);\r\n  boundingBox.max.sub(offset);\r\n  tightBoundingBox.min.sub(offset);\r\n  tightBoundingBox.max.sub(offset);\r\n\r\n  return { offset, boundingBox, tightBoundingBox };\r\n}\r\n\r\nfunction loadRoot(\r\n  pco: PointCloudOctreeGeometry,\r\n  data: POCJson,\r\n  nodes: Record<string, PointCloudOctreeGeometryNode>,\r\n  version: Version,\r\n): Promise<void> {\r\n  const name = 'r';\r\n\r\n  const root = new PointCloudOctreeGeometryNode(name, pco, pco.boundingBox);\r\n  root.hasChildren = true;\r\n  root.spacing = pco.spacing; // Fill in root info from the POCJson\r\n\r\n  if (version.upTo('1.5')) {\r\n    root.numPoints = data.hierarchy[0][1];\r\n  } else {\r\n    root.numPoints = 0;\r\n  }\r\n\r\n  pco.root = root;\r\n  nodes[name] = root;\r\n  return pco.root.load();\r\n}\r\n\r\nfunction loadRemainingHierarchy(\r\n  pco: PointCloudOctreeGeometry,\r\n  data: POCJson,\r\n  nodes: Record<string, PointCloudOctreeGeometryNode>,\r\n): void {\r\n  for (let i = 1; i < data.hierarchy.length; i++) {\r\n    const [name, numPoints] = data.hierarchy[i];\r\n    const { index, parentName, level } = parseName(name);\r\n    const parentNode = nodes[parentName];\r\n\r\n    const boundingBox = createChildAABB(parentNode.boundingBox, index);\r\n    const node = new PointCloudOctreeGeometryNode(name, pco, boundingBox);\r\n    node.level = level;\r\n    node.numPoints = numPoints;\r\n    node.spacing = pco.spacing / Math.pow(2, node.level);\r\n\r\n    nodes[name] = node;\r\n    parentNode.addChild(node);\r\n  }\r\n}\r\n\r\nfunction parseName(name: string): { index: number; parentName: string; level: number } {\r\n  return {\r\n    index: getIndexFromName(name),\r\n    parentName: name.substring(0, name.length - 1),\r\n    level: name.length - 1,\r\n  };\r\n}\r\n"],"names":["loadPOC","url","getUrl","xhrRequest","transformedUrl","res","parse","data","offset","boundingBox","tightBoundingBox","getBoundingBoxes","loader","BinaryLoader","pco","PointCloudOctreeGeometry","PointAttributes","nodes","version","Version","loadRoot","loadRemainingHierarchy","min","Vector3","max","Box3","lx","ly","lz","ux","uy","uz","name","root","PointCloudOctreeGeometryNode","i","numPoints","index","parentName","level","parseName","parentNode","createChildAABB","node","getIndexFromName"],"mappings":"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"}