{"version":3,"file":"potree-loader.es29.js","sources":["../src/utils/lru.ts"],"sourcesContent":["import { IPointCloudTreeNode } from '../types';\r\n\r\nexport type Node = IPointCloudTreeNode;\r\n\r\nexport class LRUItem {\r\n  next: LRUItem | null = null;\r\n  previous: LRUItem | null = null;\r\n  constructor(public node: Node) {}\r\n}\r\n\r\n/**\r\n * A doubly-linked-list of the least recently used elements.\r\n */\r\nexport class LRU {\r\n  // the least recently used item\r\n  first: LRUItem | null = null;\r\n  // the most recently used item\r\n  last: LRUItem | null = null;\r\n  numPoints: number = 0;\r\n\r\n  private items = new Map<number, LRUItem>();\r\n\r\n  constructor(public pointBudget: number = 1_000_000) {}\r\n\r\n  get size(): number {\r\n    return this.items.size;\r\n  }\r\n\r\n  has(node: Node): boolean {\r\n    return this.items.has(node.id);\r\n  }\r\n\r\n  /**\r\n   * Makes the specified the most recently used item. if the list does not contain node, it will\r\n   * be added.\r\n   */\r\n  touch(node: Node) {\r\n    if (!node.loaded) {\r\n      return;\r\n    }\r\n\r\n    const item = this.items.get(node.id);\r\n    if (item) {\r\n      this.touchExisting(item);\r\n    } else {\r\n      this.addNew(node);\r\n    }\r\n  }\r\n\r\n  private addNew(node: Node): void {\r\n    const item = new LRUItem(node);\r\n    item.previous = this.last;\r\n    this.last = item;\r\n    if (item.previous) {\r\n      item.previous.next = item;\r\n    }\r\n\r\n    if (!this.first) {\r\n      this.first = item;\r\n    }\r\n\r\n    this.items.set(node.id, item);\r\n    this.numPoints += node.numPoints;\r\n  }\r\n\r\n  private touchExisting(item: LRUItem): void {\r\n    if (!item.previous) {\r\n      // handle touch on first element\r\n      if (item.next) {\r\n        this.first = item.next;\r\n        this.first.previous = null;\r\n        item.previous = this.last;\r\n        item.next = null;\r\n        this.last = item;\r\n\r\n        if (item.previous) {\r\n          item.previous.next = item;\r\n        }\r\n      }\r\n    } else if (!item.next) {\r\n      // handle touch on last element\r\n    } else {\r\n      // handle touch on any other element\r\n      item.previous.next = item.next;\r\n      item.next.previous = item.previous;\r\n      item.previous = this.last;\r\n      item.next = null;\r\n      this.last = item;\r\n\r\n      if (item.previous) {\r\n        item.previous.next = item;\r\n      }\r\n    }\r\n  }\r\n\r\n  remove(node: Node) {\r\n    const item = this.items.get(node.id);\r\n    if (!item) {\r\n      return;\r\n    }\r\n\r\n    if (this.items.size === 1) {\r\n      this.first = null;\r\n      this.last = null;\r\n    } else {\r\n      if (!item.previous) {\r\n        this.first = item.next;\r\n        this.first!.previous = null;\r\n      }\r\n\r\n      if (!item.next) {\r\n        this.last = item.previous;\r\n        this.last!.next = null;\r\n      }\r\n\r\n      if (item.previous && item.next) {\r\n        item.previous.next = item.next;\r\n        item.next.previous = item.previous;\r\n      }\r\n    }\r\n\r\n    this.items.delete(node.id);\r\n    this.numPoints -= node.numPoints;\r\n  }\r\n\r\n  getLRUItem(): Node | undefined {\r\n    return this.first ? this.first.node : undefined;\r\n  }\r\n\r\n  freeMemory(): void {\r\n    if (this.items.size <= 1) {\r\n      return;\r\n    }\r\n\r\n    while (this.numPoints > this.pointBudget * 2) {\r\n      const node = this.getLRUItem();\r\n      if (node) {\r\n        this.disposeSubtree(node);\r\n      }\r\n    }\r\n  }\r\n\r\n  disposeSubtree(node: Node): void {\r\n    // Collect all the nodes which are to be disposed and removed.\r\n    const nodesToDispose: Node[] = [node];\r\n    node.traverse(n => {\r\n      if (n.loaded) {\r\n        nodesToDispose.push(n);\r\n      }\r\n    });\r\n\r\n    // Dispose of all the nodes in one go.\r\n    for (const n of nodesToDispose) {\r\n      n.dispose();\r\n      this.remove(n);\r\n    }\r\n  }\r\n}\r\n"],"names":["LRUItem","node","LRU","pointBudget","item","nodesToDispose","n"],"mappings":"AAIO,MAAMA,EAAQ;AAAA,EAGnB,YAAmBC,GAAY;AAAZ,SAAA,OAAAA,GAFI,KAAA,OAAA,MACI,KAAA,WAAA;AAAA,EACK;AAClC;AAKO,MAAMC,EAAI;AAAA,EASf,YAAmBC,IAAsB,KAAW;AAAjC,SAAA,cAAAA,GAPK,KAAA,QAAA,MAED,KAAA,OAAA,MACH,KAAA,YAAA,GAEZ,KAAA,4BAAY;EAEiC;AAAA,EAErD,IAAI,OAAe;AACjB,WAAO,KAAK,MAAM;AAAA,EACpB;AAAA,EAEA,IAAIF,GAAqB;AACvB,WAAO,KAAK,MAAM,IAAIA,EAAK,EAAE;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAMA,GAAY;AACZ,QAAA,CAACA,EAAK;AACR;AAGF,UAAMG,IAAO,KAAK,MAAM,IAAIH,EAAK,EAAE;AACnC,IAAIG,IACF,KAAK,cAAcA,CAAI,IAEvB,KAAK,OAAOH,CAAI;AAAA,EAEpB;AAAA,EAEQ,OAAOA,GAAkB;AACzB,UAAAG,IAAO,IAAIJ,EAAQC,CAAI;AAC7B,IAAAG,EAAK,WAAW,KAAK,MACrB,KAAK,OAAOA,GACRA,EAAK,aACPA,EAAK,SAAS,OAAOA,IAGlB,KAAK,UACR,KAAK,QAAQA,IAGf,KAAK,MAAM,IAAIH,EAAK,IAAIG,CAAI,GAC5B,KAAK,aAAaH,EAAK;AAAA,EACzB;AAAA,EAEQ,cAAcG,GAAqB;AACrC,IAACA,EAAK,WAaEA,EAAK,SAIVA,EAAA,SAAS,OAAOA,EAAK,MACrBA,EAAA,KAAK,WAAWA,EAAK,UAC1BA,EAAK,WAAW,KAAK,MACrBA,EAAK,OAAO,MACZ,KAAK,OAAOA,GAERA,EAAK,aACPA,EAAK,SAAS,OAAOA,MAtBnBA,EAAK,SACP,KAAK,QAAQA,EAAK,MAClB,KAAK,MAAM,WAAW,MACtBA,EAAK,WAAW,KAAK,MACrBA,EAAK,OAAO,MACZ,KAAK,OAAOA,GAERA,EAAK,aACPA,EAAK,SAAS,OAAOA;AAAA,EAiB7B;AAAA,EAEA,OAAOH,GAAY;AACjB,UAAMG,IAAO,KAAK,MAAM,IAAIH,EAAK,EAAE;AACnC,IAAKG,MAID,KAAK,MAAM,SAAS,KACtB,KAAK,QAAQ,MACb,KAAK,OAAO,SAEPA,EAAK,aACR,KAAK,QAAQA,EAAK,MAClB,KAAK,MAAO,WAAW,OAGpBA,EAAK,SACR,KAAK,OAAOA,EAAK,UACjB,KAAK,KAAM,OAAO,OAGhBA,EAAK,YAAYA,EAAK,SACnBA,EAAA,SAAS,OAAOA,EAAK,MACrBA,EAAA,KAAK,WAAWA,EAAK,YAIzB,KAAA,MAAM,OAAOH,EAAK,EAAE,GACzB,KAAK,aAAaA,EAAK;AAAA,EACzB;AAAA,EAEA,aAA+B;AAC7B,WAAO,KAAK,QAAQ,KAAK,MAAM,OAAO;AAAA,EACxC;AAAA,EAEA,aAAmB;AACb,QAAA,OAAK,MAAM,QAAQ;AAIvB,aAAO,KAAK,YAAY,KAAK,cAAc,KAAG;AACtC,cAAAA,IAAO,KAAK;AAClB,QAAIA,KACF,KAAK,eAAeA,CAAI;AAAA;AAAA,EAG9B;AAAA,EAEA,eAAeA,GAAkB;AAEzB,UAAAI,IAAyB,CAACJ,CAAI;AACpC,IAAAA,EAAK,SAAS,CAAKK,MAAA;AACjB,MAAIA,EAAE,UACJD,EAAe,KAAKC,CAAC;AAAA,IACvB,CACD;AAGD,eAAWA,KAAKD;AACd,MAAAC,EAAE,QAAQ,GACV,KAAK,OAAOA,CAAC;AAAA,EAEjB;AACF;"}