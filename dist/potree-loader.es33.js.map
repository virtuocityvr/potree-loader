{"version":3,"file":"potree-loader.es33.js","sources":["../src/loading2/PointAttributes.ts"],"sourcesContent":["/**\r\n * Some types of possible point attribute data formats\r\n *\r\n * @class\r\n */\r\nconst PointAttributeTypes:PointAttributeTypesType = {\r\n\tDATA_TYPE_DOUBLE: {ordinal: 0, name: \"double\", size: 8},\r\n\tDATA_TYPE_FLOAT:  {ordinal: 1, name: \"float\",  size: 4},\r\n\tDATA_TYPE_INT8:   {ordinal: 2, name: \"int8\",   size: 1},\r\n\tDATA_TYPE_UINT8:  {ordinal: 3, name: \"uint8\",  size: 1},\r\n\tDATA_TYPE_INT16:  {ordinal: 4, name: \"int16\",  size: 2},\r\n\tDATA_TYPE_UINT16: {ordinal: 5, name: \"uint16\", size: 2},\r\n\tDATA_TYPE_INT32:  {ordinal: 6, name: \"int32\",  size: 4},\r\n\tDATA_TYPE_UINT32: {ordinal: 7, name: \"uint32\", size: 4},\r\n\tDATA_TYPE_INT64:  {ordinal: 8, name: \"int64\",  size: 8},\r\n\tDATA_TYPE_UINT64: {ordinal: 9, name: \"uint64\", size: 8}\r\n};\r\n\r\ntype PointAttributeTypesType = {\r\n\t[key: string]: PointAttributeTypeType;\r\n};\r\n\r\ntype PointAttributeTypeType = {\r\n\tordinal: number;\r\n\tname: string;\r\n\tsize: number;\r\n};\r\n\r\nlet i = 0;\r\nfor (let obj in PointAttributeTypes) {\r\n\tPointAttributeTypes[i] = PointAttributeTypes[obj];\r\n\ti++;\r\n}\r\n\r\nexport {PointAttributeTypes};\r\n\r\ntype RangeType = number[] | [number[], number[]]\r\n\r\n// Class that represents a certain point attribute\r\nclass PointAttribute{\r\n\tbyteSize: number;\r\n\tdescription: string;\r\n\tpublic initialRange?: RangeType\r\n\r\n\tconstructor(\r\n\t\tpublic name:string,\r\n\t\tpublic type:PointAttributeTypeType,\r\n\t\tpublic numElements:number,\r\n\t\tpublic range: RangeType = [Infinity, -Infinity]\r\n\t){\r\n\t\tthis.byteSize = this.numElements * this.type.size;\r\n\t\tthis.description = \"\";\r\n\t}\r\n};\r\n\r\nexport {PointAttribute};\r\n\r\n// Map that represents all point attributes, these were previoiusly properties of the PointAttribute class\r\nexport const POINT_ATTRIBUTES:{[key:string]:PointAttribute} = {\r\n\tPOSITION_CARTESIAN: new PointAttribute(\"POSITION_CARTESIAN\", PointAttributeTypes.DATA_TYPE_FLOAT, 3),\r\n\tRGBA_PACKED: new PointAttribute(\"COLOR_PACKED\", PointAttributeTypes.DATA_TYPE_INT8, 4),\r\n\tCOLOR_PACKED: new PointAttribute(\"COLOR_PACKED\", PointAttributeTypes.DATA_TYPE_INT8, 4),\r\n\tRGB_PACKED: new PointAttribute(\"COLOR_PACKED\", PointAttributeTypes.DATA_TYPE_INT8, 3),\r\n\tNORMAL_FLOATS: new PointAttribute(\"NORMAL_FLOATS\", PointAttributeTypes.DATA_TYPE_FLOAT, 3),\r\n\tINTENSITY: new PointAttribute(\"INTENSITY\", PointAttributeTypes.DATA_TYPE_UINT16, 1),\r\n\tCLASSIFICATION: new PointAttribute(\"CLASSIFICATION\", PointAttributeTypes.DATA_TYPE_UINT8, 1),\r\n\tNORMAL_SPHEREMAPPED: new PointAttribute(\"NORMAL_SPHEREMAPPED\", PointAttributeTypes.DATA_TYPE_UINT8, 2),\r\n\tNORMAL_OCT16: new PointAttribute(\"NORMAL_OCT16\", PointAttributeTypes.DATA_TYPE_UINT8, 2),\r\n\tNORMAL: new PointAttribute(\"NORMAL\", PointAttributeTypes.DATA_TYPE_FLOAT, 3),\r\n\tRETURN_NUMBER: new PointAttribute(\"RETURN_NUMBER\", PointAttributeTypes.DATA_TYPE_UINT8, 1),\r\n\tNUMBER_OF_RETURNS: new PointAttribute(\"NUMBER_OF_RETURNS\", PointAttributeTypes.DATA_TYPE_UINT8, 1),\r\n\tSOURCE_ID: new PointAttribute(\"SOURCE_ID\", PointAttributeTypes.DATA_TYPE_UINT16, 1),\r\n\tINDICES: new PointAttribute(\"INDICES\", PointAttributeTypes.DATA_TYPE_UINT32, 1),\r\n\tSPACING: new PointAttribute(\"SPACING\", PointAttributeTypes.DATA_TYPE_FLOAT, 1),\r\n\tGPS_TIME: new PointAttribute(\"GPS_TIME\", PointAttributeTypes.DATA_TYPE_DOUBLE, 1)\r\n}\r\n\r\ntype PAVectorType = {\r\n\tname: string;\r\n\tattributes: string[];\r\n}\r\n\r\n// Instantiated during loading\r\nexport class PointAttributes{\r\n\r\n\r\n\r\n\t// pointAttributes will be a list of strings\r\n\tconstructor(pointAttributes?:string[],\r\n\t\t\t\tpublic attributes:PointAttribute[] = [],\r\n\t\t\t\tpublic byteSize:number = 0,\r\n\t\t\t\tpublic size:number = 0,\r\n\t\t\t\tpublic vectors:PAVectorType[]=[]\r\n\t\t){\r\n\r\n\t\tif (pointAttributes != null) {\r\n\t\t\tfor (let i = 0; i < pointAttributes.length; i++) {\r\n\t\t\t\tlet pointAttributeName = pointAttributes[i];\r\n\t\t\t\tlet pointAttribute = POINT_ATTRIBUTES[pointAttributeName];\r\n\t\t\t\tthis.attributes.push(pointAttribute);\r\n\t\t\t\tthis.byteSize += pointAttribute.byteSize;\r\n\t\t\t\tthis.size++;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// I hate these argument names that are so similar to each other but have completely different types\r\n\tadd(pointAttribute:PointAttribute){\r\n\t\tthis.attributes.push(pointAttribute);\r\n\t\tthis.byteSize += pointAttribute.byteSize;\r\n\t\tthis.size++;\r\n\t};\r\n\r\n\taddVector(vector:PAVectorType){\r\n\t\tthis.vectors.push(vector);\r\n\t}\r\n\r\n\thasNormals(){\r\n\t\tfor (let name in this.attributes) {\r\n\t\t\tlet pointAttribute = this.attributes[name];\r\n\t\t\tif (\r\n\t\t\t\tpointAttribute === POINT_ATTRIBUTES.NORMAL_SPHEREMAPPED ||\r\n\t\t\t\tpointAttribute === POINT_ATTRIBUTES.NORMAL_FLOATS ||\r\n\t\t\t\tpointAttribute === POINT_ATTRIBUTES.NORMAL ||\r\n\t\t\t\tpointAttribute === POINT_ATTRIBUTES.NORMAL_OCT16) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t};\r\n\r\n}\r\n"],"names":["PointAttributeTypes","i","obj","PointAttribute","name","type","numElements","range","POINT_ATTRIBUTES","PointAttributes","pointAttributes","attributes","byteSize","size","vectors","pointAttributeName","pointAttribute","vector"],"mappings":"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"}