{"version":3,"file":"potree-loader.es34.js","sources":["../src/loading2/WorkerPool.ts"],"sourcesContent":["import BrotliDecoderWorker from \"./brotli-decoder.worker.js?worker&inline\"\r\nimport DecoderWorker from \"./decoder.worker.js?worker&inline\"\r\n\r\n// Create enums for different types of workers\r\nexport enum WorkerType {\r\n\tDECODER_WORKER_BROTLI = \"DECODER_WORKER_BROTLI\",\r\n\tDECODER_WORKER = \"DECODER_WORKER\",\r\n}\r\n\r\n// Worker JS names: \"BinaryDecoderWorker.js\", \"DEMWorker.js\", \"EptBinaryDecoderWorker.js\", \"EptLaszipDecoderWorker.js\",\r\n// EptZstandardDecoder_preamble.js\", \"EptZstandardDecoderWorker.js\", \"LASDecoderWorker.js\", \"LASLAZWorker.js\", \"LazLoaderWorker.js\"\r\n\r\nfunction createWorker(type: WorkerType): Worker {\r\n\t// console.log(type)\r\n\tswitch (type) {\r\n\t\tcase WorkerType.DECODER_WORKER_BROTLI: {\r\n            // const worker = require(\"./brotli-decoder.worker.js\");\r\n            // return new worker();\r\n\t\t\t// return new Worker(\r\n\t\t\t// \tnew URL('./brotli-decoder.worker.js', import.meta.url),\r\n\t\t\t// \t{ type: 'module' },\r\n\t\t\t// )\r\n\t\t\treturn new BrotliDecoderWorker()\r\n        }\r\n\t\tcase WorkerType.DECODER_WORKER: {\r\n            // let ctor = require(\"./decoder.worker.js\");\r\n            // return new ctor();\r\n\t\t\t// return new Worker(\r\n\t\t\t// \tnew URL('./decoder.worker.js', import.meta.url),\r\n\t\t\t// \t{ type: 'module' },\r\n\t\t\t// )\r\n\t\t\treturn new DecoderWorker()\r\n        }\r\n\t\tdefault:\r\n\t\t\tthrow new Error(\"Unknown worker type\");\r\n\t}\r\n}\r\n\r\n\r\nexport class WorkerPool{\r\n    // Workers will be an object that has a key for each worker type and the value is an array of Workers that can be empty\r\n\tprivate workers: { [key in WorkerType]: Worker[] } = {DECODER_WORKER: [], DECODER_WORKER_BROTLI: []};\r\n\r\n\tgetWorker(workerType: WorkerType): Worker{\r\n\t\t// Throw error if workerType is not recognized\r\n\t\tif (this.workers[workerType] === undefined) {\r\n\t\t\tthrow new Error(\"Unknown worker type\");\r\n\t\t}\r\n\t\t// Given a worker URL, if URL does not exist in the worker object, create a new array with the URL as a key\r\n\t\tif (this.workers[workerType].length === 0){\r\n\t\t\tlet worker = createWorker(workerType);\r\n\t\t\tthis.workers[workerType].push(worker);\r\n\t\t}\r\n\t\tlet worker = this.workers[workerType].pop();\r\n\t\tif (worker === undefined) { // Typescript needs this\r\n\t\t\tthrow new Error(\"No workers available\");\r\n\t\t}\r\n\t\t// Return the last worker in the array and remove it from the array\r\n\t\treturn worker;\r\n\t}\r\n\r\n\treturnWorker(workerType: WorkerType, worker:Worker){\r\n\t\tthis.workers[workerType].push(worker);\r\n\t}\r\n};\r\n"],"names":["WorkerType","createWorker","type","BrotliDecoderWorker","DecoderWorker","WorkerPool","workerType","worker"],"mappings":";;AAIY,IAAAA,sBAAAA,OACXA,EAAA,wBAAwB,yBACxBA,EAAA,iBAAiB,kBAFNA,IAAAA,KAAA,CAAA,CAAA;AAQZ,SAASC,EAAaC,GAA0B;AAE/C,UAAQA,GAAM;AAAA,IACb,KAAK;AAOJ,aAAO,IAAIC,EAAoB;AAAA,IAEhC,KAAK;AAOJ,aAAO,IAAIC,EAAc;AAAA,IAE1B;AACO,YAAA,IAAI,MAAM,qBAAqB;AAAA,EACvC;AACD;AAGO,MAAMC,EAAU;AAAA,EAAhB,cAAA;AAEN,SAAQ,UAA6C,EAAC,gBAAgB,CAAA,GAAI,uBAAuB,CAAA;EAAE;AAAA,EAEnG,UAAUC,GAA+B;AAExC,QAAI,KAAK,QAAQA,CAAU,MAAM;AAC1B,YAAA,IAAI,MAAM,qBAAqB;AAGtC,QAAI,KAAK,QAAQA,CAAU,EAAE,WAAW,GAAE;AACrCC,UAAAA,IAASN,EAAaK,CAAU;AACpC,WAAK,QAAQA,CAAU,EAAE,KAAKC,CAAM;AAAA;AAErC,QAAIA,IAAS,KAAK,QAAQD,CAAU,EAAE,IAAI;AAC1C,QAAIC,MAAW;AACR,YAAA,IAAI,MAAM,sBAAsB;AAGhC,WAAAA;AAAA,EACR;AAAA,EAEA,aAAaD,GAAwBC,GAAc;AAClD,SAAK,QAAQD,CAAU,EAAE,KAAKC,CAAM;AAAA,EACrC;AACD;"}