{"version":3,"file":"potree-loader.es36.js","sources":["../src/loading/binary-loader.ts"],"sourcesContent":["// -------------------------------------------------------------------------------------------------\r\n// Converted to Typescript and adapted from https://github.com/potree/potree\r\n// -------------------------------------------------------------------------------------------------\r\n\r\nimport { Box3, BufferAttribute, BufferGeometry, Uint8BufferAttribute, Vector3 } from 'three';\r\nimport { PointAttributeName, PointAttributeType } from '../point-attributes';\r\nimport { PointCloudOctreeGeometryNode } from '../point-cloud-octree-geometry-node';\r\nimport { Version } from '../version';\r\nimport { GetUrlFn, XhrRequest } from './types';\r\n\r\nimport ClassicWorker from \"../workers/binary-decoder.worker.js?worker&inline\";\r\n\r\ninterface AttributeData {\r\n  attribute: {\r\n    name: PointAttributeName;\r\n    type: PointAttributeType;\r\n    byteSize: number;\r\n    numElements: number;\r\n  };\r\n  buffer: ArrayBuffer;\r\n}\r\n\r\ninterface WorkerResponse {\r\n  data: {\r\n    attributeBuffers: { [name: string]: AttributeData };\r\n    indices: ArrayBuffer;\r\n    tightBoundingBox: { min: number[]; max: number[] };\r\n    mean: number[];\r\n  };\r\n}\r\n\r\ninterface BinaryLoaderOptions {\r\n  getUrl?: GetUrlFn;\r\n  version: string;\r\n  boundingBox: Box3;\r\n  scale: number;\r\n  xhrRequest: XhrRequest;\r\n}\r\n\r\ntype Callback = (node: PointCloudOctreeGeometryNode) => void;\r\n\r\nexport class BinaryLoader {\r\n  version: Version;\r\n  boundingBox: Box3;\r\n  scale: number;\r\n  getUrl: GetUrlFn;\r\n  disposed: boolean = false;\r\n  xhrRequest: XhrRequest;\r\n  callbacks: Callback[];\r\n\r\n  private workers: Worker[] = [];\r\n\r\n  constructor({\r\n    getUrl = s => Promise.resolve(s),\r\n    version,\r\n    boundingBox,\r\n    scale,\r\n    xhrRequest,\r\n  }: BinaryLoaderOptions) {\r\n    console.log([getUrl, version, boundingBox, scale, xhrRequest])\r\n    if (typeof version === 'string') {\r\n      this.version = new Version(version);\r\n    } else {\r\n      this.version = version;\r\n    }\r\n\r\n    this.xhrRequest = xhrRequest;\r\n    this.getUrl = getUrl;\r\n    this.boundingBox = boundingBox;\r\n    this.scale = scale;\r\n    this.callbacks = [];\r\n  }\r\n\r\n  dispose(): void {\r\n    this.workers.forEach(worker => worker.terminate());\r\n    this.workers = [];\r\n\r\n    this.disposed = true;\r\n  }\r\n\r\n  load(node: PointCloudOctreeGeometryNode): Promise<void> {\r\n    if (node.loaded || this.disposed) {\r\n      return Promise.resolve();\r\n    }\r\n\r\n    return Promise.resolve(this.getUrl(this.getNodeUrl(node)))\r\n      .then(url => this.xhrRequest(url, { mode: 'cors' }))\r\n      .then(res => res.arrayBuffer())\r\n      .then(buffer => {\r\n        return new Promise(resolve => this.parse(node, buffer, resolve));\r\n      });\r\n  }\r\n\r\n  private getNodeUrl(node: PointCloudOctreeGeometryNode): string {\r\n    let url = node.getUrl();\r\n    if (this.version.equalOrHigher('1.4')) {\r\n      url += '.bin';\r\n    }\r\n\r\n    return url;\r\n  }\r\n\r\n  private parse(\r\n    node: PointCloudOctreeGeometryNode,\r\n    buffer: ArrayBuffer,\r\n    resolve: () => void,\r\n  ): void {\r\n    if (this.disposed) {\r\n      resolve();\r\n      return;\r\n    }\r\n\r\n    const worker = this.getWorker();\r\n\r\n    const pointAttributes = node.pcoGeometry.pointAttributes;\r\n    const numPoints = buffer.byteLength / pointAttributes.byteSize;\r\n\r\n    if (this.version.upTo('1.5')) {\r\n      node.numPoints = numPoints;\r\n    }\r\n\r\n    worker.onmessage = (e: WorkerResponse) => {\r\n      if (this.disposed) {\r\n        resolve();\r\n        return;\r\n      }\r\n\r\n      const data = e.data;\r\n\r\n      const geometry = (node.geometry = node.geometry || new BufferGeometry());\r\n      geometry.boundingBox = node.boundingBox;\r\n\r\n      this.addBufferAttributes(geometry, data.attributeBuffers);\r\n      this.addIndices(geometry, data.indices);\r\n      this.addNormalAttribute(geometry, numPoints);\r\n\r\n      node.mean = new Vector3().fromArray(data.mean);\r\n      node.tightBoundingBox = this.getTightBoundingBox(data.tightBoundingBox);\r\n      node.loaded = true;\r\n      node.loading = false;\r\n      node.failed = false;\r\n      node.pcoGeometry.numNodesLoading--;\r\n      node.pcoGeometry.needsUpdate = true;\r\n\r\n      this.releaseWorker(worker);\r\n\r\n      this.callbacks.forEach(callback => callback(node));\r\n      resolve();\r\n    };\r\n\r\n    const message = {\r\n      buffer,\r\n      pointAttributes,\r\n      version: this.version.version,\r\n      min: node.boundingBox.min.toArray(),\r\n      offset: node.pcoGeometry.offset.toArray(),\r\n      scale: this.scale,\r\n      spacing: node.spacing,\r\n      hasChildren: node.hasChildren,\r\n    };\r\n\r\n    worker.postMessage(message, [message.buffer]);\r\n  }\r\n\r\n  private getWorker(): Worker {\r\n    const worker = this.workers.pop();\r\n    if (worker) {\r\n      return worker;\r\n    }\r\n\r\n    // return new Worker(\r\n    //   new URL('../workers/binary-decoder.worker.js', import.meta.url),\r\n    //   { type: 'module' },\r\n    // )\r\n    return new ClassicWorker();\r\n  }\r\n\r\n  private releaseWorker(worker: Worker): void {\r\n    this.workers.push(worker);\r\n  }\r\n\r\n  private getTightBoundingBox({ min, max }: { min: number[]; max: number[] }): Box3 {\r\n    const box = new Box3(new Vector3().fromArray(min), new Vector3().fromArray(max));\r\n    box.max.sub(box.min);\r\n    box.min.set(0, 0, 0);\r\n\r\n    return box;\r\n  }\r\n\r\n  private addBufferAttributes(\r\n    geometry: BufferGeometry,\r\n    buffers: { [name: string]: { buffer: ArrayBuffer } },\r\n  ): void {\r\n    Object.keys(buffers).forEach(property => {\r\n      const buffer = buffers[property].buffer;\r\n\r\n      if (this.isAttribute(property, PointAttributeName.POSITION_CARTESIAN)) {\r\n        geometry.setAttribute('position', new BufferAttribute(new Float32Array(buffer), 3));\r\n      } else if (this.isAttribute(property, PointAttributeName.COLOR_PACKED)) {\r\n        geometry.setAttribute('color', new BufferAttribute(new Uint8Array(buffer), 3, true));\r\n      } else if (this.isAttribute(property, PointAttributeName.INTENSITY)) {\r\n        geometry.setAttribute('intensity', new BufferAttribute(new Float32Array(buffer), 1));\r\n      } else if (this.isAttribute(property, PointAttributeName.CLASSIFICATION)) {\r\n        geometry.setAttribute('classification', new BufferAttribute(new Uint8Array(buffer), 1));\r\n      } else if (this.isAttribute(property, PointAttributeName.NORMAL_SPHEREMAPPED)) {\r\n        geometry.setAttribute('normal', new BufferAttribute(new Float32Array(buffer), 3));\r\n      } else if (this.isAttribute(property, PointAttributeName.NORMAL_OCT16)) {\r\n        geometry.setAttribute('normal', new BufferAttribute(new Float32Array(buffer), 3));\r\n      } else if (this.isAttribute(property, PointAttributeName.NORMAL)) {\r\n        geometry.setAttribute('normal', new BufferAttribute(new Float32Array(buffer), 3));\r\n      }\r\n    });\r\n  }\r\n\r\n  private addIndices(geometry: BufferGeometry, indices: ArrayBuffer): void {\r\n    const indicesAttribute = new Uint8BufferAttribute(indices, 4);\r\n    indicesAttribute.normalized = true;\r\n    geometry.setAttribute('indices', indicesAttribute);\r\n  }\r\n\r\n  private addNormalAttribute(geometry: BufferGeometry, numPoints: number): void {\r\n    if (!geometry.getAttribute('normal')) {\r\n      const buffer = new Float32Array(numPoints * 3);\r\n      geometry.setAttribute('normal', new BufferAttribute(new Float32Array(buffer), 3));\r\n    }\r\n  }\r\n\r\n  private isAttribute(property: string, name: PointAttributeName): boolean {\r\n    return parseInt(property, 10) === name;\r\n  }\r\n}\r\n"],"names":["BinaryLoader","getUrl","s","version","boundingBox","scale","xhrRequest","Version","worker","node","url","res","buffer","resolve","pointAttributes","numPoints","e","data","geometry","BufferGeometry","Vector3","callback","message","ClassicWorker","min","max","box","Box3","buffers","property","PointAttributeName","BufferAttribute","indices","indicesAttribute","Uint8BufferAttribute","name"],"mappings":"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"}