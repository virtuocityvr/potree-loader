{"version":3,"file":"potree-loader.es38.js","sources":["../src/point-cloud-octree-geometry-node.ts"],"sourcesContent":["/**\r\n * Adapted from Potree.js http://potree.org\r\n * Potree License: https://github.com/potree/potree/blob/1.5/LICENSE\r\n */\r\n\r\nimport { Box3, BufferGeometry, EventDispatcher, Sphere, Vector3 } from 'three';\r\nimport { PointCloudOctreeGeometry } from './point-cloud-octree-geometry';\r\nimport { IPointCloudTreeNode } from './types';\r\nimport { createChildAABB } from './utils/bounds';\r\nimport { getIndexFromName } from './utils/utils';\r\n\r\nexport interface NodeData {\r\n  children: number;\r\n  numPoints: number;\r\n  name: string;\r\n}\r\n\r\nconst NODE_STRIDE = 5;\r\n\r\nexport class PointCloudOctreeGeometryNode extends EventDispatcher implements IPointCloudTreeNode {\r\n  id: number = PointCloudOctreeGeometryNode.idCount++;\r\n  name: string;\r\n  pcoGeometry: PointCloudOctreeGeometry;\r\n  index: number;\r\n  level: number = 0;\r\n  spacing: number = 0;\r\n  hasChildren: boolean = false;\r\n  readonly children: ReadonlyArray<PointCloudOctreeGeometryNode | null> = [\r\n    null,\r\n    null,\r\n    null,\r\n    null,\r\n    null,\r\n    null,\r\n    null,\r\n    null,\r\n  ];\r\n  boundingBox: Box3;\r\n  tightBoundingBox: Box3;\r\n  boundingSphere: Sphere;\r\n  mean: Vector3 = new Vector3();\r\n  numPoints: number = 0;\r\n  geometry: BufferGeometry | undefined;\r\n  loaded: boolean = false;\r\n  loading: boolean = false;\r\n  failed: boolean = false;\r\n  parent: PointCloudOctreeGeometryNode | null = null;\r\n  oneTimeDisposeHandlers: (() => void)[] = [];\r\n  isLeafNode: boolean = true;\r\n  readonly isTreeNode: boolean = false;\r\n  readonly isGeometryNode: boolean = true;\r\n\r\n  private static idCount = 0;\r\n\r\n  constructor(name: string, pcoGeometry: PointCloudOctreeGeometry, boundingBox: Box3) {\r\n    super();\r\n\r\n    this.name = name;\r\n    this.index = getIndexFromName(name);\r\n    this.pcoGeometry = pcoGeometry;\r\n    this.boundingBox = boundingBox;\r\n    this.tightBoundingBox = boundingBox.clone();\r\n    this.boundingSphere = boundingBox.getBoundingSphere(new Sphere());\r\n  }\r\n\r\n  dispose(): void {\r\n    if (!this.geometry || !this.parent) {\r\n      return;\r\n    }\r\n\r\n    this.geometry.dispose();\r\n    this.geometry = undefined;\r\n    this.loaded = false;\r\n\r\n    this.oneTimeDisposeHandlers.forEach(handler => handler());\r\n    this.oneTimeDisposeHandlers = [];\r\n  }\r\n\r\n  /**\r\n   * Gets the url of the binary file for this node.\r\n   */\r\n  getUrl(): string {\r\n    const geometry = this.pcoGeometry;\r\n    const version = geometry.loader.version;\r\n    const pathParts = [geometry.octreeDir];\r\n\r\n    if (geometry.loader && version.equalOrHigher('1.5')) {\r\n      pathParts.push(this.getHierarchyBaseUrl());\r\n      pathParts.push(this.name);\r\n    } else if (version.equalOrHigher('1.4')) {\r\n      pathParts.push(this.name);\r\n    } else if (version.upTo('1.3')) {\r\n      pathParts.push(this.name);\r\n    }\r\n\r\n    return pathParts.join('/');\r\n  }\r\n\r\n  /**\r\n   * Gets the url of the hierarchy file for this node.\r\n   */\r\n  getHierarchyUrl(): string {\r\n    return `${this.pcoGeometry.octreeDir}/${this.getHierarchyBaseUrl()}/${this.name}.hrc`;\r\n  }\r\n\r\n  /**\r\n   * Adds the specified node as a child of the current node.\r\n   *\r\n   * @param child\r\n   *    The node which is to be added as a child.\r\n   */\r\n  addChild(child: PointCloudOctreeGeometryNode): void {\r\n    (this.children as any)[child.index] = child;\r\n    this.isLeafNode = false;\r\n    child.parent = this;\r\n  }\r\n\r\n  /**\r\n   * Calls the specified callback for the current node (if includeSelf is set to true) and all its\r\n   * children.\r\n   *\r\n   * @param cb\r\n   *    The function which is to be called for each node.\r\n   */\r\n  traverse(cb: (node: PointCloudOctreeGeometryNode) => void, includeSelf = true): void {\r\n    const stack: PointCloudOctreeGeometryNode[] = includeSelf ? [this] : [];\r\n\r\n    let current: PointCloudOctreeGeometryNode | undefined;\r\n\r\n    while ((current = stack.pop()) !== undefined) {\r\n      cb(current);\r\n\r\n      for (const child of current.children) {\r\n        if (child !== null) {\r\n          stack.push(child);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  load(): Promise<void> {\r\n    if (!this.canLoad()) {\r\n      return Promise.resolve();\r\n    }\r\n\r\n    this.loading = true;\r\n    this.pcoGeometry.numNodesLoading++;\r\n    this.pcoGeometry.needsUpdate = true;\r\n\r\n    let promise: Promise<void>;\r\n\r\n    if (\r\n      this.pcoGeometry.loader.version.equalOrHigher('1.5') &&\r\n      this.level % this.pcoGeometry.hierarchyStepSize === 0 &&\r\n      this.hasChildren\r\n    ) { \r\n      promise = this.loadHierachyThenPoints();\r\n    } else {\r\n      promise = this.loadPoints();\r\n    }\r\n\r\n    return promise.catch(reason => {\r\n      this.loading = false;\r\n      this.failed = true;\r\n      this.pcoGeometry.numNodesLoading--;\r\n      throw reason;\r\n    });\r\n  }\r\n\r\n  private canLoad(): boolean {\r\n    return (\r\n      !this.loading &&\r\n      !this.loaded &&\r\n      !this.pcoGeometry.disposed &&\r\n      !this.pcoGeometry.loader.disposed &&\r\n      this.pcoGeometry.numNodesLoading < this.pcoGeometry.maxNumNodesLoading\r\n    );\r\n  }\r\n\r\n  private loadPoints(): Promise<void> {\r\n    this.pcoGeometry.needsUpdate = true;\r\n    return this.pcoGeometry.loader.load(this);\r\n  }\r\n\r\n  private loadHierachyThenPoints(): Promise<any> {\r\n    if (this.level % this.pcoGeometry.hierarchyStepSize !== 0) {\r\n      return Promise.resolve();\r\n    }\r\n\r\n    return Promise.resolve(this.pcoGeometry.loader.getUrl(this.getHierarchyUrl()))\r\n      .then(url => this.pcoGeometry.xhrRequest(url, { mode: 'cors' }))\r\n      .then(res => res.arrayBuffer())\r\n      .then(data => this.loadHierarchy(this, data));\r\n  }\r\n\r\n  /**\r\n   * Gets the url of the folder where the hierarchy is, relative to the octreeDir.\r\n   */\r\n  private getHierarchyBaseUrl(): string {\r\n    const hierarchyStepSize = this.pcoGeometry.hierarchyStepSize;\r\n    const indices = this.name.substr(1);\r\n    const numParts = Math.floor(indices.length / hierarchyStepSize);\r\n\r\n    let path = 'r/';\r\n    for (let i = 0; i < numParts; i++) {\r\n      path += `${indices.substr(i * hierarchyStepSize, hierarchyStepSize)}/`;\r\n    }\r\n\r\n    return path.slice(0, -1);\r\n  }\r\n\r\n  // tslint:disable:no-bitwise\r\n  private loadHierarchy(node: PointCloudOctreeGeometryNode, buffer: ArrayBuffer) {\r\n    const view = new DataView(buffer);\r\n\r\n    const firstNodeData = this.getNodeData(node.name, 0, view);\r\n    node.numPoints = firstNodeData.numPoints;\r\n\r\n    // Nodes which need be visited.\r\n    const stack: NodeData[] = [firstNodeData];\r\n    // Nodes which have already been decoded. We will take nodes from the stack and place them here.\r\n    const decoded: NodeData[] = [];\r\n\r\n    let offset = NODE_STRIDE;\r\n    while (stack.length > 0) {\r\n      const stackNodeData = stack.shift()!;\r\n\r\n      // From the last bit, all the way to the 8th one from the right.\r\n      let mask = 1;\r\n      for (let i = 0; i < 8 && offset + 1 < buffer.byteLength; i++) {\r\n        if ((stackNodeData.children & mask) !== 0) {\r\n          const nodeData = this.getNodeData(stackNodeData.name + i, offset, view);\r\n\r\n          decoded.push(nodeData); // Node is decoded.\r\n          stack.push(nodeData); // Need to check its children.\r\n\r\n          offset += NODE_STRIDE; // Move over to the next node in the buffer.\r\n        }\r\n\r\n        mask = mask * 2;\r\n      }\r\n    }\r\n\r\n    node.pcoGeometry.needsUpdate = true;\r\n\r\n    // Map containing all the nodes.\r\n    const nodes = new Map<string, PointCloudOctreeGeometryNode>();\r\n    nodes.set(node.name, node);\r\n    decoded.forEach(nodeData => this.addNode(nodeData, node.pcoGeometry, nodes));\r\n\r\n    node.loadPoints();\r\n  }\r\n\r\n  // tslint:enable:no-bitwise\r\n\r\n  private getNodeData(name: string, offset: number, view: DataView): NodeData {\r\n    const children = view.getUint8(offset);\r\n    const numPoints = view.getUint32(offset + 1, true);\r\n    return { children: children, numPoints: numPoints, name };\r\n  }\r\n\r\n  addNode(\r\n    { name, numPoints, children }: NodeData,\r\n    pco: PointCloudOctreeGeometry,\r\n    nodes: Map<string, PointCloudOctreeGeometryNode>,\r\n  ): void {\r\n    const index = getIndexFromName(name);\r\n    const parentName = name.substring(0, name.length - 1);\r\n    const parentNode = nodes.get(parentName)!;\r\n    const level = name.length - 1;\r\n    const boundingBox = createChildAABB(parentNode.boundingBox, index);\r\n\r\n    const node = new PointCloudOctreeGeometryNode(name, pco, boundingBox);\r\n    node.level = level;\r\n    node.numPoints = numPoints;\r\n    node.hasChildren = children > 0;\r\n    node.spacing = pco.spacing / Math.pow(2, level);\r\n\r\n    parentNode.addChild(node);\r\n    nodes.set(name, node);\r\n  }\r\n}\r\n"],"names":["NODE_STRIDE","_PointCloudOctreeGeometryNode","EventDispatcher","name","pcoGeometry","boundingBox","Vector3","getIndexFromName","Sphere","handler","geometry","version","pathParts","child","cb","includeSelf","stack","current","promise","reason","url","res","data","hierarchyStepSize","indices","numParts","path","node","buffer","view","firstNodeData","decoded","offset","stackNodeData","mask","i","nodeData","nodes","children","numPoints","pco","index","parentName","parentNode","level","createChildAABB","PointCloudOctreeGeometryNode"],"mappings":"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"}