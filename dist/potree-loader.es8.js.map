{"version":3,"file":"potree-loader.es8.js","sources":["../src/materials/point-cloud-material.ts"],"sourcesContent":["import {\r\n  AdditiveBlending,\r\n  BufferGeometry,\r\n  Camera,\r\n  Color,\r\n  LessEqualDepth,\r\n  Material,\r\n  NearestFilter,\r\n  NoBlending,\r\n  PerspectiveCamera,\r\n  RawShaderMaterial,\r\n  Scene,\r\n  Texture,\r\n  Vector3,\r\n  Vector4,\r\n  WebGLRenderer,\r\n  WebGLRenderTarget,\r\n} from 'three';\r\nimport VertShader from \"./shaders/pointcloud.vert\"\r\nimport FragShader from './shaders/pointcloud.frag';\r\nimport {\r\n  DEFAULT_HIGHLIGHT_COLOR,\r\n  DEFAULT_MAX_POINT_SIZE,\r\n  DEFAULT_MIN_POINT_SIZE,\r\n  DEFAULT_RGB_BRIGHTNESS,\r\n  DEFAULT_RGB_CONTRAST,\r\n  DEFAULT_RGB_GAMMA,\r\n  PERSPECTIVE_CAMERA,\r\n} from '../constants';\r\nimport { PointCloudOctree } from '../point-cloud-octree';\r\nimport { PointCloudOctreeNode } from '../point-cloud-octree-node';\r\nimport { byLevelAndIndex } from '../utils/utils';\r\nimport { DEFAULT_CLASSIFICATION } from './classification';\r\nimport { ClipMode, IClipBox } from './clipping';\r\nimport { PointColorType, PointOpacityType, PointShape, PointSizeType, TreeType } from './enums';\r\nimport { SPECTRAL } from './gradients';\r\nimport {\r\n  generateClassificationTexture,\r\n  generateDataTexture,\r\n  generateGradientTexture,\r\n} from './texture-generation';\r\nimport { IClassification, IGradient, IUniform } from './types';\r\nimport { ColorEncoding } from './color-encoding';\r\n\r\nexport interface IPointCloudMaterialParameters {\r\n  size: number;\r\n  minSize: number;\r\n  maxSize: number;\r\n  treeType: TreeType;\r\n  newFormat: boolean;\r\n}\r\n\r\nexport interface IPointCloudMaterialUniforms {\r\n  bbSize: IUniform<[number, number, number]>;\r\n  blendDepthSupplement: IUniform<number>;\r\n  blendHardness: IUniform<number>;\r\n  classificationLUT: IUniform<Texture>;\r\n  clipBoxCount: IUniform<number>;\r\n  clipBoxes: IUniform<Float32Array>;\r\n  depthMap: IUniform<Texture | null>;\r\n  diffuse: IUniform<[number, number, number]>;\r\n  fov: IUniform<number>;\r\n  gradient: IUniform<Texture>;\r\n  heightMax: IUniform<number>;\r\n  heightMin: IUniform<number>;\r\n  intensityBrightness: IUniform<number>;\r\n  intensityContrast: IUniform<number>;\r\n  intensityGamma: IUniform<number>;\r\n  intensityRange: IUniform<[number, number]>;\r\n  level: IUniform<number>;\r\n  maxSize: IUniform<number>;\r\n  minSize: IUniform<number>;\r\n  octreeSize: IUniform<number>;\r\n  opacity: IUniform<number>;\r\n  pcIndex: IUniform<number>;\r\n  rgbBrightness: IUniform<number>;\r\n  rgbContrast: IUniform<number>;\r\n  rgbGamma: IUniform<number>;\r\n  screenHeight: IUniform<number>;\r\n  screenWidth: IUniform<number>;\r\n  size: IUniform<number>;\r\n  spacing: IUniform<number>;\r\n  toModel: IUniform<number[]>;\r\n  transition: IUniform<number>;\r\n  uColor: IUniform<Color>;\r\n  visibleNodes: IUniform<Texture>;\r\n  vnStart: IUniform<number>;\r\n  wClassification: IUniform<number>;\r\n  wElevation: IUniform<number>;\r\n  wIntensity: IUniform<number>;\r\n  wReturnNumber: IUniform<number>;\r\n  wRGB: IUniform<number>;\r\n  wSourceID: IUniform<number>;\r\n  opacityAttenuation: IUniform<number>;\r\n  filterByNormalThreshold: IUniform<number>;\r\n  highlightedPointCoordinate: IUniform<Vector3>;\r\n  highlightedPointColor: IUniform<Vector4>;\r\n  enablePointHighlighting: IUniform<boolean>;\r\n  highlightedPointScale: IUniform<number>;\r\n}\r\n\r\nconst TREE_TYPE_DEFS = {\r\n  [TreeType.OCTREE]: 'tree_type_octree',\r\n  [TreeType.KDTREE]: 'tree_type_kdtree',\r\n};\r\n\r\nconst SIZE_TYPE_DEFS = {\r\n  [PointSizeType.FIXED]: 'fixed_point_size',\r\n  [PointSizeType.ATTENUATED]: 'attenuated_point_size',\r\n  [PointSizeType.ADAPTIVE]: 'adaptive_point_size',\r\n};\r\n\r\nconst OPACITY_DEFS = {\r\n  [PointOpacityType.ATTENUATED]: 'attenuated_opacity',\r\n  [PointOpacityType.FIXED]: 'fixed_opacity',\r\n};\r\n\r\nconst SHAPE_DEFS = {\r\n  [PointShape.SQUARE]: 'square_point_shape',\r\n  [PointShape.CIRCLE]: 'circle_point_shape',\r\n  [PointShape.PARABOLOID]: 'paraboloid_point_shape',\r\n};\r\n\r\nconst COLOR_DEFS = {\r\n  [PointColorType.RGB]: 'color_type_rgb',\r\n  [PointColorType.COLOR]: 'color_type_color',\r\n  [PointColorType.DEPTH]: 'color_type_depth',\r\n  [PointColorType.HEIGHT]: 'color_type_height',\r\n  [PointColorType.INTENSITY]: 'color_type_intensity',\r\n  [PointColorType.INTENSITY_GRADIENT]: 'color_type_intensity_gradient',\r\n  [PointColorType.LOD]: 'color_type_lod',\r\n  [PointColorType.POINT_INDEX]: 'color_type_point_index',\r\n  [PointColorType.CLASSIFICATION]: 'color_type_classification',\r\n  [PointColorType.RETURN_NUMBER]: 'color_type_return_number',\r\n  [PointColorType.SOURCE]: 'color_type_source',\r\n  [PointColorType.NORMAL]: 'color_type_normal',\r\n  [PointColorType.PHONG]: 'color_type_phong',\r\n  [PointColorType.RGB_HEIGHT]: 'color_type_rgb_height',\r\n  [PointColorType.COMPOSITE]: 'color_type_composite',\r\n};\r\n\r\nconst CLIP_MODE_DEFS = {\r\n  [ClipMode.DISABLED]: 'clip_disabled',\r\n  [ClipMode.CLIP_OUTSIDE]: 'clip_outside',\r\n  [ClipMode.HIGHLIGHT_INSIDE]: 'clip_highlight_inside',\r\n};\r\n\r\nconst INPUT_COLOR_ENCODING = {\r\n  [ColorEncoding.LINEAR]: 'input_color_encoding_linear',\r\n  [ColorEncoding.SRGB]: 'input_color_encoding_sRGB',\r\n}\r\n\r\nconst OUTPUT_COLOR_ENCODING = {\r\n  [ColorEncoding.LINEAR]: 'output_color_encoding_linear',\r\n  [ColorEncoding.SRGB]: 'output_color_encoding_sRGB',\r\n}\r\n\r\nexport class PointCloudMaterial extends RawShaderMaterial {\r\n  private static helperVec3 = new Vector3();\r\n\r\n  lights = false;\r\n  fog = false;\r\n  numClipBoxes: number = 0;\r\n  clipBoxes: IClipBox[] = [];\r\n  visibleNodesTexture: Texture | undefined;\r\n  private visibleNodeTextureOffsets = new Map<string, number>();\r\n\r\n  private _gradient = SPECTRAL;\r\n  private gradientTexture: Texture | undefined = generateGradientTexture(this._gradient);\r\n\r\n  private _classification: IClassification = DEFAULT_CLASSIFICATION;\r\n  private classificationTexture: Texture | undefined = generateClassificationTexture(\r\n    this._classification,\r\n  );\r\n\r\n  uniforms: IPointCloudMaterialUniforms & Record<string, IUniform<any>> = {\r\n    bbSize: makeUniform('fv', [0, 0, 0] as [number, number, number]),\r\n    blendDepthSupplement: makeUniform('f', 0.0),\r\n    blendHardness: makeUniform('f', 2.0),\r\n    classificationLUT: makeUniform('t', this.classificationTexture || new Texture()),\r\n    clipBoxCount: makeUniform('f', 0),\r\n    clipBoxes: makeUniform('Matrix4fv', [] as any),\r\n    depthMap: makeUniform('t', null),\r\n    diffuse: makeUniform('fv', [1, 1, 1] as [number, number, number]),\r\n    fov: makeUniform('f', 1.0),\r\n    gradient: makeUniform('t', this.gradientTexture || new Texture()),\r\n    heightMax: makeUniform('f', 1.0),\r\n    heightMin: makeUniform('f', 0.0),\r\n    intensityBrightness: makeUniform('f', 0),\r\n    intensityContrast: makeUniform('f', 0),\r\n    intensityGamma: makeUniform('f', 1),\r\n    intensityRange: makeUniform('fv', [0, 65000] as [number, number]),\r\n    isLeafNode: makeUniform('b', 0),\r\n    level: makeUniform('f', 0.0),\r\n    maxSize: makeUniform('f', DEFAULT_MAX_POINT_SIZE),\r\n    minSize: makeUniform('f', DEFAULT_MIN_POINT_SIZE),\r\n    octreeSize: makeUniform('f', 0),\r\n    opacity: makeUniform('f', 1.0),\r\n    pcIndex: makeUniform('f', 0),\r\n    rgbBrightness: makeUniform('f', DEFAULT_RGB_BRIGHTNESS),\r\n    rgbContrast: makeUniform('f', DEFAULT_RGB_CONTRAST),\r\n    rgbGamma: makeUniform('f', DEFAULT_RGB_GAMMA),\r\n    screenHeight: makeUniform('f', 1.0),\r\n    screenWidth: makeUniform('f', 1.0),\r\n    size: makeUniform('f', 1),\r\n    spacing: makeUniform('f', 1.0),\r\n    toModel: makeUniform('Matrix4f', []),\r\n    transition: makeUniform('f', 0.5),\r\n    uColor: makeUniform('c', new Color(0xffffff)),\r\n    // @ts-ignore\r\n    visibleNodes: makeUniform('t', this.visibleNodesTexture || new Texture()),\r\n    vnStart: makeUniform('f', 0.0),\r\n    wClassification: makeUniform('f', 0),\r\n    wElevation: makeUniform('f', 0),\r\n    wIntensity: makeUniform('f', 0),\r\n    wReturnNumber: makeUniform('f', 0),\r\n    wRGB: makeUniform('f', 1),\r\n    wSourceID: makeUniform('f', 0),\r\n    opacityAttenuation: makeUniform('f', 1),\r\n    filterByNormalThreshold: makeUniform('f', 0),\r\n    highlightedPointCoordinate: makeUniform('fv', new Vector3()),\r\n    highlightedPointColor: makeUniform('fv', DEFAULT_HIGHLIGHT_COLOR.clone()),\r\n    enablePointHighlighting: makeUniform('b', true),\r\n    highlightedPointScale: makeUniform('f', 2.0),\r\n  };\r\n\r\n  @uniform('bbSize') bbSize!: [number, number, number];\r\n  @uniform('depthMap') depthMap!: Texture | undefined;\r\n  @uniform('fov') fov!: number;\r\n  @uniform('heightMax') heightMax!: number;\r\n  @uniform('heightMin') heightMin!: number;\r\n  @uniform('intensityBrightness') intensityBrightness!: number;\r\n  @uniform('intensityContrast') intensityContrast!: number;\r\n  @uniform('intensityGamma') intensityGamma!: number;\r\n  @uniform('intensityRange') intensityRange!: [number, number];\r\n  @uniform('maxSize') maxSize!: number;\r\n  @uniform('minSize') minSize!: number;\r\n  @uniform('octreeSize') octreeSize!: number;\r\n  @uniform('opacity', true) opacity!: number;\r\n  @uniform('rgbBrightness', true) rgbBrightness!: number;\r\n  @uniform('rgbContrast', true) rgbContrast!: number;\r\n  @uniform('rgbGamma', true) rgbGamma!: number;\r\n  @uniform('screenHeight') screenHeight!: number;\r\n  @uniform('screenWidth') screenWidth!: number;\r\n  @uniform('size') size!: number;\r\n  @uniform('spacing') spacing!: number;\r\n  @uniform('transition') transition!: number;\r\n  @uniform('uColor') color!: Color;\r\n  @uniform('wClassification') weightClassification!: number;\r\n  @uniform('wElevation') weightElevation!: number;\r\n  @uniform('wIntensity') weightIntensity!: number;\r\n  @uniform('wReturnNumber') weightReturnNumber!: number;\r\n  @uniform('wRGB') weightRGB!: number;\r\n  @uniform('wSourceID') weightSourceID!: number;\r\n  @uniform('opacityAttenuation') opacityAttenuation!: number;\r\n  @uniform('filterByNormalThreshold') filterByNormalThreshold!: number;\r\n  @uniform('highlightedPointCoordinate') highlightedPointCoordinate!: Vector3;\r\n  @uniform('highlightedPointColor') highlightedPointColor!: Vector4;\r\n  @uniform('enablePointHighlighting') enablePointHighlighting!: boolean;\r\n  @uniform('highlightedPointScale') highlightedPointScale!: number;\r\n\r\n  // Declare PointCloudMaterial attributes that need shader updates upon change, and set default values.\r\n  @requiresShaderUpdate() useClipBox: boolean = false;\r\n  @requiresShaderUpdate() weighted: boolean = false;\r\n  @requiresShaderUpdate() pointColorType: PointColorType = PointColorType.RGB;\r\n  @requiresShaderUpdate() pointSizeType: PointSizeType = PointSizeType.ADAPTIVE;\r\n  @requiresShaderUpdate() clipMode: ClipMode = ClipMode.DISABLED;\r\n  @requiresShaderUpdate() useEDL: boolean = false;\r\n  @requiresShaderUpdate() shape: PointShape = PointShape.SQUARE;\r\n  @requiresShaderUpdate() treeType: TreeType = TreeType.OCTREE;\r\n  @requiresShaderUpdate() pointOpacityType: PointOpacityType = PointOpacityType.FIXED;\r\n  @requiresShaderUpdate() useFilterByNormal: boolean = false;\r\n  @requiresShaderUpdate() highlightPoint: boolean = false;\r\n  @requiresShaderUpdate() inputColorEncoding: ColorEncoding = ColorEncoding.SRGB;\r\n  @requiresShaderUpdate() outputColorEncoding: ColorEncoding = ColorEncoding.LINEAR;\r\n\r\n  attributes = {\r\n    position: { type: 'fv', value: [] },\r\n    color: { type: 'fv', value: [] },\r\n    normal: { type: 'fv', value: [] },\r\n    intensity: { type: 'f', value: [] },\r\n    classification: { type: 'f', value: [] },\r\n    returnNumber: { type: 'f', value: [] },\r\n    numberOfReturns: { type: 'f', value: [] },\r\n    pointSourceID: { type: 'f', value: [] },\r\n    indices: { type: 'fv', value: [] },\r\n  };\r\n  newFormat: boolean;\r\n\r\n  constructor(parameters: Partial<IPointCloudMaterialParameters> = {}) {\r\n    super();\r\n\r\n    const tex = (this.visibleNodesTexture = generateDataTexture(2048, 1, new Color(0xffffff)));\r\n    tex.minFilter = NearestFilter;\r\n    tex.magFilter = NearestFilter;\r\n    this.setUniform('visibleNodes', tex);\r\n\r\n    this.treeType = getValid(parameters.treeType, TreeType.OCTREE);\r\n    this.size = getValid(parameters.size, 1.0);\r\n    this.minSize = getValid(parameters.minSize, 2.0);\r\n    this.maxSize = getValid(parameters.maxSize, 50.0);\r\n\r\n    this.newFormat = !!parameters.newFormat;\r\n\r\n    this.classification = DEFAULT_CLASSIFICATION;\r\n\r\n    this.defaultAttributeValues.normal = [0, 0, 0];\r\n    this.defaultAttributeValues.classification = [0, 0, 0];\r\n    this.defaultAttributeValues.indices = [0, 0, 0, 0];\r\n\r\n    this.vertexColors = true;\r\n    // throw new Error('Not implemented');\r\n    // this.extensions.fragDepth = true;\r\n\r\n    this.updateShaderSource();\r\n  }\r\n\r\n  dispose(): void {\r\n    super.dispose();\r\n\r\n    if (this.gradientTexture) {\r\n      this.gradientTexture.dispose();\r\n      this.gradientTexture = undefined;\r\n    }\r\n\r\n    if (this.visibleNodesTexture) {\r\n      this.visibleNodesTexture.dispose();\r\n      this.visibleNodesTexture = undefined;\r\n    }\r\n\r\n    this.clearVisibleNodeTextureOffsets();\r\n\r\n    if (this.classificationTexture) {\r\n      this.classificationTexture.dispose();\r\n      this.classificationTexture = undefined;\r\n    }\r\n\r\n    if (this.depthMap) {\r\n      this.depthMap.dispose();\r\n      this.depthMap = undefined;\r\n    }\r\n  }\r\n\r\n  clearVisibleNodeTextureOffsets(): void {\r\n    this.visibleNodeTextureOffsets.clear();\r\n  }\r\n\r\n  updateShaderSource(): void {\r\n    this.vertexShader = this.applyDefines(VertShader);\r\n    this.fragmentShader = this.applyDefines(FragShader);\r\n\r\n    if (this.opacity === 1.0) {\r\n      this.blending = NoBlending;\r\n      this.transparent = false;\r\n      this.depthTest = true;\r\n      this.depthWrite = true;\r\n      this.depthFunc = LessEqualDepth;\r\n    } else if (this.opacity < 1.0 && !this.useEDL) {\r\n      this.blending = AdditiveBlending;\r\n      this.transparent = true;\r\n      this.depthTest = false;\r\n      this.depthWrite = true;\r\n    }\r\n\r\n    if (this.weighted) {\r\n      this.blending = AdditiveBlending;\r\n      this.transparent = true;\r\n      this.depthTest = true;\r\n      this.depthWrite = false;\r\n      this.depthFunc = LessEqualDepth;\r\n    }\r\n\r\n    this.needsUpdate = true;\r\n  }\r\n\r\n  applyDefines(shaderSrc: string): string {\r\n    const parts: string[] = [];\r\n\r\n    function define(value: string | undefined) {\r\n      if (value) {\r\n        parts.push(`#define ${value}`);\r\n      }\r\n    }\r\n\r\n    define(TREE_TYPE_DEFS[this.treeType]);\r\n    define(SIZE_TYPE_DEFS[this.pointSizeType]);\r\n    define(SHAPE_DEFS[this.shape]);\r\n    define(COLOR_DEFS[this.pointColorType]);\r\n    define(CLIP_MODE_DEFS[this.clipMode]);\r\n    define(OPACITY_DEFS[this.pointOpacityType]);\r\n    define(OUTPUT_COLOR_ENCODING[this.outputColorEncoding]);\r\n    define(INPUT_COLOR_ENCODING[this.inputColorEncoding]);\r\n\r\n    // We only perform gamma and brightness/contrast calculations per point if values are specified.\r\n    if (\r\n      this.rgbGamma !== DEFAULT_RGB_GAMMA ||\r\n      this.rgbBrightness !== DEFAULT_RGB_BRIGHTNESS ||\r\n      this.rgbContrast !== DEFAULT_RGB_CONTRAST\r\n    ) {\r\n      define('use_rgb_gamma_contrast_brightness');\r\n    }\r\n\r\n    if (this.useFilterByNormal) {\r\n      define('use_filter_by_normal');\r\n    }\r\n\r\n    if (this.useEDL) {\r\n      define('use_edl');\r\n    }\r\n\r\n    if (this.weighted) {\r\n      define('weighted_splats');\r\n    }\r\n\r\n    if (this.numClipBoxes > 0) {\r\n      define('use_clip_box');\r\n    }\r\n\r\n    if (this.highlightPoint) {\r\n      define('highlight_point');\r\n    }\r\n\r\n    define('MAX_POINT_LIGHTS 0');\r\n    define('MAX_DIR_LIGHTS 0');\r\n\r\n    if (this.newFormat) {\r\n      define ('new_format')\r\n    }\r\n\r\n\r\n    // If \"#version 300 es\" exists as a line in shaderSrc, remove it and add it as the first element in the parts array\r\n    const versionLine = shaderSrc.match(/^\\s*#version\\s+300\\s+es\\s*\\n/);\r\n    if (versionLine) {\r\n      parts.unshift(versionLine[0]);\r\n      shaderSrc = shaderSrc.replace(versionLine[0], '');\r\n    }\r\n    parts.push(shaderSrc);\r\n    return parts.join('\\n');\r\n  }\r\n\r\n  setClipBoxes(clipBoxes: IClipBox[]): void {\r\n    if (!clipBoxes) {\r\n      return;\r\n    }\r\n\r\n    this.clipBoxes = clipBoxes;\r\n\r\n    const doUpdate =\r\n      this.numClipBoxes !== clipBoxes.length && (clipBoxes.length === 0 || this.numClipBoxes === 0);\r\n\r\n    this.numClipBoxes = clipBoxes.length;\r\n    this.setUniform('clipBoxCount', this.numClipBoxes);\r\n\r\n    if (doUpdate) {\r\n      this.updateShaderSource();\r\n    }\r\n\r\n    const clipBoxesLength = this.numClipBoxes * 16;\r\n    const clipBoxesArray = new Float32Array(clipBoxesLength);\r\n\r\n    for (let i = 0; i < this.numClipBoxes; i++) {\r\n      clipBoxesArray.set(clipBoxes[i].inverse.elements, 16 * i);\r\n    }\r\n\r\n    for (let i = 0; i < clipBoxesLength; i++) {\r\n      if (isNaN(clipBoxesArray[i])) {\r\n        clipBoxesArray[i] = Infinity;\r\n      }\r\n    }\r\n\r\n    this.setUniform('clipBoxes', clipBoxesArray);\r\n  }\r\n\r\n  get gradient(): IGradient {\r\n    return this._gradient;\r\n  }\r\n\r\n  set gradient(value: IGradient) {\r\n    if (this._gradient !== value) {\r\n      this._gradient = value;\r\n      this.gradientTexture = generateGradientTexture(this._gradient);\r\n      this.setUniform('gradient', this.gradientTexture);\r\n    }\r\n  }\r\n\r\n  get classification(): IClassification {\r\n    return this._classification;\r\n  }\r\n\r\n  set classification(value: IClassification) {\r\n    const copy: IClassification = {} as any;\r\n    for (const key of Object.keys(value)) {\r\n      copy[key] = value[key].clone();\r\n    }\r\n\r\n    let isEqual = false;\r\n    if (this._classification === undefined) {\r\n      isEqual = false;\r\n    } else {\r\n      isEqual = Object.keys(copy).length === Object.keys(this._classification).length;\r\n\r\n      for (const key of Object.keys(copy)) {\r\n        isEqual = isEqual && this._classification[key] !== undefined;\r\n        isEqual = isEqual && copy[key].equals(this._classification[key]);\r\n      }\r\n    }\r\n\r\n    if (!isEqual) {\r\n      this._classification = copy;\r\n      this.recomputeClassification();\r\n    }\r\n  }\r\n\r\n  private recomputeClassification(): void {\r\n    this.classificationTexture = generateClassificationTexture(this._classification);\r\n    this.setUniform('classificationLUT', this.classificationTexture);\r\n  }\r\n\r\n  get elevationRange(): [number, number] {\r\n    return [this.heightMin, this.heightMax];\r\n  }\r\n\r\n  set elevationRange(value: [number, number]) {\r\n    this.heightMin = value[0];\r\n    this.heightMax = value[1];\r\n  }\r\n\r\n  getUniform<K extends keyof IPointCloudMaterialUniforms>(\r\n    name: K,\r\n  ): IPointCloudMaterialUniforms[K]['value'] {\r\n    return this.uniforms === undefined ? (undefined as any) : this.uniforms[name].value;\r\n  }\r\n\r\n  setUniform<K extends keyof IPointCloudMaterialUniforms>(\r\n    name: K,\r\n    value: IPointCloudMaterialUniforms[K]['value'],\r\n  ): void {\r\n    if (this.uniforms === undefined) {\r\n      return;\r\n    }\r\n\r\n    const uObj = this.uniforms[name];\r\n\r\n    if (uObj.type === 'c') {\r\n      (uObj.value as Color).copy(value as Color);\r\n    } else if (value !== uObj.value) {\r\n      uObj.value = value;\r\n    }\r\n  }\r\n\r\n  updateMaterial(\r\n    octree: PointCloudOctree,\r\n    visibleNodes: PointCloudOctreeNode[],\r\n    camera: Camera,\r\n    renderer: WebGLRenderer,\r\n  ): void {\r\n    const pixelRatio = renderer.getPixelRatio();\r\n\r\n    if (camera.type === PERSPECTIVE_CAMERA) {\r\n      this.fov = (camera as PerspectiveCamera).fov * (Math.PI / 180);\r\n    } else {\r\n      this.fov = Math.PI / 2; // will result in slope = 1 in the shader\r\n    }\r\n    const renderTarget = renderer.getRenderTarget();\r\n    if (renderTarget !== null && renderTarget instanceof WebGLRenderTarget) {\r\n      this.screenWidth = renderTarget.width;\r\n      this.screenHeight = renderTarget.height;\r\n    } else {\r\n      this.screenWidth = renderer.domElement.clientWidth * pixelRatio;\r\n      this.screenHeight = renderer.domElement.clientHeight * pixelRatio;\r\n    }\r\n\r\n    const maxScale = Math.max(octree.scale.x, octree.scale.y, octree.scale.z);\r\n    this.spacing = octree.pcoGeometry.spacing * maxScale;\r\n    this.octreeSize = octree.pcoGeometry.boundingBox.getSize(PointCloudMaterial.helperVec3).x;\r\n\r\n    if (\r\n      this.pointSizeType === PointSizeType.ADAPTIVE ||\r\n      this.pointColorType === PointColorType.LOD\r\n    ) {\r\n      this.updateVisibilityTextureData(visibleNodes);\r\n    }\r\n  }\r\n\r\n  private updateVisibilityTextureData(nodes: PointCloudOctreeNode[]) {\r\n    nodes.sort(byLevelAndIndex);\r\n\r\n    const data = new Uint8Array(nodes.length * 4);\r\n    const offsetsToChild = new Array(nodes.length).fill(Infinity);\r\n\r\n    this.visibleNodeTextureOffsets.clear();\r\n\r\n    for (let i = 0; i < nodes.length; i++) {\r\n      const node = nodes[i];\r\n\r\n      this.visibleNodeTextureOffsets.set(node.name, i);\r\n\r\n      if (i > 0) {\r\n        const parentName = node.name.slice(0, -1);\r\n        const parentOffset = this.visibleNodeTextureOffsets.get(parentName)!;\r\n        const parentOffsetToChild = i - parentOffset;\r\n\r\n        offsetsToChild[parentOffset] = Math.min(offsetsToChild[parentOffset], parentOffsetToChild);\r\n\r\n        // tslint:disable:no-bitwise\r\n        const offset = parentOffset * 4;\r\n        data[offset] = data[offset] | (1 << node.index);\r\n        data[offset + 1] = offsetsToChild[parentOffset] >> 8;\r\n        data[offset + 2] = offsetsToChild[parentOffset] % 256;\r\n        // tslint:enable:no-bitwise\r\n      }\r\n\r\n      data[i * 4 + 3] = node.name.length;\r\n    }\r\n\r\n    const texture = this.visibleNodesTexture;\r\n    if (texture) {\r\n      texture.image.data.set(data);\r\n      texture.needsUpdate = true;\r\n    }\r\n  }\r\n\r\n  static makeOnBeforeRender(\r\n    octree: PointCloudOctree,\r\n    node: PointCloudOctreeNode,\r\n    pcIndex?: number,\r\n  ) {\r\n    return (\r\n      _renderer: WebGLRenderer,\r\n      _scene: Scene,\r\n      _camera: Camera,\r\n      _geometry: BufferGeometry,\r\n      material: Material,\r\n    ) => {\r\n      const pointCloudMaterial = material as PointCloudMaterial;\r\n      const materialUniforms = pointCloudMaterial.uniforms;\r\n\r\n      materialUniforms.level.value = node.level;\r\n      materialUniforms.isLeafNode.value = node.isLeafNode;\r\n\r\n      const vnStart = pointCloudMaterial.visibleNodeTextureOffsets.get(node.name);\r\n      if (vnStart !== undefined) {\r\n        materialUniforms.vnStart.value = vnStart;\r\n      }\r\n\r\n      materialUniforms.pcIndex.value =\r\n        pcIndex !== undefined ? pcIndex : octree.visibleNodes.indexOf(node);\r\n\r\n      // Note: when changing uniforms in onBeforeRender, the flag uniformsNeedUpdate has to be\r\n      // set to true to instruct ThreeJS to upload them. See also\r\n      // https://github.com/mrdoob/three.js/issues/9870#issuecomment-368750182.\r\n\r\n      // Remove the cast to any after updating to Three.JS >= r113\r\n      (material as any) /*ShaderMaterial*/.uniformsNeedUpdate = true;\r\n    };\r\n  }\r\n}\r\n\r\nfunction makeUniform<T>(type: string, value: T): IUniform<T> {\r\n  return { type, value };\r\n}\r\n\r\nfunction getValid<T>(a: T | undefined, b: T): T {\r\n  return a === undefined ? b : a;\r\n}\r\n\r\n// tslint:disable:no-invalid-this\r\nfunction uniform<K extends keyof IPointCloudMaterialUniforms>(\r\n  uniformName: K,\r\n  requireSrcUpdate: boolean = false,\r\n): PropertyDecorator {\r\n  return (target: Object, propertyKey: string | symbol): void => {\r\n    Object.defineProperty(target, propertyKey, {\r\n      get() {\r\n        return this.getUniform(uniformName);\r\n      },\r\n      set(value: any) {\r\n        if (value !== this.getUniform(uniformName)) {\r\n          this.setUniform(uniformName, value);\r\n          if (requireSrcUpdate) {\r\n            this.updateShaderSource();\r\n          }\r\n        }\r\n      },\r\n    });\r\n  };\r\n}\r\n\r\nfunction requiresShaderUpdate() {\r\n  return (target: Object, propertyKey: string | symbol): void => {\r\n    const fieldName = `_${propertyKey.toString()}`;\r\n\r\n    Object.defineProperty(target, propertyKey, {\r\n      get() {\r\n        return this[fieldName];\r\n      },\r\n      set(value: any) {\r\n        if (value !== this[fieldName]) {\r\n          this[fieldName] = value;\r\n          this.updateShaderSource();\r\n        }\r\n      },\r\n    });\r\n  };\r\n}\r\n"],"names":["TREE_TYPE_DEFS","TreeType","SIZE_TYPE_DEFS","PointSizeType","OPACITY_DEFS","PointOpacityType","SHAPE_DEFS","PointShape","COLOR_DEFS","PointColorType","CLIP_MODE_DEFS","ClipMode","INPUT_COLOR_ENCODING","ColorEncoding","OUTPUT_COLOR_ENCODING","_PointCloudMaterial","RawShaderMaterial","parameters","SPECTRAL","generateGradientTexture","DEFAULT_CLASSIFICATION","generateClassificationTexture","makeUniform","Texture","DEFAULT_MAX_POINT_SIZE","DEFAULT_MIN_POINT_SIZE","DEFAULT_RGB_BRIGHTNESS","DEFAULT_RGB_CONTRAST","DEFAULT_RGB_GAMMA","Color","Vector3","DEFAULT_HIGHLIGHT_COLOR","tex","generateDataTexture","NearestFilter","getValid","VertShader","FragShader","NoBlending","LessEqualDepth","AdditiveBlending","shaderSrc","parts","define","value","versionLine","clipBoxes","doUpdate","clipBoxesLength","clipBoxesArray","i","copy","key","isEqual","name","uObj","octree","visibleNodes","camera","renderer","pixelRatio","PERSPECTIVE_CAMERA","renderTarget","WebGLRenderTarget","maxScale","nodes","byLevelAndIndex","data","offsetsToChild","node","parentName","parentOffset","parentOffsetToChild","offset","texture","pcIndex","_renderer","_scene","_camera","_geometry","material","pointCloudMaterial","materialUniforms","vnStart","PointCloudMaterial","__decorateClass","uniform","requiresShaderUpdate","type","a","b","uniformName","requireSrcUpdate","target","propertyKey","fieldName"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAqGA,MAAMA,IAAiB;AAAA,EACrB,CAACC,EAAS,MAAM,GAAG;AAAA,EACnB,CAACA,EAAS,MAAM,GAAG;AACrB,GAEMC,IAAiB;AAAA,EACrB,CAACC,EAAc,KAAK,GAAG;AAAA,EACvB,CAACA,EAAc,UAAU,GAAG;AAAA,EAC5B,CAACA,EAAc,QAAQ,GAAG;AAC5B,GAEMC,IAAe;AAAA,EACnB,CAACC,EAAiB,UAAU,GAAG;AAAA,EAC/B,CAACA,EAAiB,KAAK,GAAG;AAC5B,GAEMC,KAAa;AAAA,EACjB,CAACC,EAAW,MAAM,GAAG;AAAA,EACrB,CAACA,EAAW,MAAM,GAAG;AAAA,EACrB,CAACA,EAAW,UAAU,GAAG;AAC3B,GAEMC,KAAa;AAAA,EACjB,CAACC,EAAe,GAAG,GAAG;AAAA,EACtB,CAACA,EAAe,KAAK,GAAG;AAAA,EACxB,CAACA,EAAe,KAAK,GAAG;AAAA,EACxB,CAACA,EAAe,MAAM,GAAG;AAAA,EACzB,CAACA,EAAe,SAAS,GAAG;AAAA,EAC5B,CAACA,EAAe,kBAAkB,GAAG;AAAA,EACrC,CAACA,EAAe,GAAG,GAAG;AAAA,EACtB,CAACA,EAAe,WAAW,GAAG;AAAA,EAC9B,CAACA,EAAe,cAAc,GAAG;AAAA,EACjC,CAACA,EAAe,aAAa,GAAG;AAAA,EAChC,CAACA,EAAe,MAAM,GAAG;AAAA,EACzB,CAACA,EAAe,MAAM,GAAG;AAAA,EACzB,CAACA,EAAe,KAAK,GAAG;AAAA,EACxB,CAACA,EAAe,UAAU,GAAG;AAAA,EAC7B,CAACA,EAAe,SAAS,GAAG;AAC9B,GAEMC,KAAiB;AAAA,EACrB,CAACC,EAAS,QAAQ,GAAG;AAAA,EACrB,CAACA,EAAS,YAAY,GAAG;AAAA,EACzB,CAACA,EAAS,gBAAgB,GAAG;AAC/B,GAEMC,KAAuB;AAAA,EAC3B,CAACC,EAAc,MAAM,GAAG;AAAA,EACxB,CAACA,EAAc,IAAI,GAAG;AACxB,GAEMC,KAAwB;AAAA,EAC5B,CAACD,EAAc,MAAM,GAAG;AAAA,EACxB,CAACA,EAAc,IAAI,GAAG;AACxB,GAEaE,IAAN,cAAiCC,EAAkB;AAAA,EAoIxD,YAAYC,IAAqD,IAAI;AAC7D,aAlIC,KAAA,SAAA,IACH,KAAA,MAAA,IACiB,KAAA,eAAA,GACvB,KAAA,YAAwB,IAEhB,KAAA,gDAAgC,OAExC,KAAQ,YAAYC,GACZ,KAAA,kBAAuCC,EAAwB,KAAK,SAAS,GAErF,KAAQ,kBAAmCC,GAC3C,KAAQ,wBAA6CC;AAAA,MACnD,KAAK;AAAA,IAAA,GAGiE,KAAA,WAAA;AAAA,MACtE,QAAQC,EAAY,MAAM,CAAC,GAAG,GAAG,CAAC,CAA6B;AAAA,MAC/D,sBAAsBA,EAAY,KAAK,CAAG;AAAA,MAC1C,eAAeA,EAAY,KAAK,CAAG;AAAA,MACnC,mBAAmBA,EAAY,KAAK,KAAK,yBAAyB,IAAIC,GAAS;AAAA,MAC/E,cAAcD,EAAY,KAAK,CAAC;AAAA,MAChC,WAAWA,EAAY,aAAa,EAAS;AAAA,MAC7C,UAAUA,EAAY,KAAK,IAAI;AAAA,MAC/B,SAASA,EAAY,MAAM,CAAC,GAAG,GAAG,CAAC,CAA6B;AAAA,MAChE,KAAKA,EAAY,KAAK,CAAG;AAAA,MACzB,UAAUA,EAAY,KAAK,KAAK,mBAAmB,IAAIC,GAAS;AAAA,MAChE,WAAWD,EAAY,KAAK,CAAG;AAAA,MAC/B,WAAWA,EAAY,KAAK,CAAG;AAAA,MAC/B,qBAAqBA,EAAY,KAAK,CAAC;AAAA,MACvC,mBAAmBA,EAAY,KAAK,CAAC;AAAA,MACrC,gBAAgBA,EAAY,KAAK,CAAC;AAAA,MAClC,gBAAgBA,EAAY,MAAM,CAAC,GAAG,IAAK,CAAqB;AAAA,MAChE,YAAYA,EAAY,KAAK,CAAC;AAAA,MAC9B,OAAOA,EAAY,KAAK,CAAG;AAAA,MAC3B,SAASA,EAAY,KAAKE,CAAsB;AAAA,MAChD,SAASF,EAAY,KAAKG,CAAsB;AAAA,MAChD,YAAYH,EAAY,KAAK,CAAC;AAAA,MAC9B,SAASA,EAAY,KAAK,CAAG;AAAA,MAC7B,SAASA,EAAY,KAAK,CAAC;AAAA,MAC3B,eAAeA,EAAY,KAAKI,CAAsB;AAAA,MACtD,aAAaJ,EAAY,KAAKK,CAAoB;AAAA,MAClD,UAAUL,EAAY,KAAKM,CAAiB;AAAA,MAC5C,cAAcN,EAAY,KAAK,CAAG;AAAA,MAClC,aAAaA,EAAY,KAAK,CAAG;AAAA,MACjC,MAAMA,EAAY,KAAK,CAAC;AAAA,MACxB,SAASA,EAAY,KAAK,CAAG;AAAA,MAC7B,SAASA,EAAY,YAAY,EAAE;AAAA,MACnC,YAAYA,EAAY,KAAK,GAAG;AAAA,MAChC,QAAQA,EAAY,KAAK,IAAIO,EAAM,QAAQ,CAAC;AAAA;AAAA,MAE5C,cAAcP,EAAY,KAAK,KAAK,uBAAuB,IAAIC,GAAS;AAAA,MACxE,SAASD,EAAY,KAAK,CAAG;AAAA,MAC7B,iBAAiBA,EAAY,KAAK,CAAC;AAAA,MACnC,YAAYA,EAAY,KAAK,CAAC;AAAA,MAC9B,YAAYA,EAAY,KAAK,CAAC;AAAA,MAC9B,eAAeA,EAAY,KAAK,CAAC;AAAA,MACjC,MAAMA,EAAY,KAAK,CAAC;AAAA,MACxB,WAAWA,EAAY,KAAK,CAAC;AAAA,MAC7B,oBAAoBA,EAAY,KAAK,CAAC;AAAA,MACtC,yBAAyBA,EAAY,KAAK,CAAC;AAAA,MAC3C,4BAA4BA,EAAY,MAAM,IAAIQ,GAAS;AAAA,MAC3D,uBAAuBR,EAAY,MAAMS,EAAwB,OAAO;AAAA,MACxE,yBAAyBT,EAAY,KAAK,EAAI;AAAA,MAC9C,uBAAuBA,EAAY,KAAK,CAAG;AAAA,IAAA,GAuCC,KAAA,aAAA,IACF,KAAA,WAAA,IACpB,KAAA,iBAAiCb,EAAe,KAChD,KAAA,gBAA+BN,EAAc,UAC7C,KAAA,WAAqBQ,EAAS,UACZ,KAAA,SAAA,IAClB,KAAA,QAAoBJ,EAAW,QAC/B,KAAA,WAAqBN,EAAS,QAC9B,KAAA,mBAAqCI,EAAiB,OACzB,KAAA,oBAAA,IACH,KAAA,iBAAA,IAC1B,KAAA,qBAAoCQ,EAAc,MAClD,KAAA,sBAAqCA,EAAc,QAE9D,KAAA,aAAA;AAAA,MACX,UAAU,EAAE,MAAM,MAAM,OAAO,CAAA,EAAG;AAAA,MAClC,OAAO,EAAE,MAAM,MAAM,OAAO,CAAA,EAAG;AAAA,MAC/B,QAAQ,EAAE,MAAM,MAAM,OAAO,CAAA,EAAG;AAAA,MAChC,WAAW,EAAE,MAAM,KAAK,OAAO,CAAA,EAAG;AAAA,MAClC,gBAAgB,EAAE,MAAM,KAAK,OAAO,CAAA,EAAG;AAAA,MACvC,cAAc,EAAE,MAAM,KAAK,OAAO,CAAA,EAAG;AAAA,MACrC,iBAAiB,EAAE,MAAM,KAAK,OAAO,CAAA,EAAG;AAAA,MACxC,eAAe,EAAE,MAAM,KAAK,OAAO,CAAA,EAAG;AAAA,MACtC,SAAS,EAAE,MAAM,MAAM,OAAO,CAAA,EAAG;AAAA,IAAA;AAO3B,UAAAmB,IAAO,KAAK,sBAAsBC,EAAoB,MAAM,GAAG,IAAIJ,EAAM,QAAQ,CAAC;AACxF,IAAAG,EAAI,YAAYE,GAChBF,EAAI,YAAYE,GACX,KAAA,WAAW,gBAAgBF,CAAG,GAEnC,KAAK,WAAWG,EAASlB,EAAW,UAAUhB,EAAS,MAAM,GAC7D,KAAK,OAAOkC,EAASlB,EAAW,MAAM,CAAG,GACzC,KAAK,UAAUkB,EAASlB,EAAW,SAAS,CAAG,GAC/C,KAAK,UAAUkB,EAASlB,EAAW,SAAS,EAAI,GAE3C,KAAA,YAAY,CAAC,CAACA,EAAW,WAE9B,KAAK,iBAAiBG,GAEtB,KAAK,uBAAuB,SAAS,CAAC,GAAG,GAAG,CAAC,GAC7C,KAAK,uBAAuB,iBAAiB,CAAC,GAAG,GAAG,CAAC,GACrD,KAAK,uBAAuB,UAAU,CAAC,GAAG,GAAG,GAAG,CAAC,GAEjD,KAAK,eAAe,IAIpB,KAAK,mBAAmB;AAAA,EAC1B;AAAA,EAEA,UAAgB;AACd,UAAM,QAAQ,GAEV,KAAK,oBACP,KAAK,gBAAgB,WACrB,KAAK,kBAAkB,SAGrB,KAAK,wBACP,KAAK,oBAAoB,WACzB,KAAK,sBAAsB,SAG7B,KAAK,+BAA+B,GAEhC,KAAK,0BACP,KAAK,sBAAsB,WAC3B,KAAK,wBAAwB,SAG3B,KAAK,aACP,KAAK,SAAS,WACd,KAAK,WAAW;AAAA,EAEpB;AAAA,EAEA,iCAAuC;AACrC,SAAK,0BAA0B;EACjC;AAAA,EAEA,qBAA2B;AACpB,SAAA,eAAe,KAAK,aAAagB,CAAU,GAC3C,KAAA,iBAAiB,KAAK,aAAaC,CAAU,GAE9C,KAAK,YAAY,KACnB,KAAK,WAAWC,GAChB,KAAK,cAAc,IACnB,KAAK,YAAY,IACjB,KAAK,aAAa,IAClB,KAAK,YAAYC,KACR,KAAK,UAAU,KAAO,CAAC,KAAK,WACrC,KAAK,WAAWC,GAChB,KAAK,cAAc,IACnB,KAAK,YAAY,IACjB,KAAK,aAAa,KAGhB,KAAK,aACP,KAAK,WAAWA,GAChB,KAAK,cAAc,IACnB,KAAK,YAAY,IACjB,KAAK,aAAa,IAClB,KAAK,YAAYD,IAGnB,KAAK,cAAc;AAAA,EACrB;AAAA,EAEA,aAAaE,GAA2B;AACtC,UAAMC,IAAkB,CAAA;AAExB,aAASC,EAAOC,GAA2B;AACzC,MAAIA,KACIF,EAAA,KAAK,WAAWE,GAAO;AAAA,IAEjC;AAEO,IAAAD,EAAA3C,EAAe,KAAK,QAAQ,CAAC,GAC7B2C,EAAAzC,EAAe,KAAK,aAAa,CAAC,GAClCyC,EAAArC,GAAW,KAAK,KAAK,CAAC,GACtBqC,EAAAnC,GAAW,KAAK,cAAc,CAAC,GAC/BmC,EAAAjC,GAAe,KAAK,QAAQ,CAAC,GAC7BiC,EAAAvC,EAAa,KAAK,gBAAgB,CAAC,GACnCuC,EAAA7B,GAAsB,KAAK,mBAAmB,CAAC,GAC/C6B,EAAA/B,GAAqB,KAAK,kBAAkB,CAAC,IAIlD,KAAK,aAAagB,KAClB,KAAK,kBAAkBF,KACvB,KAAK,gBAAgBC,MAErBgB,EAAO,mCAAmC,GAGxC,KAAK,qBACPA,EAAO,sBAAsB,GAG3B,KAAK,UACPA,EAAO,SAAS,GAGd,KAAK,YACPA,EAAO,iBAAiB,GAGtB,KAAK,eAAe,KACtBA,EAAO,cAAc,GAGnB,KAAK,kBACPA,EAAO,iBAAiB,GAG1BA,EAAO,oBAAoB,GAC3BA,EAAO,kBAAkB,GAErB,KAAK,aACPA,EAAQ,YAAY;AAKhB,UAAAE,IAAcJ,EAAU,MAAM,8BAA8B;AAClE,WAAII,MACIH,EAAA,QAAQG,EAAY,CAAC,CAAC,GAC5BJ,IAAYA,EAAU,QAAQI,EAAY,CAAC,GAAG,EAAE,IAElDH,EAAM,KAAKD,CAAS,GACbC,EAAM,KAAK;AAAA,CAAI;AAAA,EACxB;AAAA,EAEA,aAAaI,GAA6B;AACxC,QAAI,CAACA;AACH;AAGF,SAAK,YAAYA;AAEX,UAAAC,IACJ,KAAK,iBAAiBD,EAAU,WAAWA,EAAU,WAAW,KAAK,KAAK,iBAAiB;AAE7F,SAAK,eAAeA,EAAU,QACzB,KAAA,WAAW,gBAAgB,KAAK,YAAY,GAE7CC,KACF,KAAK,mBAAmB;AAGpB,UAAAC,IAAkB,KAAK,eAAe,IACtCC,IAAiB,IAAI,aAAaD,CAAe;AAEvD,aAASE,IAAI,GAAGA,IAAI,KAAK,cAAcA;AACrC,MAAAD,EAAe,IAAIH,EAAUI,CAAC,EAAE,QAAQ,UAAU,KAAKA,CAAC;AAG1D,aAASA,IAAI,GAAGA,IAAIF,GAAiBE;AACnC,MAAI,MAAMD,EAAeC,CAAC,CAAC,MACzBD,EAAeC,CAAC,IAAI;AAInB,SAAA,WAAW,aAAaD,CAAc;AAAA,EAC7C;AAAA,EAEA,IAAI,WAAsB;AACxB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,SAASL,GAAkB;AACzB,IAAA,KAAK,cAAcA,MACrB,KAAK,YAAYA,GACZ,KAAA,kBAAkBzB,EAAwB,KAAK,SAAS,GACxD,KAAA,WAAW,YAAY,KAAK,eAAe;AAAA,EAEpD;AAAA,EAEA,IAAI,iBAAkC;AACpC,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,eAAeyB,GAAwB;AACzC,UAAMO,IAAwB,CAAA;AAC9B,eAAWC,KAAO,OAAO,KAAKR,CAAK;AACjC,MAAAO,EAAKC,CAAG,IAAIR,EAAMQ,CAAG,EAAE,MAAM;AAG/B,QAAIC,IAAU;AACV,QAAA,KAAK,oBAAoB;AACjB,MAAAA,IAAA;AAAA,SACL;AACK,MAAAA,IAAA,OAAO,KAAKF,CAAI,EAAE,WAAW,OAAO,KAAK,KAAK,eAAe,EAAE;AAEzE,iBAAWC,KAAO,OAAO,KAAKD,CAAI;AAChC,QAAAE,IAAUA,KAAW,KAAK,gBAAgBD,CAAG,MAAM,QACzCC,IAAAA,KAAWF,EAAKC,CAAG,EAAE,OAAO,KAAK,gBAAgBA,CAAG,CAAC;AAAA;AAInE,IAAKC,MACH,KAAK,kBAAkBF,GACvB,KAAK,wBAAwB;AAAA,EAEjC;AAAA,EAEQ,0BAAgC;AACjC,SAAA,wBAAwB9B,EAA8B,KAAK,eAAe,GAC1E,KAAA,WAAW,qBAAqB,KAAK,qBAAqB;AAAA,EACjE;AAAA,EAEA,IAAI,iBAAmC;AACrC,WAAO,CAAC,KAAK,WAAW,KAAK,SAAS;AAAA,EACxC;AAAA,EAEA,IAAI,eAAeuB,GAAyB;AACrC,SAAA,YAAYA,EAAM,CAAC,GACnB,KAAA,YAAYA,EAAM,CAAC;AAAA,EAC1B;AAAA,EAEA,WACEU,GACyC;AACzC,WAAO,KAAK,aAAa,SAAa,SAAoB,KAAK,SAASA,CAAI,EAAE;AAAA,EAChF;AAAA,EAEA,WACEA,GACAV,GACM;AACF,QAAA,KAAK,aAAa;AACpB;AAGI,UAAAW,IAAO,KAAK,SAASD,CAAI;AAE3B,IAAAC,EAAK,SAAS,MACfA,EAAK,MAAgB,KAAKX,CAAc,IAChCA,MAAUW,EAAK,UACxBA,EAAK,QAAQX;AAAA,EAEjB;AAAA,EAEA,eACEY,GACAC,GACAC,GACAC,GACM;AACA,UAAAC,IAAaD,EAAS;AAExB,IAAAD,EAAO,SAASG,IAClB,KAAK,MAAOH,EAA6B,OAAO,KAAK,KAAK,OAErD,KAAA,MAAM,KAAK,KAAK;AAEjB,UAAAI,IAAeH,EAAS;AAC1B,IAAAG,MAAiB,QAAQA,aAAwBC,KACnD,KAAK,cAAcD,EAAa,OAChC,KAAK,eAAeA,EAAa,WAE5B,KAAA,cAAcH,EAAS,WAAW,cAAcC,GAChD,KAAA,eAAeD,EAAS,WAAW,eAAeC;AAGnD,UAAAI,IAAW,KAAK,IAAIR,EAAO,MAAM,GAAGA,EAAO,MAAM,GAAGA,EAAO,MAAM,CAAC;AACnE,SAAA,UAAUA,EAAO,YAAY,UAAUQ,GAC5C,KAAK,aAAaR,EAAO,YAAY,YAAY,QAAQzC,EAAmB,UAAU,EAAE,IAGtF,KAAK,kBAAkBZ,EAAc,YACrC,KAAK,mBAAmBM,EAAe,QAEvC,KAAK,4BAA4BgD,CAAY;AAAA,EAEjD;AAAA,EAEQ,4BAA4BQ,GAA+B;AACjE,IAAAA,EAAM,KAAKC,CAAe;AAE1B,UAAMC,IAAO,IAAI,WAAWF,EAAM,SAAS,CAAC,GACtCG,IAAiB,IAAI,MAAMH,EAAM,MAAM,EAAE,KAAK,KAAQ;AAE5D,SAAK,0BAA0B;AAE/B,aAASf,IAAI,GAAGA,IAAIe,EAAM,QAAQf,KAAK;AAC/B,YAAAmB,IAAOJ,EAAMf,CAAC;AAIpB,UAFA,KAAK,0BAA0B,IAAImB,EAAK,MAAMnB,CAAC,GAE3CA,IAAI,GAAG;AACT,cAAMoB,IAAaD,EAAK,KAAK,MAAM,GAAG,EAAE,GAClCE,IAAe,KAAK,0BAA0B,IAAID,CAAU,GAC5DE,IAAsBtB,IAAIqB;AAEhC,QAAAH,EAAeG,CAAY,IAAI,KAAK,IAAIH,EAAeG,CAAY,GAAGC,CAAmB;AAGzF,cAAMC,IAASF,IAAe;AAC9B,QAAAJ,EAAKM,CAAM,IAAIN,EAAKM,CAAM,IAAK,KAAKJ,EAAK,OACzCF,EAAKM,IAAS,CAAC,IAAIL,EAAeG,CAAY,KAAK,GACnDJ,EAAKM,IAAS,CAAC,IAAIL,EAAeG,CAAY,IAAI;AAAA;AAIpD,MAAAJ,EAAKjB,IAAI,IAAI,CAAC,IAAImB,EAAK,KAAK;AAAA;AAG9B,UAAMK,IAAU,KAAK;AACrB,IAAIA,MACMA,EAAA,MAAM,KAAK,IAAIP,CAAI,GAC3BO,EAAQ,cAAc;AAAA,EAE1B;AAAA,EAEA,OAAO,mBACLlB,GACAa,GACAM,GACA;AACA,WAAO,CACLC,GACAC,GACAC,GACAC,GACAC,MACG;AACH,YAAMC,IAAqBD,GACrBE,IAAmBD,EAAmB;AAE3B,MAAAC,EAAA,MAAM,QAAQb,EAAK,OACnBa,EAAA,WAAW,QAAQb,EAAK;AAEzC,YAAMc,IAAUF,EAAmB,0BAA0B,IAAIZ,EAAK,IAAI;AAC1E,MAAIc,MAAY,WACdD,EAAiB,QAAQ,QAAQC,IAGlBD,EAAA,QAAQ,QACvBP,MAAY,SAAYA,IAAUnB,EAAO,aAAa,QAAQa,CAAI,GAOnEW,EAAoC,qBAAqB;AAAA,IAAA;AAAA,EAE9D;AACF;AAnfO,IAAMI,IAANrE;AAAMqE,EACI,aAAa,IAAItD;AAoEbuD,EAAA;AAAA,EAAlBC,EAAQ,QAAQ;AAAA,GArENF,EAqEQ,WAAA,UAAA,CAAA;AACEC,EAAA;AAAA,EAApBC,EAAQ,UAAU;AAAA,GAtERF,EAsEU,WAAA,YAAA,CAAA;AACLC,EAAA;AAAA,EAAfC,EAAQ,KAAK;AAAA,GAvEHF,EAuEK,WAAA,OAAA,CAAA;AACMC,EAAA;AAAA,EAArBC,EAAQ,WAAW;AAAA,GAxETF,EAwEW,WAAA,aAAA,CAAA;AACAC,EAAA;AAAA,EAArBC,EAAQ,WAAW;AAAA,GAzETF,EAyEW,WAAA,aAAA,CAAA;AACUC,EAAA;AAAA,EAA/BC,EAAQ,qBAAqB;AAAA,GA1EnBF,EA0EqB,WAAA,uBAAA,CAAA;AACFC,EAAA;AAAA,EAA7BC,EAAQ,mBAAmB;AAAA,GA3EjBF,EA2EmB,WAAA,qBAAA,CAAA;AACHC,EAAA;AAAA,EAA1BC,EAAQ,gBAAgB;AAAA,GA5EdF,EA4EgB,WAAA,kBAAA,CAAA;AACAC,EAAA;AAAA,EAA1BC,EAAQ,gBAAgB;AAAA,GA7EdF,EA6EgB,WAAA,kBAAA,CAAA;AACPC,EAAA;AAAA,EAAnBC,EAAQ,SAAS;AAAA,GA9EPF,EA8ES,WAAA,WAAA,CAAA;AACAC,EAAA;AAAA,EAAnBC,EAAQ,SAAS;AAAA,GA/EPF,EA+ES,WAAA,WAAA,CAAA;AACGC,EAAA;AAAA,EAAtBC,EAAQ,YAAY;AAAA,GAhFVF,EAgFY,WAAA,cAAA,CAAA;AACGC,EAAA;AAAA,EAAzBC,EAAQ,WAAW,EAAI;AAAA,GAjFbF,EAiFe,WAAA,WAAA,CAAA;AACMC,EAAA;AAAA,EAA/BC,EAAQ,iBAAiB,EAAI;AAAA,GAlFnBF,EAkFqB,WAAA,iBAAA,CAAA;AACFC,EAAA;AAAA,EAA7BC,EAAQ,eAAe,EAAI;AAAA,GAnFjBF,EAmFmB,WAAA,eAAA,CAAA;AACHC,EAAA;AAAA,EAA1BC,EAAQ,YAAY,EAAI;AAAA,GApFdF,EAoFgB,WAAA,YAAA,CAAA;AACFC,EAAA;AAAA,EAAxBC,EAAQ,cAAc;AAAA,GArFZF,EAqFc,WAAA,gBAAA,CAAA;AACDC,EAAA;AAAA,EAAvBC,EAAQ,aAAa;AAAA,GAtFXF,EAsFa,WAAA,eAAA,CAAA;AACPC,EAAA;AAAA,EAAhBC,EAAQ,MAAM;AAAA,GAvFJF,EAuFM,WAAA,QAAA,CAAA;AACGC,EAAA;AAAA,EAAnBC,EAAQ,SAAS;AAAA,GAxFPF,EAwFS,WAAA,WAAA,CAAA;AACGC,EAAA;AAAA,EAAtBC,EAAQ,YAAY;AAAA,GAzFVF,EAyFY,WAAA,cAAA,CAAA;AACJC,EAAA;AAAA,EAAlBC,EAAQ,QAAQ;AAAA,GA1FNF,EA0FQ,WAAA,SAAA,CAAA;AACSC,EAAA;AAAA,EAA3BC,EAAQ,iBAAiB;AAAA,GA3FfF,EA2FiB,WAAA,wBAAA,CAAA;AACLC,EAAA;AAAA,EAAtBC,EAAQ,YAAY;AAAA,GA5FVF,EA4FY,WAAA,mBAAA,CAAA;AACAC,EAAA;AAAA,EAAtBC,EAAQ,YAAY;AAAA,GA7FVF,EA6FY,WAAA,mBAAA,CAAA;AACGC,EAAA;AAAA,EAAzBC,EAAQ,eAAe;AAAA,GA9FbF,EA8Fe,WAAA,sBAAA,CAAA;AACTC,EAAA;AAAA,EAAhBC,EAAQ,MAAM;AAAA,GA/FJF,EA+FM,WAAA,aAAA,CAAA;AACKC,EAAA;AAAA,EAArBC,EAAQ,WAAW;AAAA,GAhGTF,EAgGW,WAAA,kBAAA,CAAA;AACSC,EAAA;AAAA,EAA9BC,EAAQ,oBAAoB;AAAA,GAjGlBF,EAiGoB,WAAA,sBAAA,CAAA;AACKC,EAAA;AAAA,EAAnCC,EAAQ,yBAAyB;AAAA,GAlGvBF,EAkGyB,WAAA,2BAAA,CAAA;AACGC,EAAA;AAAA,EAAtCC,EAAQ,4BAA4B;AAAA,GAnG1BF,EAmG4B,WAAA,8BAAA,CAAA;AACLC,EAAA;AAAA,EAAjCC,EAAQ,uBAAuB;AAAA,GApGrBF,EAoGuB,WAAA,yBAAA,CAAA;AACEC,EAAA;AAAA,EAAnCC,EAAQ,yBAAyB;AAAA,GArGvBF,EAqGyB,WAAA,2BAAA,CAAA;AACFC,EAAA;AAAA,EAAjCC,EAAQ,uBAAuB;AAAA,GAtGrBF,EAsGuB,WAAA,yBAAA,CAAA;AAGVC,EAAA;AAAA,EAAvBE,EAAqB;AAAA,GAzGXH,EAyGa,WAAA,cAAA,CAAA;AACAC,EAAA;AAAA,EAAvBE,EAAqB;AAAA,GA1GXH,EA0Ga,WAAA,YAAA,CAAA;AACAC,EAAA;AAAA,EAAvBE,EAAqB;AAAA,GA3GXH,EA2Ga,WAAA,kBAAA,CAAA;AACAC,EAAA;AAAA,EAAvBE,EAAqB;AAAA,GA5GXH,EA4Ga,WAAA,iBAAA,CAAA;AACAC,EAAA;AAAA,EAAvBE,EAAqB;AAAA,GA7GXH,EA6Ga,WAAA,YAAA,CAAA;AACAC,EAAA;AAAA,EAAvBE,EAAqB;AAAA,GA9GXH,EA8Ga,WAAA,UAAA,CAAA;AACAC,EAAA;AAAA,EAAvBE,EAAqB;AAAA,GA/GXH,EA+Ga,WAAA,SAAA,CAAA;AACAC,EAAA;AAAA,EAAvBE,EAAqB;AAAA,GAhHXH,EAgHa,WAAA,YAAA,CAAA;AACAC,EAAA;AAAA,EAAvBE,EAAqB;AAAA,GAjHXH,EAiHa,WAAA,oBAAA,CAAA;AACAC,EAAA;AAAA,EAAvBE,EAAqB;AAAA,GAlHXH,EAkHa,WAAA,qBAAA,CAAA;AACAC,EAAA;AAAA,EAAvBE,EAAqB;AAAA,GAnHXH,EAmHa,WAAA,kBAAA,CAAA;AACAC,EAAA;AAAA,EAAvBE,EAAqB;AAAA,GApHXH,EAoHa,WAAA,sBAAA,CAAA;AACAC,EAAA;AAAA,EAAvBE,EAAqB;AAAA,GArHXH,EAqHa,WAAA,uBAAA,CAAA;AAgY1B,SAAS9D,EAAekE,GAAc5C,GAAuB;AACpD,SAAA,EAAE,MAAA4C,GAAM,OAAA5C;AACjB;AAEA,SAAST,EAAYsD,GAAkBC,GAAS;AACvC,SAAAD,MAAM,SAAYC,IAAID;AAC/B;AAGA,SAASH,EACPK,GACAC,IAA4B,IACT;AACZ,SAAA,CAACC,GAAgBC,MAAuC;AACtD,WAAA,eAAeD,GAAQC,GAAa;AAAA,MACzC,MAAM;AACG,eAAA,KAAK,WAAWH,CAAW;AAAA,MACpC;AAAA,MACA,IAAI/C,GAAY;AACd,QAAIA,MAAU,KAAK,WAAW+C,CAAW,MAClC,KAAA,WAAWA,GAAa/C,CAAK,GAC9BgD,KACF,KAAK,mBAAmB;AAAA,MAG9B;AAAA,IAAA,CACD;AAAA,EAAA;AAEL;AAEA,SAASL,IAAuB;AACvB,SAAA,CAACM,GAAgBC,MAAuC;AACvD,UAAAC,IAAY,IAAID,EAAY,SAAS;AAEpC,WAAA,eAAeD,GAAQC,GAAa;AAAA,MACzC,MAAM;AACJ,eAAO,KAAKC,CAAS;AAAA,MACvB;AAAA,MACA,IAAInD,GAAY;AACV,QAAAA,MAAU,KAAKmD,CAAS,MAC1B,KAAKA,CAAS,IAAInD,GAClB,KAAK,mBAAmB;AAAA,MAE5B;AAAA,IAAA,CACD;AAAA,EAAA;AAEL;"}