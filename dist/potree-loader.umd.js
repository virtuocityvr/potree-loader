(function(mt,zt){typeof exports=="object"&&typeof module<"u"?zt(exports):typeof define=="function"&&define.amd?define(["exports"],zt):(mt=typeof globalThis<"u"?globalThis:mt||self,zt(mt["potree-loader"]={}))})(this,function(mt){"use strict";/**
 * @license
 * Copyright 2010-2023 Three.js Authors
 * SPDX-License-Identifier: MIT
 */const zt="149",bt="srgb",Fl="srgb-linear";class xt{addEventListener(t,l){this._listeners===void 0&&(this._listeners={});const i=this._listeners;i[t]===void 0&&(i[t]=[]),i[t].indexOf(l)===-1&&i[t].push(l)}hasEventListener(t,l){if(this._listeners===void 0)return!1;const i=this._listeners;return i[t]!==void 0&&i[t].indexOf(l)!==-1}removeEventListener(t,l){if(this._listeners===void 0)return;const e=this._listeners[t];if(e!==void 0){const n=e.indexOf(l);n!==-1&&e.splice(n,1)}}dispatchEvent(t){if(this._listeners===void 0)return;const i=this._listeners[t.type];if(i!==void 0){t.target=this;const e=i.slice(0);for(let n=0,c=e.length;n<c;n++)e[n].call(this,t);t.target=null}}}const S=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"];function jt(){const s=Math.random()*4294967295|0,t=Math.random()*4294967295|0,l=Math.random()*4294967295|0,i=Math.random()*4294967295|0;return(S[s&255]+S[s>>8&255]+S[s>>16&255]+S[s>>24&255]+"-"+S[t&255]+S[t>>8&255]+"-"+S[t>>16&15|64]+S[t>>24&255]+"-"+S[l&63|128]+S[l>>8&255]+"-"+S[l>>16&255]+S[l>>24&255]+S[i&255]+S[i>>8&255]+S[i>>16&255]+S[i>>24&255]).toLowerCase()}function _(s,t,l){return Math.max(t,Math.min(l,s))}function Ei(s,t){return(s%t+t)%t}function Jl(s,t,l){return(1-l)*s+l*t}function ll(s,t){switch(t.constructor){case Float32Array:return s;case Uint16Array:return s/65535;case Uint8Array:return s/255;case Int16Array:return Math.max(s/32767,-1);case Int8Array:return Math.max(s/127,-1);default:throw new Error("Invalid component type.")}}function q(s,t){switch(t.constructor){case Float32Array:return s;case Uint16Array:return Math.round(s*65535);case Uint8Array:return Math.round(s*255);case Int16Array:return Math.round(s*32767);case Int8Array:return Math.round(s*127);default:throw new Error("Invalid component type.")}}class ht{constructor(t=0,l=0){ht.prototype.isVector2=!0,this.x=t,this.y=l}get width(){return this.x}set width(t){this.x=t}get height(){return this.y}set height(t){this.y=t}set(t,l){return this.x=t,this.y=l,this}setScalar(t){return this.x=t,this.y=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setComponent(t,l){switch(t){case 0:this.x=l;break;case 1:this.y=l;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y)}copy(t){return this.x=t.x,this.y=t.y,this}add(t){return this.x+=t.x,this.y+=t.y,this}addScalar(t){return this.x+=t,this.y+=t,this}addVectors(t,l){return this.x=t.x+l.x,this.y=t.y+l.y,this}addScaledVector(t,l){return this.x+=t.x*l,this.y+=t.y*l,this}sub(t){return this.x-=t.x,this.y-=t.y,this}subScalar(t){return this.x-=t,this.y-=t,this}subVectors(t,l){return this.x=t.x-l.x,this.y=t.y-l.y,this}multiply(t){return this.x*=t.x,this.y*=t.y,this}multiplyScalar(t){return this.x*=t,this.y*=t,this}divide(t){return this.x/=t.x,this.y/=t.y,this}divideScalar(t){return this.multiplyScalar(1/t)}applyMatrix3(t){const l=this.x,i=this.y,e=t.elements;return this.x=e[0]*l+e[3]*i+e[6],this.y=e[1]*l+e[4]*i+e[7],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this}clamp(t,l){return this.x=Math.max(t.x,Math.min(l.x,this.x)),this.y=Math.max(t.y,Math.min(l.y,this.y)),this}clampScalar(t,l){return this.x=Math.max(t,Math.min(l,this.x)),this.y=Math.max(t,Math.min(l,this.y)),this}clampLength(t,l){const i=this.length();return this.divideScalar(i||1).multiplyScalar(Math.max(t,Math.min(l,i)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const l=this.x-t.x,i=this.y-t.y;return l*l+i*i}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,l){return this.x+=(t.x-this.x)*l,this.y+=(t.y-this.y)*l,this}lerpVectors(t,l,i){return this.x=t.x+(l.x-t.x)*i,this.y=t.y+(l.y-t.y)*i,this}equals(t){return t.x===this.x&&t.y===this.y}fromArray(t,l=0){return this.x=t[l],this.y=t[l+1],this}toArray(t=[],l=0){return t[l]=this.x,t[l+1]=this.y,t}fromBufferAttribute(t,l){return this.x=t.getX(l),this.y=t.getY(l),this}rotateAround(t,l){const i=Math.cos(l),e=Math.sin(l),n=this.x-t.x,c=this.y-t.y;return this.x=n*i-c*e+t.x,this.y=n*e+c*i+t.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}class Nt{constructor(){Nt.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1]}set(t,l,i,e,n,c,Z,h,a){const d=this.elements;return d[0]=t,d[1]=e,d[2]=Z,d[3]=l,d[4]=n,d[5]=h,d[6]=i,d[7]=c,d[8]=a,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(t){const l=this.elements,i=t.elements;return l[0]=i[0],l[1]=i[1],l[2]=i[2],l[3]=i[3],l[4]=i[4],l[5]=i[5],l[6]=i[6],l[7]=i[7],l[8]=i[8],this}extractBasis(t,l,i){return t.setFromMatrix3Column(this,0),l.setFromMatrix3Column(this,1),i.setFromMatrix3Column(this,2),this}setFromMatrix4(t){const l=t.elements;return this.set(l[0],l[4],l[8],l[1],l[5],l[9],l[2],l[6],l[10]),this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,l){const i=t.elements,e=l.elements,n=this.elements,c=i[0],Z=i[3],h=i[6],a=i[1],d=i[4],m=i[7],b=i[2],o=i[5],r=i[8],G=e[0],u=e[3],Y=e[6],X=e[1],g=e[4],y=e[7],F=e[2],J=e[5],R=e[8];return n[0]=c*G+Z*X+h*F,n[3]=c*u+Z*g+h*J,n[6]=c*Y+Z*y+h*R,n[1]=a*G+d*X+m*F,n[4]=a*u+d*g+m*J,n[7]=a*Y+d*y+m*R,n[2]=b*G+o*X+r*F,n[5]=b*u+o*g+r*J,n[8]=b*Y+o*y+r*R,this}multiplyScalar(t){const l=this.elements;return l[0]*=t,l[3]*=t,l[6]*=t,l[1]*=t,l[4]*=t,l[7]*=t,l[2]*=t,l[5]*=t,l[8]*=t,this}determinant(){const t=this.elements,l=t[0],i=t[1],e=t[2],n=t[3],c=t[4],Z=t[5],h=t[6],a=t[7],d=t[8];return l*c*d-l*Z*a-i*n*d+i*Z*h+e*n*a-e*c*h}invert(){const t=this.elements,l=t[0],i=t[1],e=t[2],n=t[3],c=t[4],Z=t[5],h=t[6],a=t[7],d=t[8],m=d*c-Z*a,b=Z*h-d*n,o=a*n-c*h,r=l*m+i*b+e*o;if(r===0)return this.set(0,0,0,0,0,0,0,0,0);const G=1/r;return t[0]=m*G,t[1]=(e*a-d*i)*G,t[2]=(Z*i-e*c)*G,t[3]=b*G,t[4]=(d*l-e*h)*G,t[5]=(e*n-Z*l)*G,t[6]=o*G,t[7]=(i*h-a*l)*G,t[8]=(c*l-i*n)*G,this}transpose(){let t;const l=this.elements;return t=l[1],l[1]=l[3],l[3]=t,t=l[2],l[2]=l[6],l[6]=t,t=l[5],l[5]=l[7],l[7]=t,this}getNormalMatrix(t){return this.setFromMatrix4(t).invert().transpose()}transposeIntoArray(t){const l=this.elements;return t[0]=l[0],t[1]=l[3],t[2]=l[6],t[3]=l[1],t[4]=l[4],t[5]=l[7],t[6]=l[2],t[7]=l[5],t[8]=l[8],this}setUvTransform(t,l,i,e,n,c,Z){const h=Math.cos(n),a=Math.sin(n);return this.set(i*h,i*a,-i*(h*c+a*Z)+c+t,-e*a,e*h,-e*(-a*c+h*Z)+Z+l,0,0,1),this}scale(t,l){return this.premultiply(Bl.makeScale(t,l)),this}rotate(t){return this.premultiply(Bl.makeRotation(-t)),this}translate(t,l){return this.premultiply(Bl.makeTranslation(t,l)),this}makeTranslation(t,l){return this.set(1,0,t,0,1,l,0,0,1),this}makeRotation(t){const l=Math.cos(t),i=Math.sin(t);return this.set(l,-i,0,i,l,0,0,0,1),this}makeScale(t,l){return this.set(t,0,0,0,l,0,0,0,1),this}equals(t){const l=this.elements,i=t.elements;for(let e=0;e<9;e++)if(l[e]!==i[e])return!1;return!0}fromArray(t,l=0){for(let i=0;i<9;i++)this.elements[i]=t[i+l];return this}toArray(t=[],l=0){const i=this.elements;return t[l]=i[0],t[l+1]=i[1],t[l+2]=i[2],t[l+3]=i[3],t[l+4]=i[4],t[l+5]=i[5],t[l+6]=i[6],t[l+7]=i[7],t[l+8]=i[8],t}clone(){return new this.constructor().fromArray(this.elements)}}const Bl=new Nt;function Oi(s){for(let t=s.length-1;t>=0;--t)if(s[t]>=65535)return!0;return!1}function ti(s){return document.createElementNS("http://www.w3.org/1999/xhtml",s)}function Ft(s){return s<.04045?s*.0773993808:Math.pow(s*.9478672986+.0521327014,2.4)}function il(s){return s<.0031308?s*12.92:1.055*Math.pow(s,.41666)-.055}const Il={[bt]:{[Fl]:Ft},[Fl]:{[bt]:il}},L={legacyMode:!0,get workingColorSpace(){return Fl},set workingColorSpace(s){console.warn("THREE.ColorManagement: .workingColorSpace is readonly.")},convert:function(s,t,l){if(this.legacyMode||t===l||!t||!l)return s;if(Il[t]&&Il[t][l]!==void 0){const i=Il[t][l];return s.r=i(s.r),s.g=i(s.g),s.b=i(s.b),s}throw new Error("Unsupported color space conversion.")},fromWorkingColorSpace:function(s,t){return this.convert(s,this.workingColorSpace,t)},toWorkingColorSpace:function(s,t){return this.convert(s,t,this.workingColorSpace)}},li={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},v={r:0,g:0,b:0},ct={h:0,s:0,l:0},el={h:0,s:0,l:0};function Cl(s,t,l){return l<0&&(l+=1),l>1&&(l-=1),l<1/6?s+(t-s)*6*l:l<1/2?t:l<2/3?s+(t-s)*6*(2/3-l):s}function nl(s,t){return t.r=s.r,t.g=s.g,t.b=s.b,t}class V{constructor(t,l,i){return this.isColor=!0,this.r=1,this.g=1,this.b=1,l===void 0&&i===void 0?this.set(t):this.setRGB(t,l,i)}set(t){return t&&t.isColor?this.copy(t):typeof t=="number"?this.setHex(t):typeof t=="string"&&this.setStyle(t),this}setScalar(t){return this.r=t,this.g=t,this.b=t,this}setHex(t,l=bt){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(t&255)/255,L.toWorkingColorSpace(this,l),this}setRGB(t,l,i,e=L.workingColorSpace){return this.r=t,this.g=l,this.b=i,L.toWorkingColorSpace(this,e),this}setHSL(t,l,i,e=L.workingColorSpace){if(t=Ei(t,1),l=_(l,0,1),i=_(i,0,1),l===0)this.r=this.g=this.b=i;else{const n=i<=.5?i*(1+l):i+l-i*l,c=2*i-n;this.r=Cl(c,n,t+1/3),this.g=Cl(c,n,t),this.b=Cl(c,n,t-1/3)}return L.toWorkingColorSpace(this,e),this}setStyle(t,l=bt){function i(n){n!==void 0&&parseFloat(n)<1&&console.warn("THREE.Color: Alpha component of "+t+" will be ignored.")}let e;if(e=/^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(t)){let n;const c=e[1],Z=e[2];switch(c){case"rgb":case"rgba":if(n=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(Z))return this.r=Math.min(255,parseInt(n[1],10))/255,this.g=Math.min(255,parseInt(n[2],10))/255,this.b=Math.min(255,parseInt(n[3],10))/255,L.toWorkingColorSpace(this,l),i(n[4]),this;if(n=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(Z))return this.r=Math.min(100,parseInt(n[1],10))/100,this.g=Math.min(100,parseInt(n[2],10))/100,this.b=Math.min(100,parseInt(n[3],10))/100,L.toWorkingColorSpace(this,l),i(n[4]),this;break;case"hsl":case"hsla":if(n=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(Z)){const h=parseFloat(n[1])/360,a=parseFloat(n[2])/100,d=parseFloat(n[3])/100;return i(n[4]),this.setHSL(h,a,d,l)}break}}else if(e=/^\#([A-Fa-f\d]+)$/.exec(t)){const n=e[1],c=n.length;if(c===3)return this.r=parseInt(n.charAt(0)+n.charAt(0),16)/255,this.g=parseInt(n.charAt(1)+n.charAt(1),16)/255,this.b=parseInt(n.charAt(2)+n.charAt(2),16)/255,L.toWorkingColorSpace(this,l),this;if(c===6)return this.r=parseInt(n.charAt(0)+n.charAt(1),16)/255,this.g=parseInt(n.charAt(2)+n.charAt(3),16)/255,this.b=parseInt(n.charAt(4)+n.charAt(5),16)/255,L.toWorkingColorSpace(this,l),this}return t&&t.length>0?this.setColorName(t,l):this}setColorName(t,l=bt){const i=li[t.toLowerCase()];return i!==void 0?this.setHex(i,l):console.warn("THREE.Color: Unknown color "+t),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(t){return this.r=t.r,this.g=t.g,this.b=t.b,this}copySRGBToLinear(t){return this.r=Ft(t.r),this.g=Ft(t.g),this.b=Ft(t.b),this}copyLinearToSRGB(t){return this.r=il(t.r),this.g=il(t.g),this.b=il(t.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(t=bt){return L.fromWorkingColorSpace(nl(this,v),t),_(v.r*255,0,255)<<16^_(v.g*255,0,255)<<8^_(v.b*255,0,255)<<0}getHexString(t=bt){return("000000"+this.getHex(t).toString(16)).slice(-6)}getHSL(t,l=L.workingColorSpace){L.fromWorkingColorSpace(nl(this,v),l);const i=v.r,e=v.g,n=v.b,c=Math.max(i,e,n),Z=Math.min(i,e,n);let h,a;const d=(Z+c)/2;if(Z===c)h=0,a=0;else{const m=c-Z;switch(a=d<=.5?m/(c+Z):m/(2-c-Z),c){case i:h=(e-n)/m+(e<n?6:0);break;case e:h=(n-i)/m+2;break;case n:h=(i-e)/m+4;break}h/=6}return t.h=h,t.s=a,t.l=d,t}getRGB(t,l=L.workingColorSpace){return L.fromWorkingColorSpace(nl(this,v),l),t.r=v.r,t.g=v.g,t.b=v.b,t}getStyle(t=bt){return L.fromWorkingColorSpace(nl(this,v),t),t!==bt?`color(${t} ${v.r} ${v.g} ${v.b})`:`rgb(${v.r*255|0},${v.g*255|0},${v.b*255|0})`}offsetHSL(t,l,i){return this.getHSL(ct),ct.h+=t,ct.s+=l,ct.l+=i,this.setHSL(ct.h,ct.s,ct.l),this}add(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this}addColors(t,l){return this.r=t.r+l.r,this.g=t.g+l.g,this.b=t.b+l.b,this}addScalar(t){return this.r+=t,this.g+=t,this.b+=t,this}sub(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this}multiply(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this}multiplyScalar(t){return this.r*=t,this.g*=t,this.b*=t,this}lerp(t,l){return this.r+=(t.r-this.r)*l,this.g+=(t.g-this.g)*l,this.b+=(t.b-this.b)*l,this}lerpColors(t,l,i){return this.r=t.r+(l.r-t.r)*i,this.g=t.g+(l.g-t.g)*i,this.b=t.b+(l.b-t.b)*i,this}lerpHSL(t,l){this.getHSL(ct),t.getHSL(el);const i=Jl(ct.h,el.h,l),e=Jl(ct.s,el.s,l),n=Jl(ct.l,el.l,l);return this.setHSL(i,e,n),this}equals(t){return t.r===this.r&&t.g===this.g&&t.b===this.b}fromArray(t,l=0){return this.r=t[l],this.g=t[l+1],this.b=t[l+2],this}toArray(t=[],l=0){return t[l]=this.r,t[l+1]=this.g,t[l+2]=this.b,t}fromBufferAttribute(t,l){return this.r=t.getX(l),this.g=t.getY(l),this.b=t.getZ(l),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}V.NAMES=li;let wt;class Ki{static getDataURL(t){if(/^data:/i.test(t.src)||typeof HTMLCanvasElement>"u")return t.src;let l;if(t instanceof HTMLCanvasElement)l=t;else{wt===void 0&&(wt=ti("canvas")),wt.width=t.width,wt.height=t.height;const i=wt.getContext("2d");t instanceof ImageData?i.putImageData(t,0,0):i.drawImage(t,0,0,t.width,t.height),l=wt}return l.width>2048||l.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",t),l.toDataURL("image/jpeg",.6)):l.toDataURL("image/png")}static sRGBToLinear(t){if(typeof HTMLImageElement<"u"&&t instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&t instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&t instanceof ImageBitmap){const l=ti("canvas");l.width=t.width,l.height=t.height;const i=l.getContext("2d");i.drawImage(t,0,0,t.width,t.height);const e=i.getImageData(0,0,t.width,t.height),n=e.data;for(let c=0;c<n.length;c++)n[c]=Ft(n[c]/255)*255;return i.putImageData(e,0,0),l}else if(t.data){const l=t.data.slice(0);for(let i=0;i<l.length;i++)l instanceof Uint8Array||l instanceof Uint8ClampedArray?l[i]=Math.floor(Ft(l[i]/255)*255):l[i]=Ft(l[i]);return{data:l,width:t.width,height:t.height}}else return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),t}}class ii{constructor(t=null){this.isSource=!0,this.uuid=jt(),this.data=t,this.version=0}set needsUpdate(t){t===!0&&this.version++}toJSON(t){const l=t===void 0||typeof t=="string";if(!l&&t.images[this.uuid]!==void 0)return t.images[this.uuid];const i={uuid:this.uuid,url:""},e=this.data;if(e!==null){let n;if(Array.isArray(e)){n=[];for(let c=0,Z=e.length;c<Z;c++)e[c].isDataTexture?n.push(zl(e[c].image)):n.push(zl(e[c]))}else n=zl(e);i.url=n}return l||(t.images[this.uuid]=i),i}}function zl(s){return typeof HTMLImageElement<"u"&&s instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&s instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&s instanceof ImageBitmap?Ki.getDataURL(s):s.data?{data:Array.from(s.data),width:s.width,height:s.height,type:s.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let _i=0;class $ extends xt{constructor(t=$.DEFAULT_IMAGE,l=$.DEFAULT_MAPPING,i=1001,e=1001,n=1006,c=1008,Z=1023,h=1009,a=$.DEFAULT_ANISOTROPY,d=3e3){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:_i++}),this.uuid=jt(),this.name="",this.source=new ii(t),this.mipmaps=[],this.mapping=l,this.wrapS=i,this.wrapT=e,this.magFilter=n,this.minFilter=c,this.anisotropy=a,this.format=Z,this.internalFormat=null,this.type=h,this.offset=new ht(0,0),this.repeat=new ht(1,1),this.center=new ht(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new Nt,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=d,this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1,this.needsPMREMUpdate=!1}get image(){return this.source.data}set image(t){this.source.data=t}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return new this.constructor().copy(this)}copy(t){return this.name=t.name,this.source=t.source,this.mipmaps=t.mipmaps.slice(0),this.mapping=t.mapping,this.wrapS=t.wrapS,this.wrapT=t.wrapT,this.magFilter=t.magFilter,this.minFilter=t.minFilter,this.anisotropy=t.anisotropy,this.format=t.format,this.internalFormat=t.internalFormat,this.type=t.type,this.offset.copy(t.offset),this.repeat.copy(t.repeat),this.center.copy(t.center),this.rotation=t.rotation,this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrix.copy(t.matrix),this.generateMipmaps=t.generateMipmaps,this.premultiplyAlpha=t.premultiplyAlpha,this.flipY=t.flipY,this.unpackAlignment=t.unpackAlignment,this.encoding=t.encoding,this.userData=JSON.parse(JSON.stringify(t.userData)),this.needsUpdate=!0,this}toJSON(t){const l=t===void 0||typeof t=="string";if(!l&&t.textures[this.uuid]!==void 0)return t.textures[this.uuid];const i={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(t).uuid,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(i.userData=this.userData),l||(t.textures[this.uuid]=i),i}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(t){if(this.mapping!==300)return t;if(t.applyMatrix3(this.matrix),t.x<0||t.x>1)switch(this.wrapS){case 1e3:t.x=t.x-Math.floor(t.x);break;case 1001:t.x=t.x<0?0:1;break;case 1002:Math.abs(Math.floor(t.x)%2)===1?t.x=Math.ceil(t.x)-t.x:t.x=t.x-Math.floor(t.x);break}if(t.y<0||t.y>1)switch(this.wrapT){case 1e3:t.y=t.y-Math.floor(t.y);break;case 1001:t.y=t.y<0?0:1;break;case 1002:Math.abs(Math.floor(t.y)%2)===1?t.y=Math.ceil(t.y)-t.y:t.y=t.y-Math.floor(t.y);break}return this.flipY&&(t.y=1-t.y),t}set needsUpdate(t){t===!0&&(this.version++,this.source.needsUpdate=!0)}}$.DEFAULT_IMAGE=null,$.DEFAULT_MAPPING=300,$.DEFAULT_ANISOTROPY=1;class H{constructor(t=0,l=0,i=0,e=1){H.prototype.isVector4=!0,this.x=t,this.y=l,this.z=i,this.w=e}get width(){return this.z}set width(t){this.z=t}get height(){return this.w}set height(t){this.w=t}set(t,l,i,e){return this.x=t,this.y=l,this.z=i,this.w=e,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this.w=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setW(t){return this.w=t,this}setComponent(t,l){switch(t){case 0:this.x=l;break;case 1:this.y=l;break;case 2:this.z=l;break;case 3:this.w=l;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w!==void 0?t.w:1,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this}addVectors(t,l){return this.x=t.x+l.x,this.y=t.y+l.y,this.z=t.z+l.z,this.w=t.w+l.w,this}addScaledVector(t,l){return this.x+=t.x*l,this.y+=t.y*l,this.z+=t.z*l,this.w+=t.w*l,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this}subVectors(t,l){return this.x=t.x-l.x,this.y=t.y-l.y,this.z=t.z-l.z,this.w=t.w-l.w,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this.w*=t.w,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this}applyMatrix4(t){const l=this.x,i=this.y,e=this.z,n=this.w,c=t.elements;return this.x=c[0]*l+c[4]*i+c[8]*e+c[12]*n,this.y=c[1]*l+c[5]*i+c[9]*e+c[13]*n,this.z=c[2]*l+c[6]*i+c[10]*e+c[14]*n,this.w=c[3]*l+c[7]*i+c[11]*e+c[15]*n,this}divideScalar(t){return this.multiplyScalar(1/t)}setAxisAngleFromQuaternion(t){this.w=2*Math.acos(t.w);const l=Math.sqrt(1-t.w*t.w);return l<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=t.x/l,this.y=t.y/l,this.z=t.z/l),this}setAxisAngleFromRotationMatrix(t){let l,i,e,n;const h=t.elements,a=h[0],d=h[4],m=h[8],b=h[1],o=h[5],r=h[9],G=h[2],u=h[6],Y=h[10];if(Math.abs(d-b)<.01&&Math.abs(m-G)<.01&&Math.abs(r-u)<.01){if(Math.abs(d+b)<.1&&Math.abs(m+G)<.1&&Math.abs(r+u)<.1&&Math.abs(a+o+Y-3)<.1)return this.set(1,0,0,0),this;l=Math.PI;const g=(a+1)/2,y=(o+1)/2,F=(Y+1)/2,J=(d+b)/4,R=(m+G)/4,Q=(r+u)/4;return g>y&&g>F?g<.01?(i=0,e=.707106781,n=.707106781):(i=Math.sqrt(g),e=J/i,n=R/i):y>F?y<.01?(i=.707106781,e=0,n=.707106781):(e=Math.sqrt(y),i=J/e,n=Q/e):F<.01?(i=.707106781,e=.707106781,n=0):(n=Math.sqrt(F),i=R/n,e=Q/n),this.set(i,e,n,l),this}let X=Math.sqrt((u-r)*(u-r)+(m-G)*(m-G)+(b-d)*(b-d));return Math.abs(X)<.001&&(X=1),this.x=(u-r)/X,this.y=(m-G)/X,this.z=(b-d)/X,this.w=Math.acos((a+o+Y-1)/2),this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this.w=Math.min(this.w,t.w),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this.w=Math.max(this.w,t.w),this}clamp(t,l){return this.x=Math.max(t.x,Math.min(l.x,this.x)),this.y=Math.max(t.y,Math.min(l.y,this.y)),this.z=Math.max(t.z,Math.min(l.z,this.z)),this.w=Math.max(t.w,Math.min(l.w,this.w)),this}clampScalar(t,l){return this.x=Math.max(t,Math.min(l,this.x)),this.y=Math.max(t,Math.min(l,this.y)),this.z=Math.max(t,Math.min(l,this.z)),this.w=Math.max(t,Math.min(l,this.w)),this}clampLength(t,l){const i=this.length();return this.divideScalar(i||1).multiplyScalar(Math.max(t,Math.min(l,i)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,l){return this.x+=(t.x-this.x)*l,this.y+=(t.y-this.y)*l,this.z+=(t.z-this.z)*l,this.w+=(t.w-this.w)*l,this}lerpVectors(t,l,i){return this.x=t.x+(l.x-t.x)*i,this.y=t.y+(l.y-t.y)*i,this.z=t.z+(l.z-t.z)*i,this.w=t.w+(l.w-t.w)*i,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w}fromArray(t,l=0){return this.x=t[l],this.y=t[l+1],this.z=t[l+2],this.w=t[l+3],this}toArray(t=[],l=0){return t[l]=this.x,t[l+1]=this.y,t[l+2]=this.z,t[l+3]=this.w,t}fromBufferAttribute(t,l){return this.x=t.getX(l),this.y=t.getY(l),this.z=t.getZ(l),this.w=t.getW(l),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}class ei extends xt{constructor(t=1,l=1,i={}){super(),this.isWebGLRenderTarget=!0,this.width=t,this.height=l,this.depth=1,this.scissor=new H(0,0,t,l),this.scissorTest=!1,this.viewport=new H(0,0,t,l);const e={width:t,height:l,depth:1};this.texture=new $(e,i.mapping,i.wrapS,i.wrapT,i.magFilter,i.minFilter,i.format,i.type,i.anisotropy,i.encoding),this.texture.isRenderTargetTexture=!0,this.texture.flipY=!1,this.texture.generateMipmaps=i.generateMipmaps!==void 0?i.generateMipmaps:!1,this.texture.internalFormat=i.internalFormat!==void 0?i.internalFormat:null,this.texture.minFilter=i.minFilter!==void 0?i.minFilter:1006,this.depthBuffer=i.depthBuffer!==void 0?i.depthBuffer:!0,this.stencilBuffer=i.stencilBuffer!==void 0?i.stencilBuffer:!1,this.depthTexture=i.depthTexture!==void 0?i.depthTexture:null,this.samples=i.samples!==void 0?i.samples:0}setSize(t,l,i=1){(this.width!==t||this.height!==l||this.depth!==i)&&(this.width=t,this.height=l,this.depth=i,this.texture.image.width=t,this.texture.image.height=l,this.texture.image.depth=i,this.dispose()),this.viewport.set(0,0,t,l),this.scissor.set(0,0,t,l)}clone(){return new this.constructor().copy(this)}copy(t){this.width=t.width,this.height=t.height,this.depth=t.depth,this.viewport.copy(t.viewport),this.texture=t.texture.clone(),this.texture.isRenderTargetTexture=!0;const l=Object.assign({},t.texture.image);return this.texture.source=new ii(l),this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,t.depthTexture!==null&&(this.depthTexture=t.depthTexture.clone()),this.samples=t.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}class Pt{constructor(t=0,l=0,i=0,e=1){this.isQuaternion=!0,this._x=t,this._y=l,this._z=i,this._w=e}static slerpFlat(t,l,i,e,n,c,Z){let h=i[e+0],a=i[e+1],d=i[e+2],m=i[e+3];const b=n[c+0],o=n[c+1],r=n[c+2],G=n[c+3];if(Z===0){t[l+0]=h,t[l+1]=a,t[l+2]=d,t[l+3]=m;return}if(Z===1){t[l+0]=b,t[l+1]=o,t[l+2]=r,t[l+3]=G;return}if(m!==G||h!==b||a!==o||d!==r){let u=1-Z;const Y=h*b+a*o+d*r+m*G,X=Y>=0?1:-1,g=1-Y*Y;if(g>Number.EPSILON){const F=Math.sqrt(g),J=Math.atan2(F,Y*X);u=Math.sin(u*J)/F,Z=Math.sin(Z*J)/F}const y=Z*X;if(h=h*u+b*y,a=a*u+o*y,d=d*u+r*y,m=m*u+G*y,u===1-Z){const F=1/Math.sqrt(h*h+a*a+d*d+m*m);h*=F,a*=F,d*=F,m*=F}}t[l]=h,t[l+1]=a,t[l+2]=d,t[l+3]=m}static multiplyQuaternionsFlat(t,l,i,e,n,c){const Z=i[e],h=i[e+1],a=i[e+2],d=i[e+3],m=n[c],b=n[c+1],o=n[c+2],r=n[c+3];return t[l]=Z*r+d*m+h*o-a*b,t[l+1]=h*r+d*b+a*m-Z*o,t[l+2]=a*r+d*o+Z*b-h*m,t[l+3]=d*r-Z*m-h*b-a*o,t}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get w(){return this._w}set w(t){this._w=t,this._onChangeCallback()}set(t,l,i,e){return this._x=t,this._y=l,this._z=i,this._w=e,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this._onChangeCallback(),this}setFromEuler(t,l){const i=t._x,e=t._y,n=t._z,c=t._order,Z=Math.cos,h=Math.sin,a=Z(i/2),d=Z(e/2),m=Z(n/2),b=h(i/2),o=h(e/2),r=h(n/2);switch(c){case"XYZ":this._x=b*d*m+a*o*r,this._y=a*o*m-b*d*r,this._z=a*d*r+b*o*m,this._w=a*d*m-b*o*r;break;case"YXZ":this._x=b*d*m+a*o*r,this._y=a*o*m-b*d*r,this._z=a*d*r-b*o*m,this._w=a*d*m+b*o*r;break;case"ZXY":this._x=b*d*m-a*o*r,this._y=a*o*m+b*d*r,this._z=a*d*r+b*o*m,this._w=a*d*m-b*o*r;break;case"ZYX":this._x=b*d*m-a*o*r,this._y=a*o*m+b*d*r,this._z=a*d*r-b*o*m,this._w=a*d*m+b*o*r;break;case"YZX":this._x=b*d*m+a*o*r,this._y=a*o*m+b*d*r,this._z=a*d*r-b*o*m,this._w=a*d*m-b*o*r;break;case"XZY":this._x=b*d*m-a*o*r,this._y=a*o*m-b*d*r,this._z=a*d*r+b*o*m,this._w=a*d*m+b*o*r;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+c)}return l!==!1&&this._onChangeCallback(),this}setFromAxisAngle(t,l){const i=l/2,e=Math.sin(i);return this._x=t.x*e,this._y=t.y*e,this._z=t.z*e,this._w=Math.cos(i),this._onChangeCallback(),this}setFromRotationMatrix(t){const l=t.elements,i=l[0],e=l[4],n=l[8],c=l[1],Z=l[5],h=l[9],a=l[2],d=l[6],m=l[10],b=i+Z+m;if(b>0){const o=.5/Math.sqrt(b+1);this._w=.25/o,this._x=(d-h)*o,this._y=(n-a)*o,this._z=(c-e)*o}else if(i>Z&&i>m){const o=2*Math.sqrt(1+i-Z-m);this._w=(d-h)/o,this._x=.25*o,this._y=(e+c)/o,this._z=(n+a)/o}else if(Z>m){const o=2*Math.sqrt(1+Z-i-m);this._w=(n-a)/o,this._x=(e+c)/o,this._y=.25*o,this._z=(h+d)/o}else{const o=2*Math.sqrt(1+m-i-Z);this._w=(c-e)/o,this._x=(n+a)/o,this._y=(h+d)/o,this._z=.25*o}return this._onChangeCallback(),this}setFromUnitVectors(t,l){let i=t.dot(l)+1;return i<Number.EPSILON?(i=0,Math.abs(t.x)>Math.abs(t.z)?(this._x=-t.y,this._y=t.x,this._z=0,this._w=i):(this._x=0,this._y=-t.z,this._z=t.y,this._w=i)):(this._x=t.y*l.z-t.z*l.y,this._y=t.z*l.x-t.x*l.z,this._z=t.x*l.y-t.y*l.x,this._w=i),this.normalize()}angleTo(t){return 2*Math.acos(Math.abs(_(this.dot(t),-1,1)))}rotateTowards(t,l){const i=this.angleTo(t);if(i===0)return this;const e=Math.min(1,l/i);return this.slerp(t,e),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let t=this.length();return t===0?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this._onChangeCallback(),this}multiply(t){return this.multiplyQuaternions(this,t)}premultiply(t){return this.multiplyQuaternions(t,this)}multiplyQuaternions(t,l){const i=t._x,e=t._y,n=t._z,c=t._w,Z=l._x,h=l._y,a=l._z,d=l._w;return this._x=i*d+c*Z+e*a-n*h,this._y=e*d+c*h+n*Z-i*a,this._z=n*d+c*a+i*h-e*Z,this._w=c*d-i*Z-e*h-n*a,this._onChangeCallback(),this}slerp(t,l){if(l===0)return this;if(l===1)return this.copy(t);const i=this._x,e=this._y,n=this._z,c=this._w;let Z=c*t._w+i*t._x+e*t._y+n*t._z;if(Z<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,Z=-Z):this.copy(t),Z>=1)return this._w=c,this._x=i,this._y=e,this._z=n,this;const h=1-Z*Z;if(h<=Number.EPSILON){const o=1-l;return this._w=o*c+l*this._w,this._x=o*i+l*this._x,this._y=o*e+l*this._y,this._z=o*n+l*this._z,this.normalize(),this._onChangeCallback(),this}const a=Math.sqrt(h),d=Math.atan2(a,Z),m=Math.sin((1-l)*d)/a,b=Math.sin(l*d)/a;return this._w=c*m+this._w*b,this._x=i*m+this._x*b,this._y=e*m+this._y*b,this._z=n*m+this._z*b,this._onChangeCallback(),this}slerpQuaternions(t,l,i){return this.copy(t).slerp(l,i)}random(){const t=Math.random(),l=Math.sqrt(1-t),i=Math.sqrt(t),e=2*Math.PI*Math.random(),n=2*Math.PI*Math.random();return this.set(l*Math.cos(e),i*Math.sin(n),i*Math.cos(n),l*Math.sin(e))}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w}fromArray(t,l=0){return this._x=t[l],this._y=t[l+1],this._z=t[l+2],this._w=t[l+3],this._onChangeCallback(),this}toArray(t=[],l=0){return t[l]=this._x,t[l+1]=this._y,t[l+2]=this._z,t[l+3]=this._w,t}fromBufferAttribute(t,l){return this._x=t.getX(l),this._y=t.getY(l),this._z=t.getZ(l),this._w=t.getW(l),this}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}}class W{constructor(t=0,l=0,i=0){W.prototype.isVector3=!0,this.x=t,this.y=l,this.z=i}set(t,l,i){return i===void 0&&(i=this.z),this.x=t,this.y=l,this.z=i,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setComponent(t,l){switch(t){case 0:this.x=l;break;case 1:this.y=l;break;case 2:this.z=l;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this}addVectors(t,l){return this.x=t.x+l.x,this.y=t.y+l.y,this.z=t.z+l.z,this}addScaledVector(t,l){return this.x+=t.x*l,this.y+=t.y*l,this.z+=t.z*l,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this}subVectors(t,l){return this.x=t.x-l.x,this.y=t.y-l.y,this.z=t.z-l.z,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this}multiplyVectors(t,l){return this.x=t.x*l.x,this.y=t.y*l.y,this.z=t.z*l.z,this}applyEuler(t){return this.applyQuaternion(ni.setFromEuler(t))}applyAxisAngle(t,l){return this.applyQuaternion(ni.setFromAxisAngle(t,l))}applyMatrix3(t){const l=this.x,i=this.y,e=this.z,n=t.elements;return this.x=n[0]*l+n[3]*i+n[6]*e,this.y=n[1]*l+n[4]*i+n[7]*e,this.z=n[2]*l+n[5]*i+n[8]*e,this}applyNormalMatrix(t){return this.applyMatrix3(t).normalize()}applyMatrix4(t){const l=this.x,i=this.y,e=this.z,n=t.elements,c=1/(n[3]*l+n[7]*i+n[11]*e+n[15]);return this.x=(n[0]*l+n[4]*i+n[8]*e+n[12])*c,this.y=(n[1]*l+n[5]*i+n[9]*e+n[13])*c,this.z=(n[2]*l+n[6]*i+n[10]*e+n[14])*c,this}applyQuaternion(t){const l=this.x,i=this.y,e=this.z,n=t.x,c=t.y,Z=t.z,h=t.w,a=h*l+c*e-Z*i,d=h*i+Z*l-n*e,m=h*e+n*i-c*l,b=-n*l-c*i-Z*e;return this.x=a*h+b*-n+d*-Z-m*-c,this.y=d*h+b*-c+m*-n-a*-Z,this.z=m*h+b*-Z+a*-c-d*-n,this}project(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)}unproject(t){return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)}transformDirection(t){const l=this.x,i=this.y,e=this.z,n=t.elements;return this.x=n[0]*l+n[4]*i+n[8]*e,this.y=n[1]*l+n[5]*i+n[9]*e,this.z=n[2]*l+n[6]*i+n[10]*e,this.normalize()}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this}divideScalar(t){return this.multiplyScalar(1/t)}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this}clamp(t,l){return this.x=Math.max(t.x,Math.min(l.x,this.x)),this.y=Math.max(t.y,Math.min(l.y,this.y)),this.z=Math.max(t.z,Math.min(l.z,this.z)),this}clampScalar(t,l){return this.x=Math.max(t,Math.min(l,this.x)),this.y=Math.max(t,Math.min(l,this.y)),this.z=Math.max(t,Math.min(l,this.z)),this}clampLength(t,l){const i=this.length();return this.divideScalar(i||1).multiplyScalar(Math.max(t,Math.min(l,i)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,l){return this.x+=(t.x-this.x)*l,this.y+=(t.y-this.y)*l,this.z+=(t.z-this.z)*l,this}lerpVectors(t,l,i){return this.x=t.x+(l.x-t.x)*i,this.y=t.y+(l.y-t.y)*i,this.z=t.z+(l.z-t.z)*i,this}cross(t){return this.crossVectors(this,t)}crossVectors(t,l){const i=t.x,e=t.y,n=t.z,c=l.x,Z=l.y,h=l.z;return this.x=e*h-n*Z,this.y=n*c-i*h,this.z=i*Z-e*c,this}projectOnVector(t){const l=t.lengthSq();if(l===0)return this.set(0,0,0);const i=t.dot(this)/l;return this.copy(t).multiplyScalar(i)}projectOnPlane(t){return wl.copy(this).projectOnVector(t),this.sub(wl)}reflect(t){return this.sub(wl.copy(t).multiplyScalar(2*this.dot(t)))}angleTo(t){const l=Math.sqrt(this.lengthSq()*t.lengthSq());if(l===0)return Math.PI/2;const i=this.dot(t)/l;return Math.acos(_(i,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const l=this.x-t.x,i=this.y-t.y,e=this.z-t.z;return l*l+i*i+e*e}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)}setFromSpherical(t){return this.setFromSphericalCoords(t.radius,t.phi,t.theta)}setFromSphericalCoords(t,l,i){const e=Math.sin(l)*t;return this.x=e*Math.sin(i),this.y=Math.cos(l)*t,this.z=e*Math.cos(i),this}setFromCylindrical(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)}setFromCylindricalCoords(t,l,i){return this.x=t*Math.sin(l),this.y=i,this.z=t*Math.cos(l),this}setFromMatrixPosition(t){const l=t.elements;return this.x=l[12],this.y=l[13],this.z=l[14],this}setFromMatrixScale(t){const l=this.setFromMatrixColumn(t,0).length(),i=this.setFromMatrixColumn(t,1).length(),e=this.setFromMatrixColumn(t,2).length();return this.x=l,this.y=i,this.z=e,this}setFromMatrixColumn(t,l){return this.fromArray(t.elements,l*4)}setFromMatrix3Column(t,l){return this.fromArray(t.elements,l*3)}setFromEuler(t){return this.x=t._x,this.y=t._y,this.z=t._z,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z}fromArray(t,l=0){return this.x=t[l],this.y=t[l+1],this.z=t[l+2],this}toArray(t=[],l=0){return t[l]=this.x,t[l+1]=this.y,t[l+2]=this.z,t}fromBufferAttribute(t,l){return this.x=t.getX(l),this.y=t.getY(l),this.z=t.getZ(l),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const t=(Math.random()-.5)*2,l=Math.random()*Math.PI*2,i=Math.sqrt(1-t**2);return this.x=i*Math.cos(l),this.y=i*Math.sin(l),this.z=t,this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}const wl=new W,ni=new Pt;class O{constructor(t=new W(1/0,1/0,1/0),l=new W(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=t,this.max=l}set(t,l){return this.min.copy(t),this.max.copy(l),this}setFromArray(t){let l=1/0,i=1/0,e=1/0,n=-1/0,c=-1/0,Z=-1/0;for(let h=0,a=t.length;h<a;h+=3){const d=t[h],m=t[h+1],b=t[h+2];d<l&&(l=d),m<i&&(i=m),b<e&&(e=b),d>n&&(n=d),m>c&&(c=m),b>Z&&(Z=b)}return this.min.set(l,i,e),this.max.set(n,c,Z),this}setFromBufferAttribute(t){let l=1/0,i=1/0,e=1/0,n=-1/0,c=-1/0,Z=-1/0;for(let h=0,a=t.count;h<a;h++){const d=t.getX(h),m=t.getY(h),b=t.getZ(h);d<l&&(l=d),m<i&&(i=m),b<e&&(e=b),d>n&&(n=d),m>c&&(c=m),b>Z&&(Z=b)}return this.min.set(l,i,e),this.max.set(n,c,Z),this}setFromPoints(t){this.makeEmpty();for(let l=0,i=t.length;l<i;l++)this.expandByPoint(t[l]);return this}setFromCenterAndSize(t,l){const i=Jt.copy(l).multiplyScalar(.5);return this.min.copy(t).sub(i),this.max.copy(t).add(i),this}setFromObject(t,l=!1){return this.makeEmpty(),this.expandByObject(t,l)}clone(){return new this.constructor().copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(t){return this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}expandByObject(t,l=!1){t.updateWorldMatrix(!1,!1);const i=t.geometry;if(i!==void 0)if(l&&i.attributes!=null&&i.attributes.position!==void 0){const n=i.attributes.position;for(let c=0,Z=n.count;c<Z;c++)Jt.fromBufferAttribute(n,c).applyMatrix4(t.matrixWorld),this.expandByPoint(Jt)}else i.boundingBox===null&&i.computeBoundingBox(),Ql.copy(i.boundingBox),Ql.applyMatrix4(t.matrixWorld),this.union(Ql);const e=t.children;for(let n=0,c=e.length;n<c;n++)this.expandByObject(e[n],l);return this}containsPoint(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y||t.z<this.min.z||t.z>this.max.z)}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z}getParameter(t,l){return l.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y||t.max.z<this.min.z||t.min.z>this.max.z)}intersectsSphere(t){return this.clampPoint(t.center,Jt),Jt.distanceToSquared(t.center)<=t.radius*t.radius}intersectsPlane(t){let l,i;return t.normal.x>0?(l=t.normal.x*this.min.x,i=t.normal.x*this.max.x):(l=t.normal.x*this.max.x,i=t.normal.x*this.min.x),t.normal.y>0?(l+=t.normal.y*this.min.y,i+=t.normal.y*this.max.y):(l+=t.normal.y*this.max.y,i+=t.normal.y*this.min.y),t.normal.z>0?(l+=t.normal.z*this.min.z,i+=t.normal.z*this.max.z):(l+=t.normal.z*this.max.z,i+=t.normal.z*this.min.z),l<=-t.constant&&i>=-t.constant}intersectsTriangle(t){if(this.isEmpty())return!1;this.getCenter(Tt),sl.subVectors(this.max,Tt),Qt.subVectors(t.a,Tt),vt.subVectors(t.b,Tt),kt.subVectors(t.c,Tt),Gt.subVectors(vt,Qt),ut.subVectors(kt,vt),Bt.subVectors(Qt,kt);let l=[0,-Gt.z,Gt.y,0,-ut.z,ut.y,0,-Bt.z,Bt.y,Gt.z,0,-Gt.x,ut.z,0,-ut.x,Bt.z,0,-Bt.x,-Gt.y,Gt.x,0,-ut.y,ut.x,0,-Bt.y,Bt.x,0];return!vl(l,Qt,vt,kt,sl)||(l=[1,0,0,0,1,0,0,0,1],!vl(l,Qt,vt,kt,sl))?!1:(cl.crossVectors(Gt,ut),l=[cl.x,cl.y,cl.z],vl(l,Qt,vt,kt,sl))}clampPoint(t,l){return l.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return Jt.copy(t).clamp(this.min,this.max).sub(t).length()}getBoundingSphere(t){return this.getCenter(t.center),t.radius=this.getSize(Jt).length()*.5,t}intersect(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}applyMatrix4(t){return this.isEmpty()?this:(ot[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),ot[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),ot[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),ot[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),ot[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),ot[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),ot[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),ot[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(ot),this)}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}const ot=[new W,new W,new W,new W,new W,new W,new W,new W],Jt=new W,Ql=new O,Qt=new W,vt=new W,kt=new W,Gt=new W,ut=new W,Bt=new W,Tt=new W,sl=new W,cl=new W,It=new W;function vl(s,t,l,i,e){for(let n=0,c=s.length-3;n<=c;n+=3){It.fromArray(s,n);const Z=e.x*Math.abs(It.x)+e.y*Math.abs(It.y)+e.z*Math.abs(It.z),h=t.dot(It),a=l.dot(It),d=i.dot(It);if(Math.max(-Math.max(h,a,d),Math.min(h,a,d))>Z)return!1}return!0}const qi=new O,Lt=new W,kl=new W;class nt{constructor(t=new W,l=-1){this.center=t,this.radius=l}set(t,l){return this.center.copy(t),this.radius=l,this}setFromPoints(t,l){const i=this.center;l!==void 0?i.copy(l):qi.setFromPoints(t).getCenter(i);let e=0;for(let n=0,c=t.length;n<c;n++)e=Math.max(e,i.distanceToSquared(t[n]));return this.radius=Math.sqrt(e),this}copy(t){return this.center.copy(t.center),this.radius=t.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(t){return t.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(t){return t.distanceTo(this.center)-this.radius}intersectsSphere(t){const l=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=l*l}intersectsBox(t){return t.intersectsSphere(this)}intersectsPlane(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius}clampPoint(t,l){const i=this.center.distanceToSquared(t);return l.copy(t),i>this.radius*this.radius&&(l.sub(this.center).normalize(),l.multiplyScalar(this.radius).add(this.center)),l}getBoundingBox(t){return this.isEmpty()?(t.makeEmpty(),t):(t.set(this.center,this.center),t.expandByScalar(this.radius),t)}applyMatrix4(t){return this.center.applyMatrix4(t),this.radius=this.radius*t.getMaxScaleOnAxis(),this}translate(t){return this.center.add(t),this}expandByPoint(t){if(this.isEmpty())return this.center.copy(t),this.radius=0,this;Lt.subVectors(t,this.center);const l=Lt.lengthSq();if(l>this.radius*this.radius){const i=Math.sqrt(l),e=(i-this.radius)*.5;this.center.addScaledVector(Lt,e/i),this.radius+=e}return this}union(t){return t.isEmpty()?this:this.isEmpty()?(this.copy(t),this):(this.center.equals(t.center)===!0?this.radius=Math.max(this.radius,t.radius):(kl.subVectors(t.center,this.center).setLength(t.radius),this.expandByPoint(Lt.copy(t.center).add(kl)),this.expandByPoint(Lt.copy(t.center).sub(kl))),this)}equals(t){return t.center.equals(this.center)&&t.radius===this.radius}clone(){return new this.constructor().copy(this)}}const rt=new W,Hl=new W,Zl=new W,Yt=new W,Dl=new W,hl=new W,Ml=new W;class si{constructor(t=new W,l=new W(0,0,-1)){this.origin=t,this.direction=l}set(t,l){return this.origin.copy(t),this.direction.copy(l),this}copy(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this}at(t,l){return l.copy(this.direction).multiplyScalar(t).add(this.origin)}lookAt(t){return this.direction.copy(t).sub(this.origin).normalize(),this}recast(t){return this.origin.copy(this.at(t,rt)),this}closestPointToPoint(t,l){l.subVectors(t,this.origin);const i=l.dot(this.direction);return i<0?l.copy(this.origin):l.copy(this.direction).multiplyScalar(i).add(this.origin)}distanceToPoint(t){return Math.sqrt(this.distanceSqToPoint(t))}distanceSqToPoint(t){const l=rt.subVectors(t,this.origin).dot(this.direction);return l<0?this.origin.distanceToSquared(t):(rt.copy(this.direction).multiplyScalar(l).add(this.origin),rt.distanceToSquared(t))}distanceSqToSegment(t,l,i,e){Hl.copy(t).add(l).multiplyScalar(.5),Zl.copy(l).sub(t).normalize(),Yt.copy(this.origin).sub(Hl);const n=t.distanceTo(l)*.5,c=-this.direction.dot(Zl),Z=Yt.dot(this.direction),h=-Yt.dot(Zl),a=Yt.lengthSq(),d=Math.abs(1-c*c);let m,b,o,r;if(d>0)if(m=c*h-Z,b=c*Z-h,r=n*d,m>=0)if(b>=-r)if(b<=r){const G=1/d;m*=G,b*=G,o=m*(m+c*b+2*Z)+b*(c*m+b+2*h)+a}else b=n,m=Math.max(0,-(c*b+Z)),o=-m*m+b*(b+2*h)+a;else b=-n,m=Math.max(0,-(c*b+Z)),o=-m*m+b*(b+2*h)+a;else b<=-r?(m=Math.max(0,-(-c*n+Z)),b=m>0?-n:Math.min(Math.max(-n,-h),n),o=-m*m+b*(b+2*h)+a):b<=r?(m=0,b=Math.min(Math.max(-n,-h),n),o=b*(b+2*h)+a):(m=Math.max(0,-(c*n+Z)),b=m>0?n:Math.min(Math.max(-n,-h),n),o=-m*m+b*(b+2*h)+a);else b=c>0?-n:n,m=Math.max(0,-(c*b+Z)),o=-m*m+b*(b+2*h)+a;return i&&i.copy(this.direction).multiplyScalar(m).add(this.origin),e&&e.copy(Zl).multiplyScalar(b).add(Hl),o}intersectSphere(t,l){rt.subVectors(t.center,this.origin);const i=rt.dot(this.direction),e=rt.dot(rt)-i*i,n=t.radius*t.radius;if(e>n)return null;const c=Math.sqrt(n-e),Z=i-c,h=i+c;return Z<0&&h<0?null:Z<0?this.at(h,l):this.at(Z,l)}intersectsSphere(t){return this.distanceSqToPoint(t.center)<=t.radius*t.radius}distanceToPlane(t){const l=t.normal.dot(this.direction);if(l===0)return t.distanceToPoint(this.origin)===0?0:null;const i=-(this.origin.dot(t.normal)+t.constant)/l;return i>=0?i:null}intersectPlane(t,l){const i=this.distanceToPlane(t);return i===null?null:this.at(i,l)}intersectsPlane(t){const l=t.distanceToPoint(this.origin);return l===0||t.normal.dot(this.direction)*l<0}intersectBox(t,l){let i,e,n,c,Z,h;const a=1/this.direction.x,d=1/this.direction.y,m=1/this.direction.z,b=this.origin;return a>=0?(i=(t.min.x-b.x)*a,e=(t.max.x-b.x)*a):(i=(t.max.x-b.x)*a,e=(t.min.x-b.x)*a),d>=0?(n=(t.min.y-b.y)*d,c=(t.max.y-b.y)*d):(n=(t.max.y-b.y)*d,c=(t.min.y-b.y)*d),i>c||n>e||((n>i||isNaN(i))&&(i=n),(c<e||isNaN(e))&&(e=c),m>=0?(Z=(t.min.z-b.z)*m,h=(t.max.z-b.z)*m):(Z=(t.max.z-b.z)*m,h=(t.min.z-b.z)*m),i>h||Z>e)||((Z>i||i!==i)&&(i=Z),(h<e||e!==e)&&(e=h),e<0)?null:this.at(i>=0?i:e,l)}intersectsBox(t){return this.intersectBox(t,rt)!==null}intersectTriangle(t,l,i,e,n){Dl.subVectors(l,t),hl.subVectors(i,t),Ml.crossVectors(Dl,hl);let c=this.direction.dot(Ml),Z;if(c>0){if(e)return null;Z=1}else if(c<0)Z=-1,c=-c;else return null;Yt.subVectors(this.origin,t);const h=Z*this.direction.dot(hl.crossVectors(Yt,hl));if(h<0)return null;const a=Z*this.direction.dot(Dl.cross(Yt));if(a<0||h+a>c)return null;const d=-Z*Yt.dot(Ml);return d<0?null:this.at(d/c,n)}applyMatrix4(t){return this.origin.applyMatrix4(t),this.direction.transformDirection(t),this}equals(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}}class E{constructor(){E.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]}set(t,l,i,e,n,c,Z,h,a,d,m,b,o,r,G,u){const Y=this.elements;return Y[0]=t,Y[4]=l,Y[8]=i,Y[12]=e,Y[1]=n,Y[5]=c,Y[9]=Z,Y[13]=h,Y[2]=a,Y[6]=d,Y[10]=m,Y[14]=b,Y[3]=o,Y[7]=r,Y[11]=G,Y[15]=u,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new E().fromArray(this.elements)}copy(t){const l=this.elements,i=t.elements;return l[0]=i[0],l[1]=i[1],l[2]=i[2],l[3]=i[3],l[4]=i[4],l[5]=i[5],l[6]=i[6],l[7]=i[7],l[8]=i[8],l[9]=i[9],l[10]=i[10],l[11]=i[11],l[12]=i[12],l[13]=i[13],l[14]=i[14],l[15]=i[15],this}copyPosition(t){const l=this.elements,i=t.elements;return l[12]=i[12],l[13]=i[13],l[14]=i[14],this}setFromMatrix3(t){const l=t.elements;return this.set(l[0],l[3],l[6],0,l[1],l[4],l[7],0,l[2],l[5],l[8],0,0,0,0,1),this}extractBasis(t,l,i){return t.setFromMatrixColumn(this,0),l.setFromMatrixColumn(this,1),i.setFromMatrixColumn(this,2),this}makeBasis(t,l,i){return this.set(t.x,l.x,i.x,0,t.y,l.y,i.y,0,t.z,l.z,i.z,0,0,0,0,1),this}extractRotation(t){const l=this.elements,i=t.elements,e=1/Ht.setFromMatrixColumn(t,0).length(),n=1/Ht.setFromMatrixColumn(t,1).length(),c=1/Ht.setFromMatrixColumn(t,2).length();return l[0]=i[0]*e,l[1]=i[1]*e,l[2]=i[2]*e,l[3]=0,l[4]=i[4]*n,l[5]=i[5]*n,l[6]=i[6]*n,l[7]=0,l[8]=i[8]*c,l[9]=i[9]*c,l[10]=i[10]*c,l[11]=0,l[12]=0,l[13]=0,l[14]=0,l[15]=1,this}makeRotationFromEuler(t){const l=this.elements,i=t.x,e=t.y,n=t.z,c=Math.cos(i),Z=Math.sin(i),h=Math.cos(e),a=Math.sin(e),d=Math.cos(n),m=Math.sin(n);if(t.order==="XYZ"){const b=c*d,o=c*m,r=Z*d,G=Z*m;l[0]=h*d,l[4]=-h*m,l[8]=a,l[1]=o+r*a,l[5]=b-G*a,l[9]=-Z*h,l[2]=G-b*a,l[6]=r+o*a,l[10]=c*h}else if(t.order==="YXZ"){const b=h*d,o=h*m,r=a*d,G=a*m;l[0]=b+G*Z,l[4]=r*Z-o,l[8]=c*a,l[1]=c*m,l[5]=c*d,l[9]=-Z,l[2]=o*Z-r,l[6]=G+b*Z,l[10]=c*h}else if(t.order==="ZXY"){const b=h*d,o=h*m,r=a*d,G=a*m;l[0]=b-G*Z,l[4]=-c*m,l[8]=r+o*Z,l[1]=o+r*Z,l[5]=c*d,l[9]=G-b*Z,l[2]=-c*a,l[6]=Z,l[10]=c*h}else if(t.order==="ZYX"){const b=c*d,o=c*m,r=Z*d,G=Z*m;l[0]=h*d,l[4]=r*a-o,l[8]=b*a+G,l[1]=h*m,l[5]=G*a+b,l[9]=o*a-r,l[2]=-a,l[6]=Z*h,l[10]=c*h}else if(t.order==="YZX"){const b=c*h,o=c*a,r=Z*h,G=Z*a;l[0]=h*d,l[4]=G-b*m,l[8]=r*m+o,l[1]=m,l[5]=c*d,l[9]=-Z*d,l[2]=-a*d,l[6]=o*m+r,l[10]=b-G*m}else if(t.order==="XZY"){const b=c*h,o=c*a,r=Z*h,G=Z*a;l[0]=h*d,l[4]=-m,l[8]=a*d,l[1]=b*m+G,l[5]=c*d,l[9]=o*m-r,l[2]=r*m-o,l[6]=Z*d,l[10]=G*m+b}return l[3]=0,l[7]=0,l[11]=0,l[12]=0,l[13]=0,l[14]=0,l[15]=1,this}makeRotationFromQuaternion(t){return this.compose($i,t,te)}lookAt(t,l,i){const e=this.elements;return tt.subVectors(t,l),tt.lengthSq()===0&&(tt.z=1),tt.normalize(),Vt.crossVectors(i,tt),Vt.lengthSq()===0&&(Math.abs(i.z)===1?tt.x+=1e-4:tt.z+=1e-4,tt.normalize(),Vt.crossVectors(i,tt)),Vt.normalize(),al.crossVectors(tt,Vt),e[0]=Vt.x,e[4]=al.x,e[8]=tt.x,e[1]=Vt.y,e[5]=al.y,e[9]=tt.y,e[2]=Vt.z,e[6]=al.z,e[10]=tt.z,this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,l){const i=t.elements,e=l.elements,n=this.elements,c=i[0],Z=i[4],h=i[8],a=i[12],d=i[1],m=i[5],b=i[9],o=i[13],r=i[2],G=i[6],u=i[10],Y=i[14],X=i[3],g=i[7],y=i[11],F=i[15],J=e[0],R=e[4],Q=e[8],K=e[12],I=e[1],f=e[5],j=e[9],P=e[13],yt=e[2],T=e[6],Rt=e[10],gl=e[14],yl=e[3],Rl=e[7],xl=e[11],Nl=e[15];return n[0]=c*J+Z*I+h*yt+a*yl,n[4]=c*R+Z*f+h*T+a*Rl,n[8]=c*Q+Z*j+h*Rt+a*xl,n[12]=c*K+Z*P+h*gl+a*Nl,n[1]=d*J+m*I+b*yt+o*yl,n[5]=d*R+m*f+b*T+o*Rl,n[9]=d*Q+m*j+b*Rt+o*xl,n[13]=d*K+m*P+b*gl+o*Nl,n[2]=r*J+G*I+u*yt+Y*yl,n[6]=r*R+G*f+u*T+Y*Rl,n[10]=r*Q+G*j+u*Rt+Y*xl,n[14]=r*K+G*P+u*gl+Y*Nl,n[3]=X*J+g*I+y*yt+F*yl,n[7]=X*R+g*f+y*T+F*Rl,n[11]=X*Q+g*j+y*Rt+F*xl,n[15]=X*K+g*P+y*gl+F*Nl,this}multiplyScalar(t){const l=this.elements;return l[0]*=t,l[4]*=t,l[8]*=t,l[12]*=t,l[1]*=t,l[5]*=t,l[9]*=t,l[13]*=t,l[2]*=t,l[6]*=t,l[10]*=t,l[14]*=t,l[3]*=t,l[7]*=t,l[11]*=t,l[15]*=t,this}determinant(){const t=this.elements,l=t[0],i=t[4],e=t[8],n=t[12],c=t[1],Z=t[5],h=t[9],a=t[13],d=t[2],m=t[6],b=t[10],o=t[14],r=t[3],G=t[7],u=t[11],Y=t[15];return r*(+n*h*m-e*a*m-n*Z*b+i*a*b+e*Z*o-i*h*o)+G*(+l*h*o-l*a*b+n*c*b-e*c*o+e*a*d-n*h*d)+u*(+l*a*m-l*Z*o-n*c*m+i*c*o+n*Z*d-i*a*d)+Y*(-e*Z*d-l*h*m+l*Z*b+e*c*m-i*c*b+i*h*d)}transpose(){const t=this.elements;let l;return l=t[1],t[1]=t[4],t[4]=l,l=t[2],t[2]=t[8],t[8]=l,l=t[6],t[6]=t[9],t[9]=l,l=t[3],t[3]=t[12],t[12]=l,l=t[7],t[7]=t[13],t[13]=l,l=t[11],t[11]=t[14],t[14]=l,this}setPosition(t,l,i){const e=this.elements;return t.isVector3?(e[12]=t.x,e[13]=t.y,e[14]=t.z):(e[12]=t,e[13]=l,e[14]=i),this}invert(){const t=this.elements,l=t[0],i=t[1],e=t[2],n=t[3],c=t[4],Z=t[5],h=t[6],a=t[7],d=t[8],m=t[9],b=t[10],o=t[11],r=t[12],G=t[13],u=t[14],Y=t[15],X=m*u*a-G*b*a+G*h*o-Z*u*o-m*h*Y+Z*b*Y,g=r*b*a-d*u*a-r*h*o+c*u*o+d*h*Y-c*b*Y,y=d*G*a-r*m*a+r*Z*o-c*G*o-d*Z*Y+c*m*Y,F=r*m*h-d*G*h-r*Z*b+c*G*b+d*Z*u-c*m*u,J=l*X+i*g+e*y+n*F;if(J===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const R=1/J;return t[0]=X*R,t[1]=(G*b*n-m*u*n-G*e*o+i*u*o+m*e*Y-i*b*Y)*R,t[2]=(Z*u*n-G*h*n+G*e*a-i*u*a-Z*e*Y+i*h*Y)*R,t[3]=(m*h*n-Z*b*n-m*e*a+i*b*a+Z*e*o-i*h*o)*R,t[4]=g*R,t[5]=(d*u*n-r*b*n+r*e*o-l*u*o-d*e*Y+l*b*Y)*R,t[6]=(r*h*n-c*u*n-r*e*a+l*u*a+c*e*Y-l*h*Y)*R,t[7]=(c*b*n-d*h*n+d*e*a-l*b*a-c*e*o+l*h*o)*R,t[8]=y*R,t[9]=(r*m*n-d*G*n-r*i*o+l*G*o+d*i*Y-l*m*Y)*R,t[10]=(c*G*n-r*Z*n+r*i*a-l*G*a-c*i*Y+l*Z*Y)*R,t[11]=(d*Z*n-c*m*n-d*i*a+l*m*a+c*i*o-l*Z*o)*R,t[12]=F*R,t[13]=(d*G*e-r*m*e+r*i*b-l*G*b-d*i*u+l*m*u)*R,t[14]=(r*Z*e-c*G*e-r*i*h+l*G*h+c*i*u-l*Z*u)*R,t[15]=(c*m*e-d*Z*e+d*i*h-l*m*h-c*i*b+l*Z*b)*R,this}scale(t){const l=this.elements,i=t.x,e=t.y,n=t.z;return l[0]*=i,l[4]*=e,l[8]*=n,l[1]*=i,l[5]*=e,l[9]*=n,l[2]*=i,l[6]*=e,l[10]*=n,l[3]*=i,l[7]*=e,l[11]*=n,this}getMaxScaleOnAxis(){const t=this.elements,l=t[0]*t[0]+t[1]*t[1]+t[2]*t[2],i=t[4]*t[4]+t[5]*t[5]+t[6]*t[6],e=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(l,i,e))}makeTranslation(t,l,i){return this.set(1,0,0,t,0,1,0,l,0,0,1,i,0,0,0,1),this}makeRotationX(t){const l=Math.cos(t),i=Math.sin(t);return this.set(1,0,0,0,0,l,-i,0,0,i,l,0,0,0,0,1),this}makeRotationY(t){const l=Math.cos(t),i=Math.sin(t);return this.set(l,0,i,0,0,1,0,0,-i,0,l,0,0,0,0,1),this}makeRotationZ(t){const l=Math.cos(t),i=Math.sin(t);return this.set(l,-i,0,0,i,l,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(t,l){const i=Math.cos(l),e=Math.sin(l),n=1-i,c=t.x,Z=t.y,h=t.z,a=n*c,d=n*Z;return this.set(a*c+i,a*Z-e*h,a*h+e*Z,0,a*Z+e*h,d*Z+i,d*h-e*c,0,a*h-e*Z,d*h+e*c,n*h*h+i,0,0,0,0,1),this}makeScale(t,l,i){return this.set(t,0,0,0,0,l,0,0,0,0,i,0,0,0,0,1),this}makeShear(t,l,i,e,n,c){return this.set(1,i,n,0,t,1,c,0,l,e,1,0,0,0,0,1),this}compose(t,l,i){const e=this.elements,n=l._x,c=l._y,Z=l._z,h=l._w,a=n+n,d=c+c,m=Z+Z,b=n*a,o=n*d,r=n*m,G=c*d,u=c*m,Y=Z*m,X=h*a,g=h*d,y=h*m,F=i.x,J=i.y,R=i.z;return e[0]=(1-(G+Y))*F,e[1]=(o+y)*F,e[2]=(r-g)*F,e[3]=0,e[4]=(o-y)*J,e[5]=(1-(b+Y))*J,e[6]=(u+X)*J,e[7]=0,e[8]=(r+g)*R,e[9]=(u-X)*R,e[10]=(1-(b+G))*R,e[11]=0,e[12]=t.x,e[13]=t.y,e[14]=t.z,e[15]=1,this}decompose(t,l,i){const e=this.elements;let n=Ht.set(e[0],e[1],e[2]).length();const c=Ht.set(e[4],e[5],e[6]).length(),Z=Ht.set(e[8],e[9],e[10]).length();this.determinant()<0&&(n=-n),t.x=e[12],t.y=e[13],t.z=e[14],Zt.copy(this);const a=1/n,d=1/c,m=1/Z;return Zt.elements[0]*=a,Zt.elements[1]*=a,Zt.elements[2]*=a,Zt.elements[4]*=d,Zt.elements[5]*=d,Zt.elements[6]*=d,Zt.elements[8]*=m,Zt.elements[9]*=m,Zt.elements[10]*=m,l.setFromRotationMatrix(Zt),i.x=n,i.y=c,i.z=Z,this}makePerspective(t,l,i,e,n,c){const Z=this.elements,h=2*n/(l-t),a=2*n/(i-e),d=(l+t)/(l-t),m=(i+e)/(i-e),b=-(c+n)/(c-n),o=-2*c*n/(c-n);return Z[0]=h,Z[4]=0,Z[8]=d,Z[12]=0,Z[1]=0,Z[5]=a,Z[9]=m,Z[13]=0,Z[2]=0,Z[6]=0,Z[10]=b,Z[14]=o,Z[3]=0,Z[7]=0,Z[11]=-1,Z[15]=0,this}makeOrthographic(t,l,i,e,n,c){const Z=this.elements,h=1/(l-t),a=1/(i-e),d=1/(c-n),m=(l+t)*h,b=(i+e)*a,o=(c+n)*d;return Z[0]=2*h,Z[4]=0,Z[8]=0,Z[12]=-m,Z[1]=0,Z[5]=2*a,Z[9]=0,Z[13]=-b,Z[2]=0,Z[6]=0,Z[10]=-2*d,Z[14]=-o,Z[3]=0,Z[7]=0,Z[11]=0,Z[15]=1,this}equals(t){const l=this.elements,i=t.elements;for(let e=0;e<16;e++)if(l[e]!==i[e])return!1;return!0}fromArray(t,l=0){for(let i=0;i<16;i++)this.elements[i]=t[i+l];return this}toArray(t=[],l=0){const i=this.elements;return t[l]=i[0],t[l+1]=i[1],t[l+2]=i[2],t[l+3]=i[3],t[l+4]=i[4],t[l+5]=i[5],t[l+6]=i[6],t[l+7]=i[7],t[l+8]=i[8],t[l+9]=i[9],t[l+10]=i[10],t[l+11]=i[11],t[l+12]=i[12],t[l+13]=i[13],t[l+14]=i[14],t[l+15]=i[15],t}}const Ht=new W,Zt=new E,$i=new W(0,0,0),te=new W(1,1,1),Vt=new W,al=new W,tt=new W,ci=new E,Zi=new Pt;class dl{constructor(t=0,l=0,i=0,e=dl.DEFAULT_ORDER){this.isEuler=!0,this._x=t,this._y=l,this._z=i,this._order=e}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get order(){return this._order}set order(t){this._order=t,this._onChangeCallback()}set(t,l,i,e=this._order){return this._x=t,this._y=l,this._z=i,this._order=e,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this._onChangeCallback(),this}setFromRotationMatrix(t,l=this._order,i=!0){const e=t.elements,n=e[0],c=e[4],Z=e[8],h=e[1],a=e[5],d=e[9],m=e[2],b=e[6],o=e[10];switch(l){case"XYZ":this._y=Math.asin(_(Z,-1,1)),Math.abs(Z)<.9999999?(this._x=Math.atan2(-d,o),this._z=Math.atan2(-c,n)):(this._x=Math.atan2(b,a),this._z=0);break;case"YXZ":this._x=Math.asin(-_(d,-1,1)),Math.abs(d)<.9999999?(this._y=Math.atan2(Z,o),this._z=Math.atan2(h,a)):(this._y=Math.atan2(-m,n),this._z=0);break;case"ZXY":this._x=Math.asin(_(b,-1,1)),Math.abs(b)<.9999999?(this._y=Math.atan2(-m,o),this._z=Math.atan2(-c,a)):(this._y=0,this._z=Math.atan2(h,n));break;case"ZYX":this._y=Math.asin(-_(m,-1,1)),Math.abs(m)<.9999999?(this._x=Math.atan2(b,o),this._z=Math.atan2(h,n)):(this._x=0,this._z=Math.atan2(-c,a));break;case"YZX":this._z=Math.asin(_(h,-1,1)),Math.abs(h)<.9999999?(this._x=Math.atan2(-d,a),this._y=Math.atan2(-m,n)):(this._x=0,this._y=Math.atan2(Z,o));break;case"XZY":this._z=Math.asin(-_(c,-1,1)),Math.abs(c)<.9999999?(this._x=Math.atan2(b,a),this._y=Math.atan2(Z,n)):(this._x=Math.atan2(-d,o),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+l)}return this._order=l,i===!0&&this._onChangeCallback(),this}setFromQuaternion(t,l,i){return ci.makeRotationFromQuaternion(t),this.setFromRotationMatrix(ci,l,i)}setFromVector3(t,l=this._order){return this.set(t.x,t.y,t.z,l)}reorder(t){return Zi.setFromEuler(this),this.setFromQuaternion(Zi,t)}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order}fromArray(t){return this._x=t[0],this._y=t[1],this._z=t[2],t[3]!==void 0&&(this._order=t[3]),this._onChangeCallback(),this}toArray(t=[],l=0){return t[l]=this._x,t[l+1]=this._y,t[l+2]=this._z,t[l+3]=this._order,t}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}}dl.DEFAULT_ORDER="XYZ";class le{constructor(){this.mask=1}set(t){this.mask=(1<<t|0)>>>0}enable(t){this.mask|=1<<t|0}enableAll(){this.mask=-1}toggle(t){this.mask^=1<<t|0}disable(t){this.mask&=~(1<<t|0)}disableAll(){this.mask=0}test(t){return(this.mask&t.mask)!==0}isEnabled(t){return(this.mask&(1<<t|0))!==0}}let ie=0;const hi=new W,Dt=new Pt,Wt=new E,ml=new W,Et=new W,ee=new W,ne=new Pt,ai=new W(1,0,0),di=new W(0,1,0),mi=new W(0,0,1),se={type:"added"},bi={type:"removed"};class lt extends xt{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:ie++}),this.uuid=jt(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=lt.DEFAULT_UP.clone();const t=new W,l=new dl,i=new Pt,e=new W(1,1,1);function n(){i.setFromEuler(l,!1)}function c(){l.setFromQuaternion(i,void 0,!1)}l._onChange(n),i._onChange(c),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:t},rotation:{configurable:!0,enumerable:!0,value:l},quaternion:{configurable:!0,enumerable:!0,value:i},scale:{configurable:!0,enumerable:!0,value:e},modelViewMatrix:{value:new E},normalMatrix:{value:new Nt}}),this.matrix=new E,this.matrixWorld=new E,this.matrixAutoUpdate=lt.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.matrixWorldAutoUpdate=lt.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.layers=new le,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeRender(){}onAfterRender(){}applyMatrix4(t){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(t),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(t){return this.quaternion.premultiply(t),this}setRotationFromAxisAngle(t,l){this.quaternion.setFromAxisAngle(t,l)}setRotationFromEuler(t){this.quaternion.setFromEuler(t,!0)}setRotationFromMatrix(t){this.quaternion.setFromRotationMatrix(t)}setRotationFromQuaternion(t){this.quaternion.copy(t)}rotateOnAxis(t,l){return Dt.setFromAxisAngle(t,l),this.quaternion.multiply(Dt),this}rotateOnWorldAxis(t,l){return Dt.setFromAxisAngle(t,l),this.quaternion.premultiply(Dt),this}rotateX(t){return this.rotateOnAxis(ai,t)}rotateY(t){return this.rotateOnAxis(di,t)}rotateZ(t){return this.rotateOnAxis(mi,t)}translateOnAxis(t,l){return hi.copy(t).applyQuaternion(this.quaternion),this.position.add(hi.multiplyScalar(l)),this}translateX(t){return this.translateOnAxis(ai,t)}translateY(t){return this.translateOnAxis(di,t)}translateZ(t){return this.translateOnAxis(mi,t)}localToWorld(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(this.matrixWorld)}worldToLocal(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(Wt.copy(this.matrixWorld).invert())}lookAt(t,l,i){t.isVector3?ml.copy(t):ml.set(t,l,i);const e=this.parent;this.updateWorldMatrix(!0,!1),Et.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?Wt.lookAt(Et,ml,this.up):Wt.lookAt(ml,Et,this.up),this.quaternion.setFromRotationMatrix(Wt),e&&(Wt.extractRotation(e.matrixWorld),Dt.setFromRotationMatrix(Wt),this.quaternion.premultiply(Dt.invert()))}add(t){if(arguments.length>1){for(let l=0;l<arguments.length;l++)this.add(arguments[l]);return this}return t===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",t),this):(t&&t.isObject3D?(t.parent!==null&&t.parent.remove(t),t.parent=this,this.children.push(t),t.dispatchEvent(se)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",t),this)}remove(t){if(arguments.length>1){for(let i=0;i<arguments.length;i++)this.remove(arguments[i]);return this}const l=this.children.indexOf(t);return l!==-1&&(t.parent=null,this.children.splice(l,1),t.dispatchEvent(bi)),this}removeFromParent(){const t=this.parent;return t!==null&&t.remove(this),this}clear(){for(let t=0;t<this.children.length;t++){const l=this.children[t];l.parent=null,l.dispatchEvent(bi)}return this.children.length=0,this}attach(t){return this.updateWorldMatrix(!0,!1),Wt.copy(this.matrixWorld).invert(),t.parent!==null&&(t.parent.updateWorldMatrix(!0,!1),Wt.multiply(t.parent.matrixWorld)),t.applyMatrix4(Wt),this.add(t),t.updateWorldMatrix(!1,!0),this}getObjectById(t){return this.getObjectByProperty("id",t)}getObjectByName(t){return this.getObjectByProperty("name",t)}getObjectByProperty(t,l){if(this[t]===l)return this;for(let i=0,e=this.children.length;i<e;i++){const c=this.children[i].getObjectByProperty(t,l);if(c!==void 0)return c}}getObjectsByProperty(t,l){let i=[];this[t]===l&&i.push(this);for(let e=0,n=this.children.length;e<n;e++){const c=this.children[e].getObjectsByProperty(t,l);c.length>0&&(i=i.concat(c))}return i}getWorldPosition(t){return this.updateWorldMatrix(!0,!1),t.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Et,t,ee),t}getWorldScale(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Et,ne,t),t}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const l=this.matrixWorld.elements;return t.set(l[8],l[9],l[10]).normalize()}raycast(){}traverse(t){t(this);const l=this.children;for(let i=0,e=l.length;i<e;i++)l[i].traverse(t)}traverseVisible(t){if(this.visible===!1)return;t(this);const l=this.children;for(let i=0,e=l.length;i<e;i++)l[i].traverseVisible(t)}traverseAncestors(t){const l=this.parent;l!==null&&(t(l),l.traverseAncestors(t))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||t)&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,t=!0);const l=this.children;for(let i=0,e=l.length;i<e;i++){const n=l[i];(n.matrixWorldAutoUpdate===!0||t===!0)&&n.updateMatrixWorld(t)}}updateWorldMatrix(t,l){const i=this.parent;if(t===!0&&i!==null&&i.matrixWorldAutoUpdate===!0&&i.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),l===!0){const e=this.children;for(let n=0,c=e.length;n<c;n++){const Z=e[n];Z.matrixWorldAutoUpdate===!0&&Z.updateWorldMatrix(!1,!0)}}}toJSON(t){const l=t===void 0||typeof t=="string",i={};l&&(t={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},i.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});const e={};e.uuid=this.uuid,e.type=this.type,this.name!==""&&(e.name=this.name),this.castShadow===!0&&(e.castShadow=!0),this.receiveShadow===!0&&(e.receiveShadow=!0),this.visible===!1&&(e.visible=!1),this.frustumCulled===!1&&(e.frustumCulled=!1),this.renderOrder!==0&&(e.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(e.userData=this.userData),e.layers=this.layers.mask,e.matrix=this.matrix.toArray(),this.matrixAutoUpdate===!1&&(e.matrixAutoUpdate=!1),this.isInstancedMesh&&(e.type="InstancedMesh",e.count=this.count,e.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(e.instanceColor=this.instanceColor.toJSON()));function n(Z,h){return Z[h.uuid]===void 0&&(Z[h.uuid]=h.toJSON(t)),h.uuid}if(this.isScene)this.background&&(this.background.isColor?e.background=this.background.toJSON():this.background.isTexture&&(e.background=this.background.toJSON(t).uuid)),this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==!0&&(e.environment=this.environment.toJSON(t).uuid);else if(this.isMesh||this.isLine||this.isPoints){e.geometry=n(t.geometries,this.geometry);const Z=this.geometry.parameters;if(Z!==void 0&&Z.shapes!==void 0){const h=Z.shapes;if(Array.isArray(h))for(let a=0,d=h.length;a<d;a++){const m=h[a];n(t.shapes,m)}else n(t.shapes,h)}}if(this.isSkinnedMesh&&(e.bindMode=this.bindMode,e.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==void 0&&(n(t.skeletons,this.skeleton),e.skeleton=this.skeleton.uuid)),this.material!==void 0)if(Array.isArray(this.material)){const Z=[];for(let h=0,a=this.material.length;h<a;h++)Z.push(n(t.materials,this.material[h]));e.material=Z}else e.material=n(t.materials,this.material);if(this.children.length>0){e.children=[];for(let Z=0;Z<this.children.length;Z++)e.children.push(this.children[Z].toJSON(t).object)}if(this.animations.length>0){e.animations=[];for(let Z=0;Z<this.animations.length;Z++){const h=this.animations[Z];e.animations.push(n(t.animations,h))}}if(l){const Z=c(t.geometries),h=c(t.materials),a=c(t.textures),d=c(t.images),m=c(t.shapes),b=c(t.skeletons),o=c(t.animations),r=c(t.nodes);Z.length>0&&(i.geometries=Z),h.length>0&&(i.materials=h),a.length>0&&(i.textures=a),d.length>0&&(i.images=d),m.length>0&&(i.shapes=m),b.length>0&&(i.skeletons=b),o.length>0&&(i.animations=o),r.length>0&&(i.nodes=r)}return i.object=e,i;function c(Z){const h=[];for(const a in Z){const d=Z[a];delete d.metadata,h.push(d)}return h}}clone(t){return new this.constructor().copy(this,t)}copy(t,l=!0){if(this.name=t.name,this.up.copy(t.up),this.position.copy(t.position),this.rotation.order=t.rotation.order,this.quaternion.copy(t.quaternion),this.scale.copy(t.scale),this.matrix.copy(t.matrix),this.matrixWorld.copy(t.matrixWorld),this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate,this.matrixWorldAutoUpdate=t.matrixWorldAutoUpdate,this.layers.mask=t.layers.mask,this.visible=t.visible,this.castShadow=t.castShadow,this.receiveShadow=t.receiveShadow,this.frustumCulled=t.frustumCulled,this.renderOrder=t.renderOrder,this.userData=JSON.parse(JSON.stringify(t.userData)),l===!0)for(let i=0;i<t.children.length;i++){const e=t.children[i];this.add(e.clone())}return this}}lt.DEFAULT_UP=new W(0,1,0),lt.DEFAULT_MATRIX_AUTO_UPDATE=!0,lt.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;let ce=0;class Ul extends xt{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:ce++}),this.uuid=jt(),this.name="",this.type="Material",this.blending=1,this.side=0,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.blendSrc=204,this.blendDst=205,this.blendEquation=100,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=3,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=519,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=7680,this.stencilZFail=7680,this.stencilZPass=7680,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.forceSinglePass=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(t){this._alphaTest>0!=t>0&&this.version++,this._alphaTest=t}onBuild(){}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(t){if(t!==void 0)for(const l in t){const i=t[l];if(i===void 0){console.warn("THREE.Material: '"+l+"' parameter is undefined.");continue}const e=this[l];if(e===void 0){console.warn("THREE."+this.type+": '"+l+"' is not a property of this material.");continue}e&&e.isColor?e.set(i):e&&e.isVector3&&i&&i.isVector3?e.copy(i):this[l]=i}}toJSON(t){const l=t===void 0||typeof t=="string";l&&(t={textures:{},images:{}});const i={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};i.uuid=this.uuid,i.type=this.type,this.name!==""&&(i.name=this.name),this.color&&this.color.isColor&&(i.color=this.color.getHex()),this.roughness!==void 0&&(i.roughness=this.roughness),this.metalness!==void 0&&(i.metalness=this.metalness),this.sheen!==void 0&&(i.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(i.sheenColor=this.sheenColor.getHex()),this.sheenRoughness!==void 0&&(i.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(i.emissive=this.emissive.getHex()),this.emissiveIntensity&&this.emissiveIntensity!==1&&(i.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(i.specular=this.specular.getHex()),this.specularIntensity!==void 0&&(i.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(i.specularColor=this.specularColor.getHex()),this.shininess!==void 0&&(i.shininess=this.shininess),this.clearcoat!==void 0&&(i.clearcoat=this.clearcoat),this.clearcoatRoughness!==void 0&&(i.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(i.clearcoatMap=this.clearcoatMap.toJSON(t).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(i.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(t).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(i.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(t).uuid,i.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.iridescence!==void 0&&(i.iridescence=this.iridescence),this.iridescenceIOR!==void 0&&(i.iridescenceIOR=this.iridescenceIOR),this.iridescenceThicknessRange!==void 0&&(i.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(i.iridescenceMap=this.iridescenceMap.toJSON(t).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(i.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(t).uuid),this.map&&this.map.isTexture&&(i.map=this.map.toJSON(t).uuid),this.matcap&&this.matcap.isTexture&&(i.matcap=this.matcap.toJSON(t).uuid),this.alphaMap&&this.alphaMap.isTexture&&(i.alphaMap=this.alphaMap.toJSON(t).uuid),this.lightMap&&this.lightMap.isTexture&&(i.lightMap=this.lightMap.toJSON(t).uuid,i.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(i.aoMap=this.aoMap.toJSON(t).uuid,i.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(i.bumpMap=this.bumpMap.toJSON(t).uuid,i.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(i.normalMap=this.normalMap.toJSON(t).uuid,i.normalMapType=this.normalMapType,i.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(i.displacementMap=this.displacementMap.toJSON(t).uuid,i.displacementScale=this.displacementScale,i.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(i.roughnessMap=this.roughnessMap.toJSON(t).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(i.metalnessMap=this.metalnessMap.toJSON(t).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(i.emissiveMap=this.emissiveMap.toJSON(t).uuid),this.specularMap&&this.specularMap.isTexture&&(i.specularMap=this.specularMap.toJSON(t).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(i.specularIntensityMap=this.specularIntensityMap.toJSON(t).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(i.specularColorMap=this.specularColorMap.toJSON(t).uuid),this.envMap&&this.envMap.isTexture&&(i.envMap=this.envMap.toJSON(t).uuid,this.combine!==void 0&&(i.combine=this.combine)),this.envMapIntensity!==void 0&&(i.envMapIntensity=this.envMapIntensity),this.reflectivity!==void 0&&(i.reflectivity=this.reflectivity),this.refractionRatio!==void 0&&(i.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(i.gradientMap=this.gradientMap.toJSON(t).uuid),this.transmission!==void 0&&(i.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(i.transmissionMap=this.transmissionMap.toJSON(t).uuid),this.thickness!==void 0&&(i.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(i.thicknessMap=this.thicknessMap.toJSON(t).uuid),this.attenuationDistance!==void 0&&this.attenuationDistance!==1/0&&(i.attenuationDistance=this.attenuationDistance),this.attenuationColor!==void 0&&(i.attenuationColor=this.attenuationColor.getHex()),this.size!==void 0&&(i.size=this.size),this.shadowSide!==null&&(i.shadowSide=this.shadowSide),this.sizeAttenuation!==void 0&&(i.sizeAttenuation=this.sizeAttenuation),this.blending!==1&&(i.blending=this.blending),this.side!==0&&(i.side=this.side),this.vertexColors&&(i.vertexColors=!0),this.opacity<1&&(i.opacity=this.opacity),this.transparent===!0&&(i.transparent=this.transparent),i.depthFunc=this.depthFunc,i.depthTest=this.depthTest,i.depthWrite=this.depthWrite,i.colorWrite=this.colorWrite,i.stencilWrite=this.stencilWrite,i.stencilWriteMask=this.stencilWriteMask,i.stencilFunc=this.stencilFunc,i.stencilRef=this.stencilRef,i.stencilFuncMask=this.stencilFuncMask,i.stencilFail=this.stencilFail,i.stencilZFail=this.stencilZFail,i.stencilZPass=this.stencilZPass,this.rotation!==void 0&&this.rotation!==0&&(i.rotation=this.rotation),this.polygonOffset===!0&&(i.polygonOffset=!0),this.polygonOffsetFactor!==0&&(i.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(i.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth!==void 0&&this.linewidth!==1&&(i.linewidth=this.linewidth),this.dashSize!==void 0&&(i.dashSize=this.dashSize),this.gapSize!==void 0&&(i.gapSize=this.gapSize),this.scale!==void 0&&(i.scale=this.scale),this.dithering===!0&&(i.dithering=!0),this.alphaTest>0&&(i.alphaTest=this.alphaTest),this.alphaToCoverage===!0&&(i.alphaToCoverage=this.alphaToCoverage),this.premultipliedAlpha===!0&&(i.premultipliedAlpha=this.premultipliedAlpha),this.forceSinglePass===!0&&(i.forceSinglePass=this.forceSinglePass),this.wireframe===!0&&(i.wireframe=this.wireframe),this.wireframeLinewidth>1&&(i.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!=="round"&&(i.wireframeLinecap=this.wireframeLinecap),this.wireframeLinejoin!=="round"&&(i.wireframeLinejoin=this.wireframeLinejoin),this.flatShading===!0&&(i.flatShading=this.flatShading),this.visible===!1&&(i.visible=!1),this.toneMapped===!1&&(i.toneMapped=!1),this.fog===!1&&(i.fog=!1),Object.keys(this.userData).length>0&&(i.userData=this.userData);function e(n){const c=[];for(const Z in n){const h=n[Z];delete h.metadata,c.push(h)}return c}if(l){const n=e(t.textures),c=e(t.images);n.length>0&&(i.textures=n),c.length>0&&(i.images=c)}return i}clone(){return new this.constructor().copy(this)}copy(t){this.name=t.name,this.blending=t.blending,this.side=t.side,this.vertexColors=t.vertexColors,this.opacity=t.opacity,this.transparent=t.transparent,this.blendSrc=t.blendSrc,this.blendDst=t.blendDst,this.blendEquation=t.blendEquation,this.blendSrcAlpha=t.blendSrcAlpha,this.blendDstAlpha=t.blendDstAlpha,this.blendEquationAlpha=t.blendEquationAlpha,this.depthFunc=t.depthFunc,this.depthTest=t.depthTest,this.depthWrite=t.depthWrite,this.stencilWriteMask=t.stencilWriteMask,this.stencilFunc=t.stencilFunc,this.stencilRef=t.stencilRef,this.stencilFuncMask=t.stencilFuncMask,this.stencilFail=t.stencilFail,this.stencilZFail=t.stencilZFail,this.stencilZPass=t.stencilZPass,this.stencilWrite=t.stencilWrite;const l=t.clippingPlanes;let i=null;if(l!==null){const e=l.length;i=new Array(e);for(let n=0;n!==e;++n)i[n]=l[n].clone()}return this.clippingPlanes=i,this.clipIntersection=t.clipIntersection,this.clipShadows=t.clipShadows,this.shadowSide=t.shadowSide,this.colorWrite=t.colorWrite,this.precision=t.precision,this.polygonOffset=t.polygonOffset,this.polygonOffsetFactor=t.polygonOffsetFactor,this.polygonOffsetUnits=t.polygonOffsetUnits,this.dithering=t.dithering,this.alphaTest=t.alphaTest,this.alphaToCoverage=t.alphaToCoverage,this.premultipliedAlpha=t.premultipliedAlpha,this.forceSinglePass=t.forceSinglePass,this.visible=t.visible,this.toneMapped=t.toneMapped,this.userData=JSON.parse(JSON.stringify(t.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(t){t===!0&&this.version++}}const w=new W,bl=new ht;class z{constructor(t,l,i=!1){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,this.name="",this.array=t,this.itemSize=l,this.count=t!==void 0?t.length/l:0,this.normalized=i,this.usage=35044,this.updateRange={offset:0,count:-1},this.version=0}onUploadCallback(){}set needsUpdate(t){t===!0&&this.version++}setUsage(t){return this.usage=t,this}copy(t){return this.name=t.name,this.array=new t.array.constructor(t.array),this.itemSize=t.itemSize,this.count=t.count,this.normalized=t.normalized,this.usage=t.usage,this}copyAt(t,l,i){t*=this.itemSize,i*=l.itemSize;for(let e=0,n=this.itemSize;e<n;e++)this.array[t+e]=l.array[i+e];return this}copyArray(t){return this.array.set(t),this}applyMatrix3(t){if(this.itemSize===2)for(let l=0,i=this.count;l<i;l++)bl.fromBufferAttribute(this,l),bl.applyMatrix3(t),this.setXY(l,bl.x,bl.y);else if(this.itemSize===3)for(let l=0,i=this.count;l<i;l++)w.fromBufferAttribute(this,l),w.applyMatrix3(t),this.setXYZ(l,w.x,w.y,w.z);return this}applyMatrix4(t){for(let l=0,i=this.count;l<i;l++)w.fromBufferAttribute(this,l),w.applyMatrix4(t),this.setXYZ(l,w.x,w.y,w.z);return this}applyNormalMatrix(t){for(let l=0,i=this.count;l<i;l++)w.fromBufferAttribute(this,l),w.applyNormalMatrix(t),this.setXYZ(l,w.x,w.y,w.z);return this}transformDirection(t){for(let l=0,i=this.count;l<i;l++)w.fromBufferAttribute(this,l),w.transformDirection(t),this.setXYZ(l,w.x,w.y,w.z);return this}set(t,l=0){return this.array.set(t,l),this}getX(t){let l=this.array[t*this.itemSize];return this.normalized&&(l=ll(l,this.array)),l}setX(t,l){return this.normalized&&(l=q(l,this.array)),this.array[t*this.itemSize]=l,this}getY(t){let l=this.array[t*this.itemSize+1];return this.normalized&&(l=ll(l,this.array)),l}setY(t,l){return this.normalized&&(l=q(l,this.array)),this.array[t*this.itemSize+1]=l,this}getZ(t){let l=this.array[t*this.itemSize+2];return this.normalized&&(l=ll(l,this.array)),l}setZ(t,l){return this.normalized&&(l=q(l,this.array)),this.array[t*this.itemSize+2]=l,this}getW(t){let l=this.array[t*this.itemSize+3];return this.normalized&&(l=ll(l,this.array)),l}setW(t,l){return this.normalized&&(l=q(l,this.array)),this.array[t*this.itemSize+3]=l,this}setXY(t,l,i){return t*=this.itemSize,this.normalized&&(l=q(l,this.array),i=q(i,this.array)),this.array[t+0]=l,this.array[t+1]=i,this}setXYZ(t,l,i,e){return t*=this.itemSize,this.normalized&&(l=q(l,this.array),i=q(i,this.array),e=q(e,this.array)),this.array[t+0]=l,this.array[t+1]=i,this.array[t+2]=e,this}setXYZW(t,l,i,e,n){return t*=this.itemSize,this.normalized&&(l=q(l,this.array),i=q(i,this.array),e=q(e,this.array),n=q(n,this.array)),this.array[t+0]=l,this.array[t+1]=i,this.array[t+2]=e,this.array[t+3]=n,this}onUpload(t){return this.onUploadCallback=t,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const t={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return this.name!==""&&(t.name=this.name),this.usage!==35044&&(t.usage=this.usage),(this.updateRange.offset!==0||this.updateRange.count!==-1)&&(t.updateRange=this.updateRange),t}copyColorsArray(){console.error("THREE.BufferAttribute: copyColorsArray() was removed in r144.")}copyVector2sArray(){console.error("THREE.BufferAttribute: copyVector2sArray() was removed in r144.")}copyVector3sArray(){console.error("THREE.BufferAttribute: copyVector3sArray() was removed in r144.")}copyVector4sArray(){console.error("THREE.BufferAttribute: copyVector4sArray() was removed in r144.")}}class Ze extends z{constructor(t,l,i){super(new Uint8Array(t),l,i)}}class he extends z{constructor(t,l,i){super(new Uint16Array(t),l,i)}}class ae extends z{constructor(t,l,i){super(new Uint32Array(t),l,i)}}class Al extends z{constructor(t,l,i){super(new Float32Array(t),l,i)}}let de=0;const st=new E,fl=new lt,Mt=new W,it=new O,Ot=new O,D=new W;class pt extends xt{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:de++}),this.uuid=jt(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(t){return Array.isArray(t)?this.index=new(Oi(t)?ae:he)(t,1):this.index=t,this}getAttribute(t){return this.attributes[t]}setAttribute(t,l){return this.attributes[t]=l,this}deleteAttribute(t){return delete this.attributes[t],this}hasAttribute(t){return this.attributes[t]!==void 0}addGroup(t,l,i=0){this.groups.push({start:t,count:l,materialIndex:i})}clearGroups(){this.groups=[]}setDrawRange(t,l){this.drawRange.start=t,this.drawRange.count=l}applyMatrix4(t){const l=this.attributes.position;l!==void 0&&(l.applyMatrix4(t),l.needsUpdate=!0);const i=this.attributes.normal;if(i!==void 0){const n=new Nt().getNormalMatrix(t);i.applyNormalMatrix(n),i.needsUpdate=!0}const e=this.attributes.tangent;return e!==void 0&&(e.transformDirection(t),e.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this}applyQuaternion(t){return st.makeRotationFromQuaternion(t),this.applyMatrix4(st),this}rotateX(t){return st.makeRotationX(t),this.applyMatrix4(st),this}rotateY(t){return st.makeRotationY(t),this.applyMatrix4(st),this}rotateZ(t){return st.makeRotationZ(t),this.applyMatrix4(st),this}translate(t,l,i){return st.makeTranslation(t,l,i),this.applyMatrix4(st),this}scale(t,l,i){return st.makeScale(t,l,i),this.applyMatrix4(st),this}lookAt(t){return fl.lookAt(t),fl.updateMatrix(),this.applyMatrix4(fl.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(Mt).negate(),this.translate(Mt.x,Mt.y,Mt.z),this}setFromPoints(t){const l=[];for(let i=0,e=t.length;i<e;i++){const n=t[i];l.push(n.x,n.y,n.z||0)}return this.setAttribute("position",new Al(l,3)),this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new O);const t=this.attributes.position,l=this.morphAttributes.position;if(t&&t.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',this),this.boundingBox.set(new W(-1/0,-1/0,-1/0),new W(1/0,1/0,1/0));return}if(t!==void 0){if(this.boundingBox.setFromBufferAttribute(t),l)for(let i=0,e=l.length;i<e;i++){const n=l[i];it.setFromBufferAttribute(n),this.morphTargetsRelative?(D.addVectors(this.boundingBox.min,it.min),this.boundingBox.expandByPoint(D),D.addVectors(this.boundingBox.max,it.max),this.boundingBox.expandByPoint(D)):(this.boundingBox.expandByPoint(it.min),this.boundingBox.expandByPoint(it.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new nt);const t=this.attributes.position,l=this.morphAttributes.position;if(t&&t.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',this),this.boundingSphere.set(new W,1/0);return}if(t){const i=this.boundingSphere.center;if(it.setFromBufferAttribute(t),l)for(let n=0,c=l.length;n<c;n++){const Z=l[n];Ot.setFromBufferAttribute(Z),this.morphTargetsRelative?(D.addVectors(it.min,Ot.min),it.expandByPoint(D),D.addVectors(it.max,Ot.max),it.expandByPoint(D)):(it.expandByPoint(Ot.min),it.expandByPoint(Ot.max))}it.getCenter(i);let e=0;for(let n=0,c=t.count;n<c;n++)D.fromBufferAttribute(t,n),e=Math.max(e,i.distanceToSquared(D));if(l)for(let n=0,c=l.length;n<c;n++){const Z=l[n],h=this.morphTargetsRelative;for(let a=0,d=Z.count;a<d;a++)D.fromBufferAttribute(Z,a),h&&(Mt.fromBufferAttribute(t,a),D.add(Mt)),e=Math.max(e,i.distanceToSquared(D))}this.boundingSphere.radius=Math.sqrt(e),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const t=this.index,l=this.attributes;if(t===null||l.position===void 0||l.normal===void 0||l.uv===void 0){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const i=t.array,e=l.position.array,n=l.normal.array,c=l.uv.array,Z=e.length/3;this.hasAttribute("tangent")===!1&&this.setAttribute("tangent",new z(new Float32Array(4*Z),4));const h=this.getAttribute("tangent").array,a=[],d=[];for(let I=0;I<Z;I++)a[I]=new W,d[I]=new W;const m=new W,b=new W,o=new W,r=new ht,G=new ht,u=new ht,Y=new W,X=new W;function g(I,f,j){m.fromArray(e,I*3),b.fromArray(e,f*3),o.fromArray(e,j*3),r.fromArray(c,I*2),G.fromArray(c,f*2),u.fromArray(c,j*2),b.sub(m),o.sub(m),G.sub(r),u.sub(r);const P=1/(G.x*u.y-u.x*G.y);isFinite(P)&&(Y.copy(b).multiplyScalar(u.y).addScaledVector(o,-G.y).multiplyScalar(P),X.copy(o).multiplyScalar(G.x).addScaledVector(b,-u.x).multiplyScalar(P),a[I].add(Y),a[f].add(Y),a[j].add(Y),d[I].add(X),d[f].add(X),d[j].add(X))}let y=this.groups;y.length===0&&(y=[{start:0,count:i.length}]);for(let I=0,f=y.length;I<f;++I){const j=y[I],P=j.start,yt=j.count;for(let T=P,Rt=P+yt;T<Rt;T+=3)g(i[T+0],i[T+1],i[T+2])}const F=new W,J=new W,R=new W,Q=new W;function K(I){R.fromArray(n,I*3),Q.copy(R);const f=a[I];F.copy(f),F.sub(R.multiplyScalar(R.dot(f))).normalize(),J.crossVectors(Q,f);const P=J.dot(d[I])<0?-1:1;h[I*4]=F.x,h[I*4+1]=F.y,h[I*4+2]=F.z,h[I*4+3]=P}for(let I=0,f=y.length;I<f;++I){const j=y[I],P=j.start,yt=j.count;for(let T=P,Rt=P+yt;T<Rt;T+=3)K(i[T+0]),K(i[T+1]),K(i[T+2])}}computeVertexNormals(){const t=this.index,l=this.getAttribute("position");if(l!==void 0){let i=this.getAttribute("normal");if(i===void 0)i=new z(new Float32Array(l.count*3),3),this.setAttribute("normal",i);else for(let b=0,o=i.count;b<o;b++)i.setXYZ(b,0,0,0);const e=new W,n=new W,c=new W,Z=new W,h=new W,a=new W,d=new W,m=new W;if(t)for(let b=0,o=t.count;b<o;b+=3){const r=t.getX(b+0),G=t.getX(b+1),u=t.getX(b+2);e.fromBufferAttribute(l,r),n.fromBufferAttribute(l,G),c.fromBufferAttribute(l,u),d.subVectors(c,n),m.subVectors(e,n),d.cross(m),Z.fromBufferAttribute(i,r),h.fromBufferAttribute(i,G),a.fromBufferAttribute(i,u),Z.add(d),h.add(d),a.add(d),i.setXYZ(r,Z.x,Z.y,Z.z),i.setXYZ(G,h.x,h.y,h.z),i.setXYZ(u,a.x,a.y,a.z)}else for(let b=0,o=l.count;b<o;b+=3)e.fromBufferAttribute(l,b+0),n.fromBufferAttribute(l,b+1),c.fromBufferAttribute(l,b+2),d.subVectors(c,n),m.subVectors(e,n),d.cross(m),i.setXYZ(b+0,d.x,d.y,d.z),i.setXYZ(b+1,d.x,d.y,d.z),i.setXYZ(b+2,d.x,d.y,d.z);this.normalizeNormals(),i.needsUpdate=!0}}merge(){return console.error("THREE.BufferGeometry.merge() has been removed. Use THREE.BufferGeometryUtils.mergeBufferGeometries() instead."),this}normalizeNormals(){const t=this.attributes.normal;for(let l=0,i=t.count;l<i;l++)D.fromBufferAttribute(t,l),D.normalize(),t.setXYZ(l,D.x,D.y,D.z)}toNonIndexed(){function t(Z,h){const a=Z.array,d=Z.itemSize,m=Z.normalized,b=new a.constructor(h.length*d);let o=0,r=0;for(let G=0,u=h.length;G<u;G++){Z.isInterleavedBufferAttribute?o=h[G]*Z.data.stride+Z.offset:o=h[G]*d;for(let Y=0;Y<d;Y++)b[r++]=a[o++]}return new z(b,d,m)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const l=new pt,i=this.index.array,e=this.attributes;for(const Z in e){const h=e[Z],a=t(h,i);l.setAttribute(Z,a)}const n=this.morphAttributes;for(const Z in n){const h=[],a=n[Z];for(let d=0,m=a.length;d<m;d++){const b=a[d],o=t(b,i);h.push(o)}l.morphAttributes[Z]=h}l.morphTargetsRelative=this.morphTargetsRelative;const c=this.groups;for(let Z=0,h=c.length;Z<h;Z++){const a=c[Z];l.addGroup(a.start,a.count,a.materialIndex)}return l}toJSON(){const t={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(t.uuid=this.uuid,t.type=this.type,this.name!==""&&(t.name=this.name),Object.keys(this.userData).length>0&&(t.userData=this.userData),this.parameters!==void 0){const h=this.parameters;for(const a in h)h[a]!==void 0&&(t[a]=h[a]);return t}t.data={attributes:{}};const l=this.index;l!==null&&(t.data.index={type:l.array.constructor.name,array:Array.prototype.slice.call(l.array)});const i=this.attributes;for(const h in i){const a=i[h];t.data.attributes[h]=a.toJSON(t.data)}const e={};let n=!1;for(const h in this.morphAttributes){const a=this.morphAttributes[h],d=[];for(let m=0,b=a.length;m<b;m++){const o=a[m];d.push(o.toJSON(t.data))}d.length>0&&(e[h]=d,n=!0)}n&&(t.data.morphAttributes=e,t.data.morphTargetsRelative=this.morphTargetsRelative);const c=this.groups;c.length>0&&(t.data.groups=JSON.parse(JSON.stringify(c)));const Z=this.boundingSphere;return Z!==null&&(t.data.boundingSphere={center:Z.center.toArray(),radius:Z.radius}),t}clone(){return new this.constructor().copy(this)}copy(t){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const l={};this.name=t.name;const i=t.index;i!==null&&this.setIndex(i.clone(l));const e=t.attributes;for(const a in e){const d=e[a];this.setAttribute(a,d.clone(l))}const n=t.morphAttributes;for(const a in n){const d=[],m=n[a];for(let b=0,o=m.length;b<o;b++)d.push(m[b].clone(l));this.morphAttributes[a]=d}this.morphTargetsRelative=t.morphTargetsRelative;const c=t.groups;for(let a=0,d=c.length;a<d;a++){const m=c[a];this.addGroup(m.start,m.count,m.materialIndex)}const Z=t.boundingBox;Z!==null&&(this.boundingBox=Z.clone());const h=t.boundingSphere;return h!==null&&(this.boundingSphere=h.clone()),this.drawRange.start=t.drawRange.start,this.drawRange.count=t.drawRange.count,this.userData=t.userData,t.parameters!==void 0&&(this.parameters=Object.assign({},t.parameters)),this}dispose(){this.dispatchEvent({type:"dispose"})}}function me(s){const t={};for(const l in s){t[l]={};for(const i in s[l]){const e=s[l][i];e&&(e.isColor||e.isMatrix3||e.isMatrix4||e.isVector2||e.isVector3||e.isVector4||e.isTexture||e.isQuaternion)?t[l][i]=e.clone():Array.isArray(e)?t[l][i]=e.slice():t[l][i]=e}}return t}function be(s){const t=[];for(let l=0;l<s.length;l++)t.push(s[l].clone());return t}var oe=`void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`,re=`void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;class We extends Ul{constructor(t){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader=oe,this.fragmentShader=re,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,t!==void 0&&this.setValues(t)}copy(t){return super.copy(t),this.fragmentShader=t.fragmentShader,this.vertexShader=t.vertexShader,this.uniforms=me(t.uniforms),this.uniformsGroups=be(t.uniformsGroups),this.defines=Object.assign({},t.defines),this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.fog=t.fog,this.lights=t.lights,this.clipping=t.clipping,this.extensions=Object.assign({},t.extensions),this.glslVersion=t.glslVersion,this}toJSON(t){const l=super.toJSON(t);l.glslVersion=this.glslVersion,l.uniforms={};for(const e in this.uniforms){const c=this.uniforms[e].value;c&&c.isTexture?l.uniforms[e]={type:"t",value:c.toJSON(t).uuid}:c&&c.isColor?l.uniforms[e]={type:"c",value:c.getHex()}:c&&c.isVector2?l.uniforms[e]={type:"v2",value:c.toArray()}:c&&c.isVector3?l.uniforms[e]={type:"v3",value:c.toArray()}:c&&c.isVector4?l.uniforms[e]={type:"v4",value:c.toArray()}:c&&c.isMatrix3?l.uniforms[e]={type:"m3",value:c.toArray()}:c&&c.isMatrix4?l.uniforms[e]={type:"m4",value:c.toArray()}:l.uniforms[e]={value:c}}Object.keys(this.defines).length>0&&(l.defines=this.defines),l.vertexShader=this.vertexShader,l.fragmentShader=this.fragmentShader;const i={};for(const e in this.extensions)this.extensions[e]===!0&&(i[e]=!0);return Object.keys(i).length>0&&(l.extensions=i),l}}const Sl=new W,Ge=new W,ue=new Nt;class Ut{constructor(t=new W(1,0,0),l=0){this.isPlane=!0,this.normal=t,this.constant=l}set(t,l){return this.normal.copy(t),this.constant=l,this}setComponents(t,l,i,e){return this.normal.set(t,l,i),this.constant=e,this}setFromNormalAndCoplanarPoint(t,l){return this.normal.copy(t),this.constant=-l.dot(this.normal),this}setFromCoplanarPoints(t,l,i){const e=Sl.subVectors(i,l).cross(Ge.subVectors(t,l)).normalize();return this.setFromNormalAndCoplanarPoint(e,t),this}copy(t){return this.normal.copy(t.normal),this.constant=t.constant,this}normalize(){const t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(t){return this.normal.dot(t)+this.constant}distanceToSphere(t){return this.distanceToPoint(t.center)-t.radius}projectPoint(t,l){return l.copy(this.normal).multiplyScalar(-this.distanceToPoint(t)).add(t)}intersectLine(t,l){const i=t.delta(Sl),e=this.normal.dot(i);if(e===0)return this.distanceToPoint(t.start)===0?l.copy(t.start):null;const n=-(t.start.dot(this.normal)+this.constant)/e;return n<0||n>1?null:l.copy(i).multiplyScalar(n).add(t.start)}intersectsLine(t){const l=this.distanceToPoint(t.start),i=this.distanceToPoint(t.end);return l<0&&i>0||i<0&&l>0}intersectsBox(t){return t.intersectsPlane(this)}intersectsSphere(t){return t.intersectsPlane(this)}coplanarPoint(t){return t.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(t,l){const i=l||ue.getNormalMatrix(t),e=this.coplanarPoint(Sl).applyMatrix4(t),n=this.normal.applyMatrix3(i).normalize();return this.constant=-e.dot(n),this}translate(t){return this.constant-=t.dot(this.normal),this}equals(t){return t.normal.equals(this.normal)&&t.constant===this.constant}clone(){return new this.constructor().copy(this)}}const At=new nt,ol=new W;class Ye{constructor(t=new Ut,l=new Ut,i=new Ut,e=new Ut,n=new Ut,c=new Ut){this.planes=[t,l,i,e,n,c]}set(t,l,i,e,n,c){const Z=this.planes;return Z[0].copy(t),Z[1].copy(l),Z[2].copy(i),Z[3].copy(e),Z[4].copy(n),Z[5].copy(c),this}copy(t){const l=this.planes;for(let i=0;i<6;i++)l[i].copy(t.planes[i]);return this}setFromProjectionMatrix(t){const l=this.planes,i=t.elements,e=i[0],n=i[1],c=i[2],Z=i[3],h=i[4],a=i[5],d=i[6],m=i[7],b=i[8],o=i[9],r=i[10],G=i[11],u=i[12],Y=i[13],X=i[14],g=i[15];return l[0].setComponents(Z-e,m-h,G-b,g-u).normalize(),l[1].setComponents(Z+e,m+h,G+b,g+u).normalize(),l[2].setComponents(Z+n,m+a,G+o,g+Y).normalize(),l[3].setComponents(Z-n,m-a,G-o,g-Y).normalize(),l[4].setComponents(Z-c,m-d,G-r,g-X).normalize(),l[5].setComponents(Z+c,m+d,G+r,g+X).normalize(),this}intersectsObject(t){const l=t.geometry;return l.boundingSphere===null&&l.computeBoundingSphere(),At.copy(l.boundingSphere).applyMatrix4(t.matrixWorld),this.intersectsSphere(At)}intersectsSprite(t){return At.center.set(0,0,0),At.radius=.7071067811865476,At.applyMatrix4(t.matrixWorld),this.intersectsSphere(At)}intersectsSphere(t){const l=this.planes,i=t.center,e=-t.radius;for(let n=0;n<6;n++)if(l[n].distanceToPoint(i)<e)return!1;return!0}intersectsBox(t){const l=this.planes;for(let i=0;i<6;i++){const e=l[i];if(ol.x=e.normal.x>0?t.max.x:t.min.x,ol.y=e.normal.y>0?t.max.y:t.min.y,ol.z=e.normal.z>0?t.max.z:t.min.z,e.distanceToPoint(ol)<0)return!1}return!0}containsPoint(t){const l=this.planes;for(let i=0;i<6;i++)if(l[i].distanceToPoint(t)<0)return!1;return!0}clone(){return new this.constructor().copy(this)}}class Ve extends lt{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.overrideMaterial=null,typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(t,l){return super.copy(t,l),t.background!==null&&(this.background=t.background.clone()),t.environment!==null&&(this.environment=t.environment.clone()),t.fog!==null&&(this.fog=t.fog.clone()),this.backgroundBlurriness=t.backgroundBlurriness,this.backgroundIntensity=t.backgroundIntensity,t.overrideMaterial!==null&&(this.overrideMaterial=t.overrideMaterial.clone()),this.matrixAutoUpdate=t.matrixAutoUpdate,this}toJSON(t){const l=super.toJSON(t);return this.fog!==null&&(l.object.fog=this.fog.toJSON()),this.backgroundBlurriness>0&&(l.object.backgroundBlurriness=this.backgroundBlurriness),this.backgroundIntensity!==1&&(l.object.backgroundIntensity=this.backgroundIntensity),l}get autoUpdate(){return console.warn("THREE.Scene: autoUpdate was renamed to matrixWorldAutoUpdate in r144."),this.matrixWorldAutoUpdate}set autoUpdate(t){console.warn("THREE.Scene: autoUpdate was renamed to matrixWorldAutoUpdate in r144."),this.matrixWorldAutoUpdate=t}}class oi extends ${constructor(t=null,l=1,i=1,e,n,c,Z,h,a=1003,d=1003,m,b){super(null,c,Z,h,a,d,e,n,m,b),this.isDataTexture=!0,this.image={data:t,width:l,height:i},this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class ri extends Ul{constructor(t){super(),this.isLineBasicMaterial=!0,this.type="LineBasicMaterial",this.color=new V(16777215),this.linewidth=1,this.linecap="round",this.linejoin="round",this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.linewidth=t.linewidth,this.linecap=t.linecap,this.linejoin=t.linejoin,this.fog=t.fog,this}}const Wi=new W,Gi=new W,ui=new E,jl=new si,rl=new nt;class pe extends lt{constructor(t=new pt,l=new ri){super(),this.isLine=!0,this.type="Line",this.geometry=t,this.material=l,this.updateMorphTargets()}copy(t,l){return super.copy(t,l),this.material=t.material,this.geometry=t.geometry,this}computeLineDistances(){const t=this.geometry;if(t.index===null){const l=t.attributes.position,i=[0];for(let e=1,n=l.count;e<n;e++)Wi.fromBufferAttribute(l,e-1),Gi.fromBufferAttribute(l,e),i[e]=i[e-1],i[e]+=Wi.distanceTo(Gi);t.setAttribute("lineDistance",new Al(i,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}raycast(t,l){const i=this.geometry,e=this.matrixWorld,n=t.params.Line.threshold,c=i.drawRange;if(i.boundingSphere===null&&i.computeBoundingSphere(),rl.copy(i.boundingSphere),rl.applyMatrix4(e),rl.radius+=n,t.ray.intersectsSphere(rl)===!1)return;ui.copy(e).invert(),jl.copy(t.ray).applyMatrix4(ui);const Z=n/((this.scale.x+this.scale.y+this.scale.z)/3),h=Z*Z,a=new W,d=new W,m=new W,b=new W,o=this.isLineSegments?2:1,r=i.index,u=i.attributes.position;if(r!==null){const Y=Math.max(0,c.start),X=Math.min(r.count,c.start+c.count);for(let g=Y,y=X-1;g<y;g+=o){const F=r.getX(g),J=r.getX(g+1);if(a.fromBufferAttribute(u,F),d.fromBufferAttribute(u,J),jl.distanceSqToSegment(a,d,b,m)>h)continue;b.applyMatrix4(this.matrixWorld);const Q=t.ray.origin.distanceTo(b);Q<t.near||Q>t.far||l.push({distance:Q,point:m.clone().applyMatrix4(this.matrixWorld),index:g,face:null,faceIndex:null,object:this})}}else{const Y=Math.max(0,c.start),X=Math.min(u.count,c.start+c.count);for(let g=Y,y=X-1;g<y;g+=o){if(a.fromBufferAttribute(u,g),d.fromBufferAttribute(u,g+1),jl.distanceSqToSegment(a,d,b,m)>h)continue;b.applyMatrix4(this.matrixWorld);const J=t.ray.origin.distanceTo(b);J<t.near||J>t.far||l.push({distance:J,point:m.clone().applyMatrix4(this.matrixWorld),index:g,face:null,faceIndex:null,object:this})}}}updateMorphTargets(){const l=this.geometry.morphAttributes,i=Object.keys(l);if(i.length>0){const e=l[i[0]];if(e!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let n=0,c=e.length;n<c;n++){const Z=e[n].name||String(n);this.morphTargetInfluences.push(0),this.morphTargetDictionary[Z]=n}}}}}const Yi=new W,Vi=new W;class Xe extends pe{constructor(t,l){super(t,l),this.isLineSegments=!0,this.type="LineSegments"}computeLineDistances(){const t=this.geometry;if(t.index===null){const l=t.attributes.position,i=[];for(let e=0,n=l.count;e<n;e+=2)Yi.fromBufferAttribute(l,e),Vi.fromBufferAttribute(l,e+1),i[e]=e===0?0:i[e-1],i[e+1]=i[e]+Yi.distanceTo(Vi);t.setAttribute("lineDistance",new Al(i,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}}class ge extends Ul{constructor(t){super(),this.isPointsMaterial=!0,this.type="PointsMaterial",this.color=new V(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.size=t.size,this.sizeAttenuation=t.sizeAttenuation,this.fog=t.fog,this}}const pi=new E,Pl=new si,Wl=new nt,Gl=new W;class Xi extends lt{constructor(t=new pt,l=new ge){super(),this.isPoints=!0,this.type="Points",this.geometry=t,this.material=l,this.updateMorphTargets()}copy(t,l){return super.copy(t,l),this.material=t.material,this.geometry=t.geometry,this}raycast(t,l){const i=this.geometry,e=this.matrixWorld,n=t.params.Points.threshold,c=i.drawRange;if(i.boundingSphere===null&&i.computeBoundingSphere(),Wl.copy(i.boundingSphere),Wl.applyMatrix4(e),Wl.radius+=n,t.ray.intersectsSphere(Wl)===!1)return;pi.copy(e).invert(),Pl.copy(t.ray).applyMatrix4(pi);const Z=n/((this.scale.x+this.scale.y+this.scale.z)/3),h=Z*Z,a=i.index,m=i.attributes.position;if(a!==null){const b=Math.max(0,c.start),o=Math.min(a.count,c.start+c.count);for(let r=b,G=o;r<G;r++){const u=a.getX(r);Gl.fromBufferAttribute(m,u),gi(Gl,u,h,e,t,l,this)}}else{const b=Math.max(0,c.start),o=Math.min(m.count,c.start+c.count);for(let r=b,G=o;r<G;r++)Gl.fromBufferAttribute(m,r),gi(Gl,r,h,e,t,l,this)}}updateMorphTargets(){const l=this.geometry.morphAttributes,i=Object.keys(l);if(i.length>0){const e=l[i[0]];if(e!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let n=0,c=e.length;n<c;n++){const Z=e[n].name||String(n);this.morphTargetInfluences.push(0),this.morphTargetDictionary[Z]=n}}}}}function gi(s,t,l,i,e,n,c){const Z=Pl.distanceSqToPoint(s);if(Z<l){const h=new W;Pl.closestPointToPoint(s,h),h.applyMatrix4(i);const a=e.ray.origin.distanceTo(h);if(a<e.near||a>e.far)return;n.push({distance:a,distanceToRay:Math.sqrt(Z),point:h,index:t,face:null,object:c})}}class ye extends ${constructor(t,l,i,e,n,c,Z,h,a){super(t,l,i,e,n,c,Z,h,a),this.isCanvasTexture=!0,this.needsUpdate=!0}}class Re extends We{constructor(t){super(t),this.isRawShaderMaterial=!0,this.type="RawShaderMaterial"}}typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:zt}})),typeof window<"u"&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=zt);class yi{constructor(t,l){this.loader=t,this.boundingBox=l,this.url=null,this.pointAttributes=null,this.spacing=0,this.numNodesLoading=0,this.maxNumNodesLoading=3,this.disposed=!1,this.tightBoundingBox=this.boundingBox.clone(),this.boundingSphere=this.boundingBox.getBoundingSphere(new nt),this.tightBoundingSphere=this.boundingBox.getBoundingSphere(new nt)}dispose(){this.root.traverse(t=>t.dispose()),this.disposed=!0}}const Ri=0,xi=0,Ni=1,xe=50,Ne=50,Fe=2,Je=15,Be=1e6,Fi=2,Ie=4,Ji="PerspectiveCamera",Ce=new V(0,0,0),ze=new H(1,0,0,1);var Xt=(s=>(s[s.DISABLED=0]="DISABLED",s[s.CLIP_OUTSIDE=1]="CLIP_OUTSIDE",s[s.HIGHLIGHT_INSIDE=2]="HIGHLIGHT_INSIDE",s))(Xt||{}),ft=(s=>(s[s.FIXED=0]="FIXED",s[s.ATTENUATED=1]="ATTENUATED",s[s.ADAPTIVE=2]="ADAPTIVE",s))(ft||{}),Kt=(s=>(s[s.SQUARE=0]="SQUARE",s[s.CIRCLE=1]="CIRCLE",s[s.PARABOLOID=2]="PARABOLOID",s))(Kt||{}),_t=(s=>(s[s.OCTREE=0]="OCTREE",s[s.KDTREE=1]="KDTREE",s))(_t||{}),ul=(s=>(s[s.FIXED=0]="FIXED",s[s.ATTENUATED=1]="ATTENUATED",s))(ul||{}),k=(s=>(s[s.RGB=0]="RGB",s[s.COLOR=1]="COLOR",s[s.DEPTH=2]="DEPTH",s[s.HEIGHT=3]="HEIGHT",s[s.ELEVATION=3]="ELEVATION",s[s.INTENSITY=4]="INTENSITY",s[s.INTENSITY_GRADIENT=5]="INTENSITY_GRADIENT",s[s.LOD=6]="LOD",s[s.LEVEL_OF_DETAIL=6]="LEVEL_OF_DETAIL",s[s.POINT_INDEX=7]="POINT_INDEX",s[s.CLASSIFICATION=8]="CLASSIFICATION",s[s.RETURN_NUMBER=9]="RETURN_NUMBER",s[s.SOURCE=10]="SOURCE",s[s.NORMAL=11]="NORMAL",s[s.PHONG=12]="PHONG",s[s.RGB_HEIGHT=13]="RGB_HEIGHT",s[s.COMPOSITE=50]="COMPOSITE",s))(k||{}),we=`#version 300 es

precision highp float;\r
precision highp int;

#define max_clip_boxes 30

in vec3 position;\r
in vec3 normal;\r
in float intensity;\r
in float classification;\r
in float returnNumber;\r
in float numberOfReturns;\r
in float pointSourceID;\r
in vec4 indices;

uniform mat4 modelMatrix;\r
uniform mat4 modelViewMatrix;\r
uniform mat4 projectionMatrix;\r
uniform mat4 viewMatrix;\r
uniform mat3 normalMatrix;

uniform float pcIndex;

uniform float screenWidth;\r
uniform float screenHeight;\r
uniform float fov;\r
uniform float spacing;

#if defined use_clip_box\r
	uniform mat4 clipBoxes[max_clip_boxes];\r
#endif

uniform float heightMin;\r
uniform float heightMax;\r
uniform float size; 
uniform float minSize; 
uniform float maxSize; 
uniform float octreeSize;\r
uniform vec3 bbSize;\r
uniform vec3 uColor;\r
uniform float opacity;\r
uniform float clipBoxCount;\r
uniform float level;\r
uniform float vnStart;\r
uniform bool isLeafNode;

uniform float filterByNormalThreshold;\r
uniform vec2 intensityRange;\r
uniform float opacityAttenuation;\r
uniform float intensityGamma;\r
uniform float intensityContrast;\r
uniform float intensityBrightness;\r
uniform float rgbGamma;\r
uniform float rgbContrast;\r
uniform float rgbBrightness;\r
uniform float transition;\r
uniform float wRGB;\r
uniform float wIntensity;\r
uniform float wElevation;\r
uniform float wClassification;\r
uniform float wReturnNumber;\r
uniform float wSourceID;

uniform sampler2D visibleNodes;\r
uniform sampler2D gradient;\r
uniform sampler2D classificationLUT;\r
uniform sampler2D depthMap;

#ifdef highlight_point\r
	uniform vec3 highlightedPointCoordinate;\r
	uniform bool enablePointHighlighting;\r
	uniform float highlightedPointScale;\r
#endif

#ifdef new_format\r
	in vec4 rgba;\r
	out vec4 vColor;\r
#else\r
	in vec3 color;\r
	out vec3 vColor;\r
#endif

#if !defined(color_type_point_index)\r
	out float vOpacity;\r
#endif

#if defined(weighted_splats)\r
	out float vLinearDepth;\r
#endif

#if !defined(paraboloid_point_shape) && defined(use_edl)\r
	out float vLogDepth;\r
#endif

#if defined(color_type_phong) && (MAX_POINT_LIGHTS > 0 || MAX_DIR_LIGHTS > 0) || defined(paraboloid_point_shape)\r
	out vec3 vViewPosition;\r
#endif

#if defined(weighted_splats) || defined(paraboloid_point_shape)\r
	out float vRadius;\r
#endif

#if defined(color_type_phong) && (MAX_POINT_LIGHTS > 0 || MAX_DIR_LIGHTS > 0)\r
	out vec3 vNormal;\r
#endif

#ifdef highlight_point\r
	out float vHighlight;\r
#endif\r
 \r

#if (defined(adaptive_point_size) || defined(color_type_lod)) && defined(tree_type_octree)\r

int numberOfOnes(int number, int index) {\r
	int numOnes = 0;\r
	int tmp = 128;\r
	for (int i = 7; i >= 0; i--) {

		if (number >= tmp) {\r
			number = number - tmp;

			if (i <= index) {\r
				numOnes++;\r
			}\r
		}

		tmp = tmp / 2;\r
	}

	return numOnes;\r
}

/**\r
 * Checks whether the bit at index is 1.0\r
 *\r
 * number is treated as if it were an integer in the range 0-255\r
 */\r
bool isBitSet(int number, int index){

	
	int powi = 1;\r
	if (index == 0) {\r
		powi = 1;\r
	} else if (index == 1) {\r
		powi = 2;\r
	} else if (index == 2) {\r
		powi = 4;\r
	} else if (index == 3) {\r
		powi = 8;\r
	} else if (index == 4) {\r
		powi = 16;\r
	} else if (index == 5) {\r
		powi = 32;\r
	} else if (index == 6) {\r
		powi = 64;\r
	} else if (index == 7) {\r
		powi = 128;\r
	}

	int ndp = number / powi;

	return mod(float(ndp), 2.0) != 0.0;\r
}

/**\r
 * Gets the the LOD at the point position.\r
 */\r
float getLOD() {\r
	vec3 offset = vec3(0.0, 0.0, 0.0);\r
	int iOffset = int(vnStart);\r
	float depth = level;

	for (float i = 0.0; i <= 30.0; i++) {\r
		float nodeSizeAtLevel = octreeSize  / pow(2.0, i + level + 0.0);\r
		\r
		vec3 index3d = (position-offset) / nodeSizeAtLevel;\r
		index3d = floor(index3d + 0.5);\r
		int index = int(round(4.0 * index3d.x + 2.0 * index3d.y + index3d.z));\r
		\r
		vec4 value = texture(visibleNodes, vec2(float(iOffset) / 2048.0, 0.0));\r
		int mask = int(round(value.r * 255.0));

		if (isBitSet(mask, index)) {\r
			
			int advanceG = int(round(value.g * 255.0)) * 256;\r
			int advanceB = int(round(value.b * 255.0));\r
			int advanceChild = numberOfOnes(mask, index - 1);\r
			int advance = advanceG + advanceB + advanceChild;

			iOffset = iOffset + advance;

			depth++;\r
		} else {\r
			return value.a * 255.0; 
		}\r
		\r
		offset = offset + (vec3(1.0, 1.0, 1.0) * nodeSizeAtLevel * 0.5) * index3d;  \r
	}\r
		\r
	return depth;\r
}

float getPointSizeAttenuation() {\r
	return 0.5 * pow(2.0, getLOD());\r
}

#endif\r

#if (defined(adaptive_point_size) || defined(color_type_lod)) && defined(tree_type_kdtree)

float getLOD() {\r
	vec3 offset = vec3(0.0, 0.0, 0.0);\r
	float intOffset = 0.0;\r
	float depth = 0.0;\r
			\r
	vec3 size = bbSize;	\r
	vec3 pos = position;\r
		\r
	for (float i = 0.0; i <= 1000.0; i++) {\r
		\r
		vec4 value = texture(visibleNodes, vec2(intOffset / 2048.0, 0.0));\r
		\r
		int children = int(value.r * 255.0);\r
		float next = value.g * 255.0;\r
		int split = int(value.b * 255.0);\r
		\r
		if (next == 0.0) {\r
		 	return depth;\r
		}\r
		\r
		vec3 splitv = vec3(0.0, 0.0, 0.0);\r
		if (split == 1) {\r
			splitv.x = 1.0;\r
		} else if (split == 2) {\r
		 	splitv.y = 1.0;\r
		} else if (split == 4) {\r
		 	splitv.z = 1.0;\r
		}\r
		\r
		intOffset = intOffset + next;\r
		\r
		float factor = length(pos * splitv / size);\r
		if (factor < 0.5) {\r
		 	
			if (children == 0 || children == 2) {\r
				return depth;\r
			}\r
		} else {\r
			
			pos = pos - size * splitv * 0.5;\r
			if (children == 0 || children == 1) {\r
				return depth;\r
			}\r
			if (children == 3) {\r
				intOffset = intOffset + 1.0;\r
			}\r
		}\r
		size = size * ((1.0 - (splitv + 1.0) / 2.0) + 0.5);\r
		\r
		depth++;\r
	}\r
		\r
		\r
	return depth;	\r
}

float getPointSizeAttenuation() {\r
	return 0.5 * pow(1.3, getLOD());\r
}

#endif

float getContrastFactor(float contrast) {\r
	return (1.0158730158730156 * (contrast + 1.0)) / (1.0158730158730156 - contrast);\r
}

#ifndef new_format

vec3 getRGB() {\r
	#if defined(use_rgb_gamma_contrast_brightness)\r
	  vec3 rgb = color;\r
		rgb = pow(rgb, vec3(rgbGamma));\r
		rgb = rgb + rgbBrightness;\r
		rgb = (rgb - 0.5) * getContrastFactor(rgbContrast) + 0.5;\r
		rgb = clamp(rgb, 0.0, 1.0);\r
		return rgb;\r
	#else\r
		return color;\r
	#endif\r
}

#endif

float getIntensity() {\r
	float w = (intensity - intensityRange.x) / (intensityRange.y - intensityRange.x);\r
	w = pow(w, intensityGamma);\r
	w = w + intensityBrightness;\r
	w = (w - 0.5) * getContrastFactor(intensityContrast) + 0.5;\r
	w = clamp(w, 0.0, 1.0);\r
	\r
	return w;\r
}

vec3 getElevation() {\r
	vec4 world = modelMatrix * vec4( position, 1.0 );\r
	float w = (world.z - heightMin) / (heightMax-heightMin);\r
	vec3 cElevation = texture(gradient, vec2(w,1.0-w)).rgb;\r
	\r
	return cElevation;\r
}

vec4 getClassification() {\r
	vec2 uv = vec2(classification / 255.0, 0.5);\r
	vec4 classColor = texture(classificationLUT, uv);\r
	\r
	return classColor;\r
}

vec3 getReturnNumber() {\r
	if (numberOfReturns == 1.0) {\r
		return vec3(1.0, 1.0, 0.0);\r
	} else {\r
		if (returnNumber == 1.0) {\r
			return vec3(1.0, 0.0, 0.0);\r
		} else if (returnNumber == numberOfReturns) {\r
			return vec3(0.0, 0.0, 1.0);\r
		} else {\r
			return vec3(0.0, 1.0, 0.0);\r
		}\r
	}\r
}

vec3 getSourceID() {\r
	float w = mod(pointSourceID, 10.0) / 10.0;\r
	return texture(gradient, vec2(w, 1.0 - w)).rgb;\r
}

#ifndef new_format

vec3 getCompositeColor() {\r
	vec3 c;\r
	float w;

	c += wRGB * getRGB();\r
	w += wRGB;\r
	\r
	c += wIntensity * getIntensity() * vec3(1.0, 1.0, 1.0);\r
	w += wIntensity;\r
	\r
	c += wElevation * getElevation();\r
	w += wElevation;\r
	\r
	c += wReturnNumber * getReturnNumber();\r
	w += wReturnNumber;\r
	\r
	c += wSourceID * getSourceID();\r
	w += wSourceID;\r
	\r
	vec4 cl = wClassification * getClassification();\r
	c += cl.a * cl.rgb;\r
	w += wClassification * cl.a;

	c = c / w;\r
	\r
	if (w == 0.0) {\r
		gl_Position = vec4(100.0, 100.0, 100.0, 0.0);\r
	}\r
	\r
	return c;\r
}

#endif

#ifdef new_format\r
	vec4 fromLinear(vec4 linearRGB) {\r
		bvec4 cutoff = lessThan(linearRGB, vec4(0.0031308));\r
		vec4 higher = vec4(1.055)*pow(linearRGB, vec4(1.0/2.4)) - vec4(0.055);\r
		vec4 lower = linearRGB * vec4(12.92);\r
		return mix(higher, lower, cutoff);\r
	} \r
	vec4 toLinear(vec4 sRGB) {\r
		bvec4 cutoff = lessThan(sRGB, vec4(0.04045));\r
		vec4 higher = pow((sRGB + vec4(0.055))/vec4(1.055), vec4(2.4));\r
		vec4 lower = sRGB/vec4(12.92);\r
		return mix(higher, lower, cutoff);\r
	}\r
#else\r
	vec3 fromLinear(vec3 linearRGB) {\r
		bvec3 cutoff = lessThan(linearRGB, vec3(0.0031308));\r
		vec3 higher = vec3(1.055)*pow(linearRGB, vec3(1.0/2.4)) - vec3(0.055);\r
		vec3 lower = linearRGB * vec3(12.92);\r
		return mix(higher, lower, cutoff);\r
	}\r
	vec3 toLinear(vec3 sRGB) {\r
		bvec3 cutoff = lessThan(sRGB, vec3(0.04045));\r
		vec3 higher = pow((sRGB + vec3(0.055))/vec3(1.055), vec3(2.4));\r
		vec3 lower = sRGB/vec3(12.92);\r
		return mix(higher, lower, cutoff);\r
	}\r
#endif\r

void main() {\r
	vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);

	gl_Position = projectionMatrix * mvPosition;

	#if defined(color_type_phong) && (MAX_POINT_LIGHTS > 0 || MAX_DIR_LIGHTS > 0) || defined(paraboloid_point_shape)\r
		vViewPosition = mvPosition.xyz;\r
	#endif

	#if defined weighted_splats\r
		vLinearDepth = gl_Position.w;\r
	#endif

	#if defined(color_type_phong) && (MAX_POINT_LIGHTS > 0 || MAX_DIR_LIGHTS > 0)\r
		vNormal = normalize(normalMatrix * normal);\r
	#endif

	#if !defined(paraboloid_point_shape) && defined(use_edl)\r
		vLogDepth = log2(-mvPosition.z);\r
	#endif

	
	
	

	float pointSize = 1.0;\r
	float slope = tan(fov / 2.0);\r
	float projFactor =  -0.5 * screenHeight / (slope * mvPosition.z);

	#if defined fixed_point_size\r
		pointSize = size;\r
	#elif defined attenuated_point_size\r
		pointSize = size * spacing * projFactor;\r
	#elif defined adaptive_point_size\r
		float worldSpaceSize = 2.0 * size * spacing / getPointSizeAttenuation();\r
		pointSize = worldSpaceSize * projFactor;\r
	#endif

	pointSize = max(minSize, pointSize);\r
	pointSize = min(maxSize, pointSize);

	#if defined(weighted_splats) || defined(paraboloid_point_shape)\r
		vRadius = pointSize / projFactor;\r
	#endif

	gl_PointSize = pointSize;

	
	
	

	#ifdef highlight_point\r
		vec4 mPosition = modelMatrix * vec4(position, 1.0);\r
		if (enablePointHighlighting && abs(mPosition.x - highlightedPointCoordinate.x) < 0.0001 &&\r
			abs(mPosition.y - highlightedPointCoordinate.y) < 0.0001 &&\r
			abs(mPosition.z - highlightedPointCoordinate.z) < 0.0001) {\r
			vHighlight = 1.0;\r
			gl_PointSize = pointSize * highlightedPointScale;\r
		} else {\r
			vHighlight = 0.0;\r
		}\r
	#endif

	
	
	

	#ifndef color_type_point_index\r
		#ifdef attenuated_opacity\r
			vOpacity = opacity * exp(-length(-mvPosition.xyz) / opacityAttenuation);\r
		#else\r
			vOpacity = opacity;\r
		#endif\r
	#endif

	
	
	

	#ifdef use_filter_by_normal\r
		if(abs((modelViewMatrix * vec4(normal, 0.0)).z) > filterByNormalThreshold) {\r
			
			gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\r
		}\r
	#endif

	
	
	
	#ifdef new_format\r
		vColor = rgba;\r
	#elif defined color_type_rgb\r
		vColor = getRGB();\r
	#elif defined color_type_height\r
		vColor = getElevation();\r
	#elif defined color_type_rgb_height\r
		vec3 cHeight = getElevation();\r
		vColor = (1.0 - transition) * getRGB() + transition * cHeight;\r
	#elif defined color_type_depth\r
		float linearDepth = -mvPosition.z ;\r
		float expDepth = (gl_Position.z / gl_Position.w) * 0.5 + 0.5;\r
		vColor = vec3(linearDepth, expDepth, 0.0);\r
	#elif defined color_type_intensity\r
		float w = getIntensity();\r
		vColor = vec3(w, w, w);\r
	#elif defined color_type_intensity_gradient\r
		float w = getIntensity();\r
		vColor = texture(gradient, vec2(w, 1.0 - w)).rgb;\r
	#elif defined color_type_color\r
		vColor = uColor;\r
	#elif defined color_type_lod\r
	float w = getLOD() / 10.0;\r
	vColor = texture(gradient, vec2(w, 1.0 - w)).rgb;\r
	#elif defined color_type_point_index\r
		vColor = indices.rgb;\r
	#elif defined color_type_classification\r
	  vec4 cl = getClassification(); \r
		vColor = cl.rgb;\r
	#elif defined color_type_return_number\r
		vColor = getReturnNumber();\r
	#elif defined color_type_source\r
		vColor = getSourceID();\r
	#elif defined color_type_normal\r
		vColor = (modelMatrix * vec4(normal, 0.0)).xyz;\r
	#elif defined color_type_phong\r
		vColor = color;\r
	#elif defined color_type_composite\r
		vColor = getCompositeColor();\r
	#endif\r
	\r
	#if !defined color_type_composite && defined color_type_classification\r
		if (cl.a == 0.0) {\r
			gl_Position = vec4(100.0, 100.0, 100.0, 0.0);\r
			return;\r
		}\r
	#endif

	
	
	

	#if defined use_clip_box\r
		bool insideAny = false;\r
		for (int i = 0; i < max_clip_boxes; i++) {\r
			if (i == int(clipBoxCount)) {\r
				break;\r
			}\r
		\r
			vec4 clipPosition = clipBoxes[i] * modelMatrix * vec4(position, 1.0);\r
			bool inside = -0.5 <= clipPosition.x && clipPosition.x <= 0.5;\r
			inside = inside && -0.5 <= clipPosition.y && clipPosition.y <= 0.5;\r
			inside = inside && -0.5 <= clipPosition.z && clipPosition.z <= 0.5;\r
			insideAny = insideAny || inside;\r
		}

		if (!insideAny) {\r
			#if defined clip_outside\r
				gl_Position = vec4(1000.0, 1000.0, 1000.0, 1.0);\r
			#elif defined clip_highlight_inside && !defined(color_type_depth)\r
				float c = (vColor.r + vColor.g + vColor.b) / 6.0;\r
			#endif\r
		} else {\r
			#if defined clip_highlight_inside\r
				vColor.r += 0.5;\r
			#endif\r
		}\r
	#endif

	
	
	
	
	

	#if defined(output_color_encoding_sRGB) && defined(input_color_encoding_linear)\r
		vColor = toLinear(vColor);\r
	#endif

	#if defined(output_color_encoding_linear) && defined(input_color_encoding_sRGB)\r
		vColor = fromLinear(vColor);\r
	#endif\r
}`,Qe=`#version 300 es

precision highp float;\r
precision highp int;

uniform mat4 viewMatrix;\r
uniform vec3 cameraPosition;

uniform mat4 projectionMatrix;\r
uniform float opacity;

uniform float blendHardness;\r
uniform float blendDepthSupplement;\r
uniform float fov;\r
uniform float spacing;\r
uniform float pcIndex;\r
uniform float screenWidth;\r
uniform float screenHeight;

uniform sampler2D depthMap;

out vec4 fragColor;

#ifdef highlight_point\r
	uniform vec4 highlightedPointColor;\r
#endif

#ifdef new_format\r
	in vec4 vColor;\r
#else\r
	in vec3 vColor;\r
#endif

#if !defined(color_type_point_index)\r
	in float vOpacity;\r
#endif

#if defined(weighted_splats)\r
	in float vLinearDepth;\r
#endif

#if !defined(paraboloid_point_shape) && defined(use_edl)\r
	in float vLogDepth;\r
#endif

#if defined(color_type_phong) && (MAX_POINT_LIGHTS > 0 || MAX_DIR_LIGHTS > 0) || defined(paraboloid_point_shape)\r
	in vec3 vViewPosition;\r
#endif

#if defined(weighted_splats) || defined(paraboloid_point_shape)\r
	in float vRadius;\r
#endif

#if defined(color_type_phong) && (MAX_POINT_LIGHTS > 0 || MAX_DIR_LIGHTS > 0)\r
	in vec3 vNormal;\r
#endif

#ifdef highlight_point\r
	in float vHighlight;\r
#endif

float specularStrength = 1.0;

void main() {

	#ifdef new_format\r
		
		vec3 actualColor = vColor.xyz;\r
	#else\r
		
		vec3 actualColor = vColor;\r
	#endif\r
	\r
	vec3 color = actualColor;\r
	float depth = gl_FragCoord.z;

	#if defined(circle_point_shape) || defined(paraboloid_point_shape) || defined (weighted_splats)\r
		float u = 2.0 * gl_PointCoord.x - 1.0;\r
		float v = 2.0 * gl_PointCoord.y - 1.0;\r
	#endif\r
	\r
	#if defined(circle_point_shape) || defined (weighted_splats)\r
		float cc = u*u + v*v;\r
		if(cc > 1.0){\r
			discard;\r
		}\r
	#endif

	#if defined weighted_splats\r
		vec2 uv = gl_FragCoord.xy / vec2(screenWidth, screenHeight);\r
		float sDepth = texture2D(depthMap, uv).r;\r
		if(vLinearDepth > sDepth + vRadius + blendDepthSupplement){\r
			discard;\r
		}\r
	#endif\r
		\r
	#if defined color_type_point_index\r
		fragColor = vec4(color, pcIndex / 255.0);\r
	#else\r
		fragColor = vec4(color, vOpacity);\r
	#endif

	#if defined(color_type_phong)\r
		#if MAX_POINT_LIGHTS > 0 || MAX_DIR_LIGHTS > 0\r
			vec3 normal = normalize( vNormal );\r
			normal.z = abs(normal.z);

			vec3 viewPosition = normalize( vViewPosition );\r
		#endif

		
	\r
		#if MAX_POINT_LIGHTS > 0

			vec3 pointDiffuse = vec3( 0.0 );\r
			vec3 pointSpecular = vec3( 0.0 );

			for ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {

				vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\r
				vec3 lVector = lPosition.xyz + vViewPosition.xyz;

				float lDistance = 1.0;\r
				if ( pointLightDistance[ i ] > 0.0 )\r
					lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );

				lVector = normalize( lVector );

						

				float dotProduct = dot( normal, lVector );

				#ifdef WRAP_AROUND

					float pointDiffuseWeightFull = max( dotProduct, 0.0 );\r
					float pointDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );

					vec3 pointDiffuseWeight = mix( vec3( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );

				#else

					float pointDiffuseWeight = max( dotProduct, 0.0 );

				#endif

				pointDiffuse += diffuse * pointLightColor[ i ] * pointDiffuseWeight * lDistance;

				

				vec3 pointHalfVector = normalize( lVector + viewPosition );\r
				float pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\r
				float pointSpecularWeight = specularStrength * max( pow( pointDotNormalHalf, shininess ), 0.0 );

				float specularNormalization = ( shininess + 2.0 ) / 8.0;

				vec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVector, pointHalfVector ), 0.0 ), 5.0 );\r
				pointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance * specularNormalization;\r
				pointSpecular = vec3(0.0, 0.0, 0.0);\r
			}\r
		\r
		#endif\r
		\r
		#if MAX_DIR_LIGHTS > 0

			vec3 dirDiffuse = vec3( 0.0 );\r
			vec3 dirSpecular = vec3( 0.0 );

			for( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {

				vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\r
				vec3 dirVector = normalize( lDirection.xyz );

						

				float dotProduct = dot( normal, dirVector );

				#ifdef WRAP_AROUND

					float dirDiffuseWeightFull = max( dotProduct, 0.0 );\r
					float dirDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );

					vec3 dirDiffuseWeight = mix( vec3( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), wrapRGB );

				#else

					float dirDiffuseWeight = max( dotProduct, 0.0 );

				#endif

				dirDiffuse += diffuse * directionalLightColor[ i ] * dirDiffuseWeight;

				

				vec3 dirHalfVector = normalize( dirVector + viewPosition );\r
				float dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\r
				float dirSpecularWeight = specularStrength * max( pow( dirDotNormalHalf, shininess ), 0.0 );

				float specularNormalization = ( shininess + 2.0 ) / 8.0;

				vec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( dirVector, dirHalfVector ), 0.0 ), 5.0 );\r
				dirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\r
			}

		#endif\r
		\r
		vec3 totalDiffuse = vec3( 0.0 );\r
		vec3 totalSpecular = vec3( 0.0 );\r
		\r
		#if MAX_POINT_LIGHTS > 0

			totalDiffuse += pointDiffuse;\r
			totalSpecular += pointSpecular;

		#endif\r
		\r
		#if MAX_DIR_LIGHTS > 0

			totalDiffuse += dirDiffuse;\r
			totalSpecular += dirSpecular;

		#endif\r
		\r
		gl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient ) + totalSpecular;

	#endif\r
	\r
	#if defined weighted_splats\r
	    
		\r
		float wx = 2.0 * length(2.0 * gl_PointCoord - 1.0);\r
		float w = exp(-wx * wx * 0.5);\r
		\r
		
		
		\r
		gl_FragColor.rgb = gl_FragColor.rgb * w;\r
		gl_FragColor.a = w;\r
	#endif\r
	\r
	#if defined paraboloid_point_shape\r
		float wi = 0.0 - ( u*u + v*v);\r
		vec4 pos = vec4(vViewPosition, 1.0);\r
		pos.z += wi * vRadius;\r
		float linearDepth = -pos.z;\r
		pos = projectionMatrix * pos;\r
		pos = pos / pos.w;\r
		float expDepth = pos.z;\r
		depth = (pos.z + 1.0) / 2.0;\r
		gl_FragDepth = depth;\r
		\r
		#if defined(color_type_depth)\r
			gl_FragColor.r = linearDepth;\r
			gl_FragColor.g = expDepth;\r
		#endif\r
		\r
		#if defined(use_edl)\r
			gl_FragColor.a = log2(linearDepth);\r
		#endif\r
		\r
	#else\r
		#if defined(use_edl)\r
			gl_FragColor.a = vLogDepth;\r
		#endif\r
	#endif

	#ifdef highlight_point\r
		if (vHighlight > 0.0) {\r
			gl_FragColor = highlightedPointColor;\r
		}\r
	#endif\r
}`;function Tl(s){return parseInt(s.charAt(s.length-1),10)}function ve(s,t){const l=s.name,i=t.name;return l.length!==i.length?l.length-i.length:l<i?-1:l>i?1:0}const Bi={0:new H(.5,.5,.5,1),1:new H(.5,.5,.5,1),2:new H(.63,.32,.18,1),3:new H(0,1,0,1),4:new H(0,.8,0,1),5:new H(0,.6,0,1),6:new H(1,.66,0,1),7:new H(1,0,1,1),8:new H(1,0,0,1),9:new H(0,0,1,1),12:new H(1,1,0,1),DEFAULT:new H(.3,.6,.6,.5)};new V(0,0,0),new V(1,1,1),new V(.077,.042,.206),new V(.225,.036,.388),new V(.373,.074,.432),new V(.522,.128,.42),new V(.665,.182,.37),new V(.797,.255,.287),new V(.902,.364,.184),new V(.969,.516,.063),new V(.988,.683,.072),new V(.961,.859,.298),new V(.988,.998,.645),new V(.241,.015,.61),new V(.387,.001,.654),new V(.524,.025,.653),new V(.651,.125,.596),new V(.752,.227,.513),new V(.837,.329,.431),new V(.907,.435,.353),new V(.963,.554,.272),new V(.992,.681,.195),new V(.987,.822,.144),new V(.94,.975,.131),new V(.278,0,.714),1/6,new V(0,0,1),2/6,new V(0,1,1),3/6,new V(0,1,0),4/6,new V(1,1,0),5/6,new V(1,.64,0),new V(1,0,0);const ke=[[0,new V(.3686,.3098,.6353)],[.1,new V(.1961,.5333,.7412)],[.2,new V(.4,.7608,.6471)],[.3,new V(.6706,.8667,.6431)],[.4,new V(.902,.9608,.5961)],[.5,new V(1,1,.749)],[.6,new V(.9961,.8784,.5451)],[.7,new V(.9922,.6824,.3804)],[.8,new V(.9569,.4275,.2627)],[.9,new V(.8353,.2431,.3098)],[1,new V(.6196,.0039,.2588)]];new V(.267,.005,.329),new V(.283,.141,.458),new V(.254,.265,.53),new V(.207,.372,.553),new V(.164,.471,.558),new V(.128,.567,.551),new V(.135,.659,.518),new V(.267,.749,.441),new V(.478,.821,.318),new V(.741,.873,.15),new V(.993,.906,.144),new V(.1647,.2824,.3451),new V(.1338,.3555,.4227),new V(.061,.4319,.4864),new V(0,.5099,.5319),new V(0,.5881,.5569),new V(.137,.665,.5614),new V(.2906,.7395,.5477),new V(.4453,.8099,.5201),new V(.6102,.8748,.485),new V(.7883,.9323,.4514),new V(.9804,.9804,.4314);function He(s,t,l){const i=s*t,e=new Uint8Array(4*i),n=Math.floor(l.r*255),c=Math.floor(l.g*255),Z=Math.floor(l.b*255);for(let a=0;a<i;a++)e[a*3]=n,e[a*3+1]=c,e[a*3+2]=Z;const h=new oi(e,s,t,1023);return h.needsUpdate=!0,h.magFilter=1003,h}function Ii(s){const l=document.createElement("canvas");l.width=64,l.height=64;const i=l.getContext("2d");i.rect(0,0,64,64);const e=i.createLinearGradient(0,0,64,64);for(let c=0;c<s.length;c++){const Z=s[c];e.addColorStop(Z[0],`#${Z[1].getHexString()}`)}i.fillStyle=e,i.fill();const n=new ye(l);return n.needsUpdate=!0,n.minFilter=1006,n}function Ci(s){const e=new Uint8Array(262144);for(let c=0;c<256;c++)for(let Z=0;Z<256;Z++){const h=c+256*Z;let a;s[c]?a=s[c]:s[c%32]?a=s[c%32]:a=s.DEFAULT,e[4*h+0]=255*a.x,e[4*h+1]=255*a.y,e[4*h+2]=255*a.z,e[4*h+3]=255*a.w}const n=new oi(e,256,256,1023);return n.magFilter=1003,n.needsUpdate=!0,n}var Ct=(s=>(s[s.LINEAR=0]="LINEAR",s[s.SRGB=1]="SRGB",s))(Ct||{}),De=Object.defineProperty,Me=Object.getOwnPropertyDescriptor,x=(s,t,l,i)=>{for(var e=i>1?void 0:i?Me(t,l):t,n=s.length-1,c;n>=0;n--)(c=s[n])&&(e=(i?c(t,l,e):c(e))||e);return i&&e&&De(t,l,e),e};const Ue={[_t.OCTREE]:"tree_type_octree",[_t.KDTREE]:"tree_type_kdtree"},Ae={[ft.FIXED]:"fixed_point_size",[ft.ATTENUATED]:"attenuated_point_size",[ft.ADAPTIVE]:"adaptive_point_size"},fe={[ul.ATTENUATED]:"attenuated_opacity",[ul.FIXED]:"fixed_opacity"},Se={[Kt.SQUARE]:"square_point_shape",[Kt.CIRCLE]:"circle_point_shape",[Kt.PARABOLOID]:"paraboloid_point_shape"},je={[k.RGB]:"color_type_rgb",[k.COLOR]:"color_type_color",[k.DEPTH]:"color_type_depth",[k.HEIGHT]:"color_type_height",[k.INTENSITY]:"color_type_intensity",[k.INTENSITY_GRADIENT]:"color_type_intensity_gradient",[k.LOD]:"color_type_lod",[k.POINT_INDEX]:"color_type_point_index",[k.CLASSIFICATION]:"color_type_classification",[k.RETURN_NUMBER]:"color_type_return_number",[k.SOURCE]:"color_type_source",[k.NORMAL]:"color_type_normal",[k.PHONG]:"color_type_phong",[k.RGB_HEIGHT]:"color_type_rgb_height",[k.COMPOSITE]:"color_type_composite"},Pe={[Xt.DISABLED]:"clip_disabled",[Xt.CLIP_OUTSIDE]:"clip_outside",[Xt.HIGHLIGHT_INSIDE]:"clip_highlight_inside"},Te={[Ct.LINEAR]:"input_color_encoding_linear",[Ct.SRGB]:"input_color_encoding_sRGB"},Le={[Ct.LINEAR]:"output_color_encoding_linear",[Ct.SRGB]:"output_color_encoding_sRGB"},zi=class extends Re{constructor(s={}){super(),this.lights=!1,this.fog=!1,this.numClipBoxes=0,this.clipBoxes=[],this.visibleNodeTextureOffsets=new Map,this._gradient=ke,this.gradientTexture=Ii(this._gradient),this._classification=Bi,this.classificationTexture=Ci(this._classification),this.uniforms={bbSize:N("fv",[0,0,0]),blendDepthSupplement:N("f",0),blendHardness:N("f",2),classificationLUT:N("t",this.classificationTexture||new $),clipBoxCount:N("f",0),clipBoxes:N("Matrix4fv",[]),depthMap:N("t",null),diffuse:N("fv",[1,1,1]),fov:N("f",1),gradient:N("t",this.gradientTexture||new $),heightMax:N("f",1),heightMin:N("f",0),intensityBrightness:N("f",0),intensityContrast:N("f",0),intensityGamma:N("f",1),intensityRange:N("fv",[0,65e3]),isLeafNode:N("b",0),level:N("f",0),maxSize:N("f",xe),minSize:N("f",Fe),octreeSize:N("f",0),opacity:N("f",1),pcIndex:N("f",0),rgbBrightness:N("f",Ri),rgbContrast:N("f",xi),rgbGamma:N("f",Ni),screenHeight:N("f",1),screenWidth:N("f",1),size:N("f",1),spacing:N("f",1),toModel:N("Matrix4f",[]),transition:N("f",.5),uColor:N("c",new V(16777215)),visibleNodes:N("t",this.visibleNodesTexture||new $),vnStart:N("f",0),wClassification:N("f",0),wElevation:N("f",0),wIntensity:N("f",0),wReturnNumber:N("f",0),wRGB:N("f",1),wSourceID:N("f",0),opacityAttenuation:N("f",1),filterByNormalThreshold:N("f",0),highlightedPointCoordinate:N("fv",new W),highlightedPointColor:N("fv",ze.clone()),enablePointHighlighting:N("b",!0),highlightedPointScale:N("f",2)},this.useClipBox=!1,this.weighted=!1,this.pointColorType=k.RGB,this.pointSizeType=ft.ADAPTIVE,this.clipMode=Xt.DISABLED,this.useEDL=!1,this.shape=Kt.SQUARE,this.treeType=_t.OCTREE,this.pointOpacityType=ul.FIXED,this.useFilterByNormal=!1,this.highlightPoint=!1,this.inputColorEncoding=Ct.SRGB,this.outputColorEncoding=Ct.LINEAR,this.attributes={position:{type:"fv",value:[]},color:{type:"fv",value:[]},normal:{type:"fv",value:[]},intensity:{type:"f",value:[]},classification:{type:"f",value:[]},returnNumber:{type:"f",value:[]},numberOfReturns:{type:"f",value:[]},pointSourceID:{type:"f",value:[]},indices:{type:"fv",value:[]}};const t=this.visibleNodesTexture=He(2048,1,new V(16777215));t.minFilter=1003,t.magFilter=1003,this.setUniform("visibleNodes",t),this.treeType=Yl(s.treeType,_t.OCTREE),this.size=Yl(s.size,1),this.minSize=Yl(s.minSize,2),this.maxSize=Yl(s.maxSize,50),this.newFormat=!!s.newFormat,this.classification=Bi,this.defaultAttributeValues.normal=[0,0,0],this.defaultAttributeValues.classification=[0,0,0],this.defaultAttributeValues.indices=[0,0,0,0],this.vertexColors=!0,this.updateShaderSource()}dispose(){super.dispose(),this.gradientTexture&&(this.gradientTexture.dispose(),this.gradientTexture=void 0),this.visibleNodesTexture&&(this.visibleNodesTexture.dispose(),this.visibleNodesTexture=void 0),this.clearVisibleNodeTextureOffsets(),this.classificationTexture&&(this.classificationTexture.dispose(),this.classificationTexture=void 0),this.depthMap&&(this.depthMap.dispose(),this.depthMap=void 0)}clearVisibleNodeTextureOffsets(){this.visibleNodeTextureOffsets.clear()}updateShaderSource(){this.vertexShader=this.applyDefines(we),this.fragmentShader=this.applyDefines(Qe),this.opacity===1?(this.blending=0,this.transparent=!1,this.depthTest=!0,this.depthWrite=!0,this.depthFunc=3):this.opacity<1&&!this.useEDL&&(this.blending=2,this.transparent=!0,this.depthTest=!1,this.depthWrite=!0),this.weighted&&(this.blending=2,this.transparent=!0,this.depthTest=!0,this.depthWrite=!1,this.depthFunc=3),this.needsUpdate=!0}applyDefines(s){const t=[];function l(e){e&&t.push(`#define ${e}`)}l(Ue[this.treeType]),l(Ae[this.pointSizeType]),l(Se[this.shape]),l(je[this.pointColorType]),l(Pe[this.clipMode]),l(fe[this.pointOpacityType]),l(Le[this.outputColorEncoding]),l(Te[this.inputColorEncoding]),(this.rgbGamma!==Ni||this.rgbBrightness!==Ri||this.rgbContrast!==xi)&&l("use_rgb_gamma_contrast_brightness"),this.useFilterByNormal&&l("use_filter_by_normal"),this.useEDL&&l("use_edl"),this.weighted&&l("weighted_splats"),this.numClipBoxes>0&&l("use_clip_box"),this.highlightPoint&&l("highlight_point"),l("MAX_POINT_LIGHTS 0"),l("MAX_DIR_LIGHTS 0"),this.newFormat&&l("new_format");const i=s.match(/^\s*#version\s+300\s+es\s*\n/);return i&&(t.unshift(i[0]),s=s.replace(i[0],"")),t.push(s),t.join(`
`)}setClipBoxes(s){if(!s)return;this.clipBoxes=s;const t=this.numClipBoxes!==s.length&&(s.length===0||this.numClipBoxes===0);this.numClipBoxes=s.length,this.setUniform("clipBoxCount",this.numClipBoxes),t&&this.updateShaderSource();const l=this.numClipBoxes*16,i=new Float32Array(l);for(let e=0;e<this.numClipBoxes;e++)i.set(s[e].inverse.elements,16*e);for(let e=0;e<l;e++)isNaN(i[e])&&(i[e]=1/0);this.setUniform("clipBoxes",i)}get gradient(){return this._gradient}set gradient(s){this._gradient!==s&&(this._gradient=s,this.gradientTexture=Ii(this._gradient),this.setUniform("gradient",this.gradientTexture))}get classification(){return this._classification}set classification(s){const t={};for(const i of Object.keys(s))t[i]=s[i].clone();let l=!1;if(this._classification===void 0)l=!1;else{l=Object.keys(t).length===Object.keys(this._classification).length;for(const i of Object.keys(t))l=l&&this._classification[i]!==void 0,l=l&&t[i].equals(this._classification[i])}l||(this._classification=t,this.recomputeClassification())}recomputeClassification(){this.classificationTexture=Ci(this._classification),this.setUniform("classificationLUT",this.classificationTexture)}get elevationRange(){return[this.heightMin,this.heightMax]}set elevationRange(s){this.heightMin=s[0],this.heightMax=s[1]}getUniform(s){return this.uniforms===void 0?void 0:this.uniforms[s].value}setUniform(s,t){if(this.uniforms===void 0)return;const l=this.uniforms[s];l.type==="c"?l.value.copy(t):t!==l.value&&(l.value=t)}updateMaterial(s,t,l,i){const e=i.getPixelRatio();l.type===Ji?this.fov=l.fov*(Math.PI/180):this.fov=Math.PI/2;const n=i.getRenderTarget();n!==null&&n instanceof ei?(this.screenWidth=n.width,this.screenHeight=n.height):(this.screenWidth=i.domElement.clientWidth*e,this.screenHeight=i.domElement.clientHeight*e);const c=Math.max(s.scale.x,s.scale.y,s.scale.z);this.spacing=s.pcoGeometry.spacing*c,this.octreeSize=s.pcoGeometry.boundingBox.getSize(zi.helperVec3).x,(this.pointSizeType===ft.ADAPTIVE||this.pointColorType===k.LOD)&&this.updateVisibilityTextureData(t)}updateVisibilityTextureData(s){s.sort(ve);const t=new Uint8Array(s.length*4),l=new Array(s.length).fill(1/0);this.visibleNodeTextureOffsets.clear();for(let e=0;e<s.length;e++){const n=s[e];if(this.visibleNodeTextureOffsets.set(n.name,e),e>0){const c=n.name.slice(0,-1),Z=this.visibleNodeTextureOffsets.get(c),h=e-Z;l[Z]=Math.min(l[Z],h);const a=Z*4;t[a]=t[a]|1<<n.index,t[a+1]=l[Z]>>8,t[a+2]=l[Z]%256}t[e*4+3]=n.name.length}const i=this.visibleNodesTexture;i&&(i.image.data.set(t),i.needsUpdate=!0)}static makeOnBeforeRender(s,t,l){return(i,e,n,c,Z)=>{const h=Z,a=h.uniforms;a.level.value=t.level,a.isLeafNode.value=t.isLeafNode;const d=h.visibleNodeTextureOffsets.get(t.name);d!==void 0&&(a.vnStart.value=d),a.pcIndex.value=l!==void 0?l:s.visibleNodes.indexOf(t),Z.uniformsNeedUpdate=!0}}};let p=zi;p.helperVec3=new W,x([B("bbSize")],p.prototype,"bbSize",2),x([B("depthMap")],p.prototype,"depthMap",2),x([B("fov")],p.prototype,"fov",2),x([B("heightMax")],p.prototype,"heightMax",2),x([B("heightMin")],p.prototype,"heightMin",2),x([B("intensityBrightness")],p.prototype,"intensityBrightness",2),x([B("intensityContrast")],p.prototype,"intensityContrast",2),x([B("intensityGamma")],p.prototype,"intensityGamma",2),x([B("intensityRange")],p.prototype,"intensityRange",2),x([B("maxSize")],p.prototype,"maxSize",2),x([B("minSize")],p.prototype,"minSize",2),x([B("octreeSize")],p.prototype,"octreeSize",2),x([B("opacity",!0)],p.prototype,"opacity",2),x([B("rgbBrightness",!0)],p.prototype,"rgbBrightness",2),x([B("rgbContrast",!0)],p.prototype,"rgbContrast",2),x([B("rgbGamma",!0)],p.prototype,"rgbGamma",2),x([B("screenHeight")],p.prototype,"screenHeight",2),x([B("screenWidth")],p.prototype,"screenWidth",2),x([B("size")],p.prototype,"size",2),x([B("spacing")],p.prototype,"spacing",2),x([B("transition")],p.prototype,"transition",2),x([B("uColor")],p.prototype,"color",2),x([B("wClassification")],p.prototype,"weightClassification",2),x([B("wElevation")],p.prototype,"weightElevation",2),x([B("wIntensity")],p.prototype,"weightIntensity",2),x([B("wReturnNumber")],p.prototype,"weightReturnNumber",2),x([B("wRGB")],p.prototype,"weightRGB",2),x([B("wSourceID")],p.prototype,"weightSourceID",2),x([B("opacityAttenuation")],p.prototype,"opacityAttenuation",2),x([B("filterByNormalThreshold")],p.prototype,"filterByNormalThreshold",2),x([B("highlightedPointCoordinate")],p.prototype,"highlightedPointCoordinate",2),x([B("highlightedPointColor")],p.prototype,"highlightedPointColor",2),x([B("enablePointHighlighting")],p.prototype,"enablePointHighlighting",2),x([B("highlightedPointScale")],p.prototype,"highlightedPointScale",2),x([et()],p.prototype,"useClipBox",2),x([et()],p.prototype,"weighted",2),x([et()],p.prototype,"pointColorType",2),x([et()],p.prototype,"pointSizeType",2),x([et()],p.prototype,"clipMode",2),x([et()],p.prototype,"useEDL",2),x([et()],p.prototype,"shape",2),x([et()],p.prototype,"treeType",2),x([et()],p.prototype,"pointOpacityType",2),x([et()],p.prototype,"useFilterByNormal",2),x([et()],p.prototype,"highlightPoint",2),x([et()],p.prototype,"inputColorEncoding",2),x([et()],p.prototype,"outputColorEncoding",2);function N(s,t){return{type:s,value:t}}function Yl(s,t){return s===void 0?t:s}function B(s,t=!1){return(l,i)=>{Object.defineProperty(l,i,{get(){return this.getUniform(s)},set(e){e!==this.getUniform(s)&&(this.setUniform(s,e),t&&this.updateShaderSource())}})}}function et(){return(s,t)=>{const l=`_${t.toString()}`;Object.defineProperty(s,t,{get(){return this[l]},set(i){i!==this[l]&&(this[l]=i,this.updateShaderSource())}})}}class Ee extends xt{constructor(t,l){super(),this.pcIndex=void 0,this.boundingBoxNode=null,this.loaded=!0,this.isTreeNode=!0,this.isGeometryNode=!1,this.geometryNode=t,this.sceneNode=l,this.children=t.children.slice()}dispose(){this.geometryNode.dispose()}disposeSceneNode(){const t=this.sceneNode;if(t.geometry instanceof pt){const l=t.geometry.attributes;for(const i in l)i==="position"&&delete l[i].array,delete l[i];t.geometry.dispose(),t.geometry=void 0}}traverse(t,l){this.geometryNode.traverse(t,l)}get id(){return this.geometryNode.id}get name(){return this.geometryNode.name}get level(){return this.geometryNode.level}get isLeafNode(){return this.geometryNode.isLeafNode}get numPoints(){return this.geometryNode.numPoints}get index(){return this.geometryNode.index}get boundingSphere(){return this.geometryNode.boundingSphere}get boundingBox(){return this.geometryNode.boundingBox}get spacing(){return this.geometryNode.spacing}}function wi(s,t,l){return Math.min(Math.max(t,s),l)}const U=class{dispose(){this.pickState&&(this.pickState.material.dispose(),this.pickState.renderTarget.dispose())}pick(s,t,l,i,e={}){if(i.length===0)return null;const n=this.pickState?this.pickState:this.pickState=U.getPickState(),c=n.material,Z=s.getPixelRatio(),h=Math.ceil(s.domElement.clientWidth*Z),a=Math.ceil(s.domElement.clientHeight*Z);U.updatePickRenderTarget(this.pickState,h,a);const d=U.helperVec3;e.pixelPosition?d.copy(e.pixelPosition):(d.addVectors(t.position,l.direction).project(t),d.x=(d.x+1)*h*.5,d.y=(d.y+1)*a*.5);const m=Math.floor((e.pickWindowSize||Je)*Z),b=(m-1)/2,o=Math.floor(wi(d.x-b,0,h)),r=Math.floor(wi(d.y-b,0,a));U.prepareRender(s,o,r,m,c,n);const G=U.render(s,t,c,i,l,n,e);c.clearVisibleNodeTextureOffsets();const u=U.readPixels(s,o,r,m),Y=U.findHit(u,m);return U.getPickPoint(Y,G)}static prepareRender(s,t,l,i,e,n){s.setScissor(t,l,i,i),s.setScissorTest(!0),s.state.buffers.depth.setTest(e.depthTest),s.state.buffers.depth.setMask(e.depthWrite),s.state.setBlending(0),s.setRenderTarget(n.renderTarget),s.getClearColor(this.clearColor);const c=s.getClearAlpha();s.setClearColor(Ce,0),s.clear(!0,!0,!0),s.setClearColor(this.clearColor,c)}static render(s,t,l,i,e,n,c){const Z=[];for(const h of i){const a=U.nodesOnRay(h,e);a.length&&(U.updatePickMaterial(l,h.material,c),l.updateMaterial(h,a,t,s),c.onBeforePickRender&&c.onBeforePickRender(l,n.renderTarget),n.scene.children=U.createTempNodes(h,a,l,Z.length),s.render(n.scene,t),a.forEach(d=>Z.push({node:d,octree:h})))}return Z}static nodesOnRay(s,t){const l=[],i=t.clone();for(const e of s.visibleNodes){const n=U.helperSphere.copy(e.boundingSphere).applyMatrix4(s.matrixWorld);i.intersectsSphere(n)&&l.push(e)}return l}static readPixels(s,t,l,i){const e=new Uint8Array(4*i*i);return s.readRenderTargetPixels(s.getRenderTarget(),t,l,i,i,e),s.setScissorTest(!1),s.setRenderTarget(null),e}static createTempNodes(s,t,l,i){const e=[];for(let n=0;n<t.length;n++){const c=t[n],Z=c.sceneNode,h=new Xi(Z.geometry,l);h.matrix=Z.matrix,h.matrixWorld=Z.matrixWorld,h.matrixAutoUpdate=!1,h.frustumCulled=!1;const a=i+n+1;a>255&&console.error("More than 255 nodes for pick are not supported."),h.onBeforeRender=p.makeOnBeforeRender(s,c,a),e.push(h)}return e}static updatePickMaterial(s,t,l){s.pointSizeType=t.pointSizeType,s.shape=t.shape,s.size=t.size,s.minSize=t.minSize,s.maxSize=t.maxSize,s.classification=t.classification,s.useFilterByNormal=t.useFilterByNormal,s.filterByNormalThreshold=t.filterByNormalThreshold,l.pickOutsideClipRegion?s.clipMode=Xt.DISABLED:(s.clipMode=t.clipMode,s.setClipBoxes(t.clipMode===Xt.CLIP_OUTSIDE?t.clipBoxes:[]))}static updatePickRenderTarget(s,t,l){s.renderTarget.width===t&&s.renderTarget.height===l||(s.renderTarget.dispose(),s.renderTarget=U.makePickRenderTarget(),s.renderTarget.setSize(t,l))}static makePickRenderTarget(){return new ei(1,1,{minFilter:1006,magFilter:1003,format:1023})}static findHit(s,t){const l=new Uint32Array(s.buffer);let i=Number.MAX_VALUE,e=null;for(let n=0;n<t;n++)for(let c=0;c<t;c++){const Z=n+c*t,h=Math.pow(n-(t-1)/2,2)+Math.pow(c-(t-1)/2,2),a=s[4*Z+3];s[4*Z+3]=0;const d=l[Z];a>0&&h<i&&(e={pIndex:d,pcIndex:a-1},i=h)}return e}static getPickPoint(s,t){if(!s)return null;const l={},i=t[s.pcIndex]&&t[s.pcIndex].node.sceneNode;if(!i)return null;l.pointCloud=t[s.pcIndex].octree;const e=i.geometry.attributes;for(const n in e){if(!e.hasOwnProperty(n))continue;const c=e[n];if(n==="position")U.addPositionToPickPoint(l,s,c,i);else if(n==="normal")U.addNormalToPickPoint(l,s,c,i);else if(n!=="indices")if(c.itemSize===1)l[n]=c.array[s.pIndex];else{const Z=[];for(let h=0;h<c.itemSize;h++)Z.push(c.array[c.itemSize*s.pIndex+h]);l[n]=Z}}return l}static addPositionToPickPoint(s,t,l,i){s.position=new W().fromBufferAttribute(l,t.pIndex).applyMatrix4(i.matrixWorld)}static addNormalToPickPoint(s,t,l,i){const e=new W().fromBufferAttribute(l,t.pIndex),n=new H(e.x,e.y,e.z,0).applyMatrix4(i.matrixWorld);e.set(n.x,n.y,n.z),s.normal=e}static getPickState(){const s=new Ve;s.autoUpdate=!1;const t=new p;return t.pointColorType=k.POINT_INDEX,{renderTarget:U.makePickRenderTarget(),material:t,scene:s}}};let qt=U;qt.helperVec3=new W,qt.helperSphere=new nt,qt.clearColor=new V;class Oe extends lt{constructor(){super(...arguments),this.root=null}initialized(){return this.root!==null}}function Qi(s,t){return new O().setFromPoints([new W(s.min.x,s.min.y,s.min.z).applyMatrix4(t),new W(s.min.x,s.min.y,s.min.z).applyMatrix4(t),new W(s.max.x,s.min.y,s.min.z).applyMatrix4(t),new W(s.min.x,s.max.y,s.min.z).applyMatrix4(t),new W(s.min.x,s.min.y,s.max.z).applyMatrix4(t),new W(s.min.x,s.max.y,s.max.z).applyMatrix4(t),new W(s.max.x,s.max.y,s.min.z).applyMatrix4(t),new W(s.max.x,s.min.y,s.max.z).applyMatrix4(t),new W(s.max.x,s.max.y,s.max.z).applyMatrix4(t)])}function vi(s,t){const l=s.min.clone(),i=s.max.clone(),e=new W().subVectors(i,l);return(t&1)>0?l.z+=e.z/2:i.z-=e.z/2,(t&2)>0?l.y+=e.y/2:i.y-=e.y/2,(t&4)>0?l.x+=e.x/2:i.x-=e.x/2,new O(l,i)}class Ll extends Oe{constructor(t,l,i){super(),this.disposed=!1,this.level=0,this.maxLevel=1/0,this.minNodePixelSize=Ne,this.root=null,this.boundingBoxNodes=[],this.visibleNodes=[],this.visibleGeometry=[],this.numVisiblePoints=0,this.showBoundingBox=!1,this.visibleBounds=new O,this.name="",this.potree=t,this.root=l.root,this.pcoGeometry=l,this.boundingBox=l.boundingBox,this.boundingSphere=this.boundingBox.getBoundingSphere(new nt),this.position.copy(l.offset),this.updateMatrix(),this.material=i||l instanceof yi?new p({newFormat:!0}):new p,this.initMaterial(this.material)}initMaterial(t){this.updateMatrixWorld(!0);const{min:l,max:i}=Qi(this.pcoGeometry.tightBoundingBox||this.getBoundingBoxWorld(),this.matrixWorld),e=i.z-l.z;t.heightMin=l.z-.2*e,t.heightMax=i.z+.2*e}dispose(){this.root&&this.root.dispose(),this.pcoGeometry.root.traverse(t=>this.potree.lru.remove(t)),this.pcoGeometry.dispose(),this.material.dispose(),this.visibleNodes=[],this.visibleGeometry=[],this.picker&&(this.picker.dispose(),this.picker=void 0),this.disposed=!0}get pointSizeType(){return this.material.pointSizeType}set pointSizeType(t){this.material.pointSizeType=t}toTreeNode(t,l){const i=new Xi(t.geometry,this.material),e=new Ee(t,i);return i.name=t.name,i.position.copy(t.boundingBox.min),i.frustumCulled=!1,i.onBeforeRender=p.makeOnBeforeRender(this,e),l?(l.sceneNode.add(i),l.children[t.index]=e,t.oneTimeDisposeHandlers.push(()=>{e.disposeSceneNode(),l.sceneNode.remove(e.sceneNode),l.children[t.index]=t})):(this.root=e,this.add(i)),e}updateVisibleBounds(){const t=this.visibleBounds;t.min.set(1/0,1/0,1/0),t.max.set(-1/0,-1/0,-1/0);for(const l of this.visibleNodes)l.isLeafNode&&(t.expandByPoint(l.boundingBox.min),t.expandByPoint(l.boundingBox.max))}updateBoundingBoxes(){if(!this.showBoundingBox||!this.parent)return;let t=this.parent.getObjectByName("bbroot");t||(t=new lt,t.name="bbroot",this.parent.add(t));const l=[];for(const i of this.visibleNodes)i.boundingBoxNode!==void 0&&i.isLeafNode&&l.push(i.boundingBoxNode);t.children=l}updateMatrixWorld(t){this.matrixAutoUpdate===!0&&this.updateMatrix(),(this.matrixWorldNeedsUpdate===!0||t===!0)&&(this.parent?this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix):this.matrixWorld.copy(this.matrix),this.matrixWorldNeedsUpdate=!1,t=!0)}hideDescendants(t){const l=[];for(i(t);l.length>0;){const e=l.shift();e.visible=!1,i(e)}function i(e){for(const n of e.children)n.visible&&l.push(n)}}moveToOrigin(){this.position.set(0,0,0),this.position.set(0,0,0).sub(this.getBoundingBoxWorld().getCenter(new W))}moveToGroundPlane(){this.position.y+=-this.getBoundingBoxWorld().min.y}getBoundingBoxWorld(){return this.updateMatrixWorld(!0),Qi(this.boundingBox,this.matrixWorld)}getVisibleExtent(){return this.visibleBounds.applyMatrix4(this.matrixWorld)}pick(t,l,i,e={}){return this.picker=this.picker||new qt,this.picker.pick(t,l,i,[this],e)}get progress(){return this.visibleGeometry.length===0?0:this.visibleNodes.length/this.visibleGeometry.length}}const C={DATA_TYPE_DOUBLE:{ordinal:0,name:"double",size:8},DATA_TYPE_FLOAT:{ordinal:1,name:"float",size:4},DATA_TYPE_INT8:{ordinal:2,name:"int8",size:1},DATA_TYPE_UINT8:{ordinal:3,name:"uint8",size:1},DATA_TYPE_INT16:{ordinal:4,name:"int16",size:2},DATA_TYPE_UINT16:{ordinal:5,name:"uint16",size:2},DATA_TYPE_INT32:{ordinal:6,name:"int32",size:4},DATA_TYPE_UINT32:{ordinal:7,name:"uint32",size:4},DATA_TYPE_INT64:{ordinal:8,name:"int64",size:8},DATA_TYPE_UINT64:{ordinal:9,name:"uint64",size:8}};let ki=0;for(let s in C)C[ki]=C[s],ki++;class A{constructor(t,l,i,e=[1/0,-1/0]){this.name=t,this.type=l,this.numElements=i,this.range=e,this.byteSize=this.numElements*this.type.size,this.description=""}}const $t={POSITION_CARTESIAN:new A("POSITION_CARTESIAN",C.DATA_TYPE_FLOAT,3),RGBA_PACKED:new A("COLOR_PACKED",C.DATA_TYPE_INT8,4),COLOR_PACKED:new A("COLOR_PACKED",C.DATA_TYPE_INT8,4),RGB_PACKED:new A("COLOR_PACKED",C.DATA_TYPE_INT8,3),NORMAL_FLOATS:new A("NORMAL_FLOATS",C.DATA_TYPE_FLOAT,3),INTENSITY:new A("INTENSITY",C.DATA_TYPE_UINT16,1),CLASSIFICATION:new A("CLASSIFICATION",C.DATA_TYPE_UINT8,1),NORMAL_SPHEREMAPPED:new A("NORMAL_SPHEREMAPPED",C.DATA_TYPE_UINT8,2),NORMAL_OCT16:new A("NORMAL_OCT16",C.DATA_TYPE_UINT8,2),NORMAL:new A("NORMAL",C.DATA_TYPE_FLOAT,3),RETURN_NUMBER:new A("RETURN_NUMBER",C.DATA_TYPE_UINT8,1),NUMBER_OF_RETURNS:new A("NUMBER_OF_RETURNS",C.DATA_TYPE_UINT8,1),SOURCE_ID:new A("SOURCE_ID",C.DATA_TYPE_UINT16,1),INDICES:new A("INDICES",C.DATA_TYPE_UINT32,1),SPACING:new A("SPACING",C.DATA_TYPE_FLOAT,1),GPS_TIME:new A("GPS_TIME",C.DATA_TYPE_DOUBLE,1)};let Ke=class{constructor(t,l=[],i=0,e=0,n=[]){if(this.attributes=l,this.byteSize=i,this.size=e,this.vectors=n,t!=null)for(let c=0;c<t.length;c++){let Z=t[c],h=$t[Z];this.attributes.push(h),this.byteSize+=h.byteSize,this.size++}}add(t){this.attributes.push(t),this.byteSize+=t.byteSize,this.size++}addVector(t){this.vectors.push(t)}hasNormals(){for(let t in this.attributes){let l=this.attributes[t];if(l===$t.NORMAL_SPHEREMAPPED||l===$t.NORMAL_FLOATS||l===$t.NORMAL||l===$t.NORMAL_OCT16)return!0}return!1}};const Hi="",Di=typeof window<"u"&&window.Blob&&new Blob([atob(Hi)],{type:"text/javascript;charset=utf-8"});function _e(){let s;try{if(s=Di&&(window.URL||window.webkitURL).createObjectURL(Di),!s)throw"";return new Worker(s)}catch{return new Worker("data:application/javascript;base64,"+Hi)}finally{s&&(window.URL||window.webkitURL).revokeObjectURL(s)}}const Mi="KGZ1bmN0aW9uKCl7InVzZSBzdHJpY3QiO2NvbnN0IHQ9e0RBVEFfVFlQRV9ET1VCTEU6e29yZGluYWw6MCxuYW1lOiJkb3VibGUiLHNpemU6OH0sREFUQV9UWVBFX0ZMT0FUOntvcmRpbmFsOjEsbmFtZToiZmxvYXQiLHNpemU6NH0sREFUQV9UWVBFX0lOVDg6e29yZGluYWw6MixuYW1lOiJpbnQ4IixzaXplOjF9LERBVEFfVFlQRV9VSU5UODp7b3JkaW5hbDozLG5hbWU6InVpbnQ4IixzaXplOjF9LERBVEFfVFlQRV9JTlQxNjp7b3JkaW5hbDo0LG5hbWU6ImludDE2IixzaXplOjJ9LERBVEFfVFlQRV9VSU5UMTY6e29yZGluYWw6NSxuYW1lOiJ1aW50MTYiLHNpemU6Mn0sREFUQV9UWVBFX0lOVDMyOntvcmRpbmFsOjYsbmFtZToiaW50MzIiLHNpemU6NH0sREFUQV9UWVBFX1VJTlQzMjp7b3JkaW5hbDo3LG5hbWU6InVpbnQzMiIsc2l6ZTo0fSxEQVRBX1RZUEVfSU5UNjQ6e29yZGluYWw6OCxuYW1lOiJpbnQ2NCIsc2l6ZTo4fSxEQVRBX1RZUEVfVUlOVDY0OntvcmRpbmFsOjksbmFtZToidWludDY0IixzaXplOjh9fTtsZXQgZz0wO2ZvcihsZXQgTyBpbiB0KXRbZ109dFtPXSxnKys7Y2xhc3MgaXtjb25zdHJ1Y3RvcihiLHksRCxZPVsxLzAsLTEvMF0pe3RoaXMubmFtZT1iLHRoaXMudHlwZT15LHRoaXMubnVtRWxlbWVudHM9RCx0aGlzLnJhbmdlPVksdGhpcy5ieXRlU2l6ZT10aGlzLm51bUVsZW1lbnRzKnRoaXMudHlwZS5zaXplLHRoaXMuZGVzY3JpcHRpb249IiJ9fW5ldyBpKCJQT1NJVElPTl9DQVJURVNJQU4iLHQuREFUQV9UWVBFX0ZMT0FULDMpLG5ldyBpKCJDT0xPUl9QQUNLRUQiLHQuREFUQV9UWVBFX0lOVDgsNCksbmV3IGkoIkNPTE9SX1BBQ0tFRCIsdC5EQVRBX1RZUEVfSU5UOCw0KSxuZXcgaSgiQ09MT1JfUEFDS0VEIix0LkRBVEFfVFlQRV9JTlQ4LDMpLG5ldyBpKCJOT1JNQUxfRkxPQVRTIix0LkRBVEFfVFlQRV9GTE9BVCwzKSxuZXcgaSgiSU5URU5TSVRZIix0LkRBVEFfVFlQRV9VSU5UMTYsMSksbmV3IGkoIkNMQVNTSUZJQ0FUSU9OIix0LkRBVEFfVFlQRV9VSU5UOCwxKSxuZXcgaSgiTk9STUFMX1NQSEVSRU1BUFBFRCIsdC5EQVRBX1RZUEVfVUlOVDgsMiksbmV3IGkoIk5PUk1BTF9PQ1QxNiIsdC5EQVRBX1RZUEVfVUlOVDgsMiksbmV3IGkoIk5PUk1BTCIsdC5EQVRBX1RZUEVfRkxPQVQsMyksbmV3IGkoIlJFVFVSTl9OVU1CRVIiLHQuREFUQV9UWVBFX1VJTlQ4LDEpLG5ldyBpKCJOVU1CRVJfT0ZfUkVUVVJOUyIsdC5EQVRBX1RZUEVfVUlOVDgsMSksbmV3IGkoIlNPVVJDRV9JRCIsdC5EQVRBX1RZUEVfVUlOVDE2LDEpLG5ldyBpKCJJTkRJQ0VTIix0LkRBVEFfVFlQRV9VSU5UMzIsMSksbmV3IGkoIlNQQUNJTkciLHQuREFUQV9UWVBFX0ZMT0FULDEpLG5ldyBpKCJHUFNfVElNRSIsdC5EQVRBX1RZUEVfRE9VQkxFLDEpO2NvbnN0IE09e2ludDg6SW50OEFycmF5LGludDE2OkludDE2QXJyYXksaW50MzI6SW50MzJBcnJheSxpbnQ2NDpGbG9hdDY0QXJyYXksdWludDg6VWludDhBcnJheSx1aW50MTY6VWludDE2QXJyYXksdWludDMyOlVpbnQzMkFycmF5LHVpbnQ2NDpGbG9hdDY0QXJyYXksZmxvYXQ6RmxvYXQzMkFycmF5LGRvdWJsZTpGbG9hdDY0QXJyYXl9O29ubWVzc2FnZT1mdW5jdGlvbihPKXtsZXR7YnVmZmVyOmIscG9pbnRBdHRyaWJ1dGVzOnksc2NhbGU6RCxuYW1lOlksbWluOlUsbWF4Okcsc2l6ZTpwLG9mZnNldDpSLG51bVBvaW50czpzfT1PLmRhdGE7cGVyZm9ybWFuY2Uubm93KCk7bGV0IEE9bmV3IERhdGFWaWV3KGIpLEU9e30sST0wLG09MDtmb3IobGV0IGUgb2YgeS5hdHRyaWJ1dGVzKW0rPWUuYnl0ZVNpemU7bGV0IF89MzIsej1uZXcgVWludDMyQXJyYXkoXyoqMyksRj0oZSxULHIpPT57bGV0IG49XyplL3AueCxhPV8qVC9wLnksbD1fKnIvcC56LGY9TWF0aC5taW4ocGFyc2VJbnQobiksXy0xKSx1PU1hdGgubWluKHBhcnNlSW50KGEpLF8tMSksTj1NYXRoLm1pbihwYXJzZUludChsKSxfLTEpO3JldHVybiBmK3UqXytOKl8qX30sQz0wO2ZvcihsZXQgZSBvZiB5LmF0dHJpYnV0ZXMpe2lmKFsiUE9TSVRJT05fQ0FSVEVTSUFOIiwicG9zaXRpb24iXS5pbmNsdWRlcyhlLm5hbWUpKXtsZXQgVD1uZXcgQXJyYXlCdWZmZXIocyo0KjMpLHI9bmV3IEZsb2F0MzJBcnJheShUKTtmb3IobGV0IG49MDtuPHM7bisrKXtsZXQgYT1uKm0sbD1BLmdldEludDMyKGErSSswLCEwKSpEWzBdK1JbMF0tVS54LGY9QS5nZXRJbnQzMihhK0krNCwhMCkqRFsxXStSWzFdLVUueSx1PUEuZ2V0SW50MzIoYStJKzgsITApKkRbMl0rUlsyXS1VLnosTj1GKGwsZix1KTt6W05dKys9PT0wJiZDKyssclszKm4rMF09bCxyWzMqbisxXT1mLHJbMypuKzJdPXV9RVtlLm5hbWVdPXtidWZmZXI6VCxhdHRyaWJ1dGU6ZX19ZWxzZSBpZihbIlJHQkEiLCJyZ2JhIl0uaW5jbHVkZXMoZS5uYW1lKSl7bGV0IFQ9bmV3IEFycmF5QnVmZmVyKHMqNCkscj1uZXcgVWludDhBcnJheShUKTtmb3IobGV0IG49MDtuPHM7bisrKXtsZXQgYT1uKm0sbD1BLmdldFVpbnQxNihhK0krMCwhMCksZj1BLmdldFVpbnQxNihhK0krMiwhMCksdT1BLmdldFVpbnQxNihhK0krNCwhMCk7cls0Km4rMF09bD4yNTU/bC8yNTY6bCxyWzQqbisxXT1mPjI1NT9mLzI1NjpmLHJbNCpuKzJdPXU+MjU1P3UvMjU2OnV9RVtlLm5hbWVdPXtidWZmZXI6VCxhdHRyaWJ1dGU6ZX19ZWxzZXtsZXQgVD1uZXcgQXJyYXlCdWZmZXIocyo0KSxyPW5ldyBGbG9hdDMyQXJyYXkoVCksbj1NW2UudHlwZS5uYW1lXSxhPW5ldyBuKHMpLFtsLGZdPVswLDFdO2NvbnN0IE49e2ludDg6QS5nZXRJbnQ4LGludDE2OkEuZ2V0SW50MTYsaW50MzI6QS5nZXRJbnQzMix1aW50ODpBLmdldFVpbnQ4LHVpbnQxNjpBLmdldFVpbnQxNix1aW50MzI6QS5nZXRVaW50MzIsZmxvYXQ6QS5nZXRGbG9hdDMyLGRvdWJsZTpBLmdldEZsb2F0NjR9W2UudHlwZS5uYW1lXS5iaW5kKEEpO2lmKGUudHlwZS5zaXplPjQpe2xldFtvLFBdPWUucmFuZ2U7bD1vLGY9MS8oUC1vKX1mb3IobGV0IG89MDtvPHM7bysrKXtsZXQgUD1vKm0sYz1OKFArSSwhMCk7cltvXT0oYy1sKSpmLGFbb109Y31FW2UubmFtZV09e2J1ZmZlcjpULHByZWNpc2VCdWZmZXI6YSxhdHRyaWJ1dGU6ZSxvZmZzZXQ6bCxzY2FsZTpmfX1JKz1lLmJ5dGVTaXplfWxldCBCPXBhcnNlSW50KHMvQyk7e2xldCBlPW5ldyBBcnJheUJ1ZmZlcihzKjQpLFQ9bmV3IFVpbnQzMkFycmF5KGUpO2ZvcihsZXQgcj0wO3I8cztyKyspVFtyXT1yO0UuSU5ESUNFUz17YnVmZmVyOmUsYXR0cmlidXRlOmkuSU5ESUNFU319e2xldCBlPXkudmVjdG9ycztmb3IobGV0IFQgb2YgZSl7bGV0e25hbWU6cixhdHRyaWJ1dGVzOm59PVQsYT1uLmxlbmd0aCxsPW5ldyBBcnJheUJ1ZmZlcihhKnMqNCksZj1uZXcgRmxvYXQzMkFycmF5KGwpLHU9MDtmb3IobGV0IG8gb2Ygbil7bGV0IFA9RVtvXSx7b2Zmc2V0OmMsc2NhbGU6aH09UCxMPW5ldyBEYXRhVmlldyhQLmJ1ZmZlcik7Y29uc3QgeD1MLmdldEZsb2F0MzIuYmluZChMKTtmb3IobGV0IHc9MDt3PHM7dysrKXtsZXQgdj14KHcqNCwhMCk7Zlt3KmErdV09di9oK2N9dSsrfWxldCBOPW5ldyBpKHIsdC5EQVRBX1RZUEVfRkxPQVQsMyk7RVtyXT17YnVmZmVyOmwsYXR0cmlidXRlOk59fX1sZXQgZD17YnVmZmVyOmIsYXR0cmlidXRlQnVmZmVyczpFLGRlbnNpdHk6Qn0sUz1bXTtmb3IobGV0IGUgaW4gZC5hdHRyaWJ1dGVCdWZmZXJzKVMucHVzaChkLmF0dHJpYnV0ZUJ1ZmZlcnNbZV0uYnVmZmVyKTtTLnB1c2goYikscG9zdE1lc3NhZ2UoZCxTKX19KSgpOwovLyMgc291cmNlTWFwcGluZ1VSTD1kZWNvZGVyLndvcmtlci1mNzU3MDc3Yy5qcy5tYXAK",Ui=typeof window<"u"&&window.Blob&&new Blob([atob(Mi)],{type:"text/javascript;charset=utf-8"});function qe(){let s;try{if(s=Ui&&(window.URL||window.webkitURL).createObjectURL(Ui),!s)throw"";return new Worker(s)}catch{return new Worker("data:application/javascript;base64,"+Mi)}finally{s&&(window.URL||window.webkitURL).revokeObjectURL(s)}}var El=(s=>(s.DECODER_WORKER_BROTLI="DECODER_WORKER_BROTLI",s.DECODER_WORKER="DECODER_WORKER",s))(El||{});function $e(s){switch(s){case"DECODER_WORKER_BROTLI":return new _e;case"DECODER_WORKER":return new qe;default:throw new Error("Unknown worker type")}}class tn{constructor(){this.workers={DECODER_WORKER:[],DECODER_WORKER_BROTLI:[]}}getWorker(t){if(this.workers[t]===void 0)throw new Error("Unknown worker type");if(this.workers[t].length===0){let i=$e(t);this.workers[t].push(i)}let l=this.workers[t].pop();if(l===void 0)throw new Error("No workers available");return l}returnWorker(t,l){this.workers[t].push(l)}}const Ai=class{constructor(s,t,l){this.name=s,this.octreeGeometry=t,this.boundingBox=l,this.loaded=!1,this.loading=!1,this.parent=null,this.geometry=null,this.hasChildren=!1,this.isLeafNode=!0,this.isTreeNode=!1,this.isGeometryNode=!0,this.children=[null,null,null,null,null,null,null,null],this.id=Ai.IDCount++,this.index=parseInt(s.charAt(s.length-1)),this.boundingSphere=l.getBoundingSphere(new nt),this.numPoints=0,this.oneTimeDisposeHandlers=[]}getLevel(){return this.level}isLoaded(){return this.loaded}getBoundingSphere(){return this.boundingSphere}getBoundingBox(){return this.boundingBox}load(){this.octreeGeometry.numNodesLoading>=this.octreeGeometry.maxNumNodesLoading||this.octreeGeometry.loader&&this.octreeGeometry.loader.load(this)}getNumPoints(){return this.numPoints}dispose(){if(this.geometry&&this.parent!=null){this.geometry.dispose(),this.geometry=null,this.loaded=!1;for(let s=0;s<this.oneTimeDisposeHandlers.length;s++){let t=this.oneTimeDisposeHandlers[s];t()}this.oneTimeDisposeHandlers=[]}}traverse(s,t=!0){const l=t?[this]:[];let i;for(;(i=l.pop())!==void 0;){s(i);for(const e of i.children)e!==null&&l.push(e)}}};let Vl=Ai;Vl.IDCount=0,Vl.IDCount=0;class ln{constructor(t,l,i){this.url=t,this.workerPool=l,this.metadata=i}async load(t){if(!(t.loaded||t.loading)){t.loading=!0,t.octreeGeometry.numNodesLoading++;try{t.nodeType===2&&await this.loadHierarchy(t);let{byteOffset:l,byteSize:i}=t;if(l===void 0||i===void 0)throw new Error("byteOffset and byteSize are required");let e=`${this.url}/../octree.bin`,n=l,c=l+i-BigInt(1),Z;i===BigInt(0)?(Z=new ArrayBuffer(0),console.warn(`loaded node with 0 bytes: ${t.name}`)):Z=await(await fetch(e,{headers:{"content-type":"multipart/byteranges",Range:`bytes=${n}-${c}`}})).arrayBuffer();const h=this.metadata.encoding==="BROTLI"?El.DECODER_WORKER_BROTLI:El.DECODER_WORKER,a=this.workerPool.getWorker(h);a.onmessage=g=>{let y=g.data,F=y.attributeBuffers;this.workerPool.returnWorker(h,a);let J=new pt;for(let R in F){let Q=F[R].buffer;if(R==="position")J.setAttribute("position",new z(new Float32Array(Q),3));else if(R==="rgba")J.setAttribute("rgba",new z(new Uint8Array(Q),4,!0));else if(R==="NORMAL")J.setAttribute("normal",new z(new Float32Array(Q),3));else if(R==="INDICES"){let K=new z(new Uint8Array(Q),4);K.normalized=!0,J.setAttribute("indices",K)}else{const K=new z(new Float32Array(Q),1);let I=F[R].attribute;K.potree={offset:F[R].offset,scale:F[R].scale,preciseBuffer:F[R].preciseBuffer,range:I.range},J.setAttribute(R,K)}}t.density=y.density,t.geometry=J,t.loaded=!0,t.loading=!1,t.octreeGeometry.numNodesLoading--};let d=t.octreeGeometry.pointAttributes,m=t.octreeGeometry.scale,b=t.boundingBox,o=t.octreeGeometry.offset.clone().add(b.min),r=b.max.clone().sub(b.min),G=o.clone().add(r),u=t.numPoints,Y=t.octreeGeometry.loader.offset,X={name:t.name,buffer:Z,pointAttributes:d,scale:m,min:o,max:G,size:r,offset:Y,numPoints:u};a.postMessage(X,[X.buffer])}catch{t.loaded=!1,t.loading=!1,t.octreeGeometry.numNodesLoading--}}}parseHierarchy(t,l){let i=new DataView(l),e=22,n=l.byteLength/e,c=t.octreeGeometry,Z=new Array(n);Z[0]=t;let h=1;for(let a=0;a<n;a++){let d=Z[a],m=i.getUint8(a*e+0),b=i.getUint8(a*e+1),o=i.getUint32(a*e+2,!0),r=i.getBigInt64(a*e+6,!0),G=i.getBigInt64(a*e+14,!0);if(d.nodeType===2?(d.byteOffset=r,d.byteSize=G,d.numPoints=o):m===2?(d.hierarchyByteOffset=r,d.hierarchyByteSize=G,d.numPoints=o):(d.byteOffset=r,d.byteSize=G,d.numPoints=o),d.nodeType=m,d.nodeType!==2)for(let u=0;u<8;u++){if(!((1<<u&b)!==0))continue;let X=d.name+u,g=nn(d.boundingBox,u),y=new Vl(X,c,g);y.name=X,y.spacing=d.spacing/2,y.level=d.level+1,d.children[u]=y,y.parent=d,Z[h]=y,h++}}}async loadHierarchy(t){let{hierarchyByteOffset:l,hierarchyByteSize:i}=t;if(l===void 0||i===void 0)throw new Error(`hierarchyByteOffset and hierarchyByteSize are undefined for node ${t.name}`);let e=`${this.url}/../hierarchy.bin`,n=l,c=n+i-BigInt(1),h=await(await fetch(e,{headers:{"content-type":"multipart/byteranges",Range:`bytes=${n}-${c}`}})).arrayBuffer();this.parseHierarchy(t,h)}}let en=new W;function nn(s,t){let l=s.min.clone(),i=s.max.clone(),e=en.subVectors(i,l);return(t&1)>0?l.z+=e.z/2:i.z-=e.z/2,(t&2)>0?l.y+=e.y/2:i.y-=e.y/2,(t&4)>0?l.x+=e.x/2:i.x-=e.x/2,new O(l,i)}let sn={double:C.DATA_TYPE_DOUBLE,float:C.DATA_TYPE_FLOAT,int8:C.DATA_TYPE_INT8,uint8:C.DATA_TYPE_UINT8,int16:C.DATA_TYPE_INT16,uint16:C.DATA_TYPE_UINT16,int32:C.DATA_TYPE_INT32,uint32:C.DATA_TYPE_UINT32,int64:C.DATA_TYPE_INT64,uint64:C.DATA_TYPE_UINT64};class pl{constructor(){this.workerPool=new tn}static parseAttributes(t){let l=new Ke,i={rgb:"rgba"};for(const e of t){let{name:n,numElements:c,min:Z,max:h}=e,a=sn[e.type],d=i[n]?i[n]:n,m=new A(d,a,c);c===1?m.range=[Z[0],h[0]]:m.range=[Z,h],n==="gps-time"&&typeof m.range[0]=="number"&&m.range[0]===m.range[1]&&(m.range[1]+=1),m.initialRange=m.range,l.add(m)}if(l.attributes.find(n=>n.name==="NormalX")!==void 0&&l.attributes.find(n=>n.name==="NormalY")!==void 0&&l.attributes.find(n=>n.name==="NormalZ")!==void 0){let n={name:"NORMAL",attributes:["NormalX","NormalY","NormalZ"]};l.addVector(n)}return l}async load(t,l){let e=await(await l(t)).json(),n=pl.parseAttributes(e.attributes),c=new ln(t,this.workerPool,e);c.attributes=n,c.scale=e.scale,c.offset=e.offset;let Z=new yi(c,new O(new W(...e.boundingBox.min),new W(...e.boundingBox.max)));Z.url=t,Z.spacing=e.spacing,Z.scale=e.scale;let h=new W(...e.boundingBox.min),a=new W(...e.boundingBox.max),d=new O(h,a),m=h.clone();d.min.sub(m),d.max.sub(m),Z.projection=e.projection,Z.boundingBox=d,Z.tightBoundingBox=d.clone(),Z.boundingSphere=d.getBoundingSphere(new nt),Z.tightBoundingSphere=d.getBoundingSphere(new nt),Z.offset=m,Z.pointAttributes=pl.parseAttributes(e.attributes);let b=new Vl("r",Z,d);return b.level=0,b.nodeType=2,b.hierarchyByteOffset=BigInt(0),b.hierarchyByteSize=BigInt(e.hierarchy.firstChunkSize),b.spacing=Z.spacing,b.byteOffset=BigInt(0),Z.root=b,c.load(b),{geometry:Z}}}async function cn(s,t,l){const i=await t(s),e=new pl,{geometry:n}=await e.load(i,l);return n}const M=document.createElement("canvas").getContext("webgl"),Zn={SHADER_INTERPOLATION:Xl("EXT_frag_depth")&&Ol(8),SHADER_SPLATS:Xl("EXT_frag_depth")&&Xl("OES_texture_float")&&Ol(8),SHADER_EDL:Xl("OES_texture_float")&&Ol(8),precision:hn()};function Xl(s){return M!==null&&!!M.getExtension(s)}function Ol(s){return M!==null&&M.getParameter(M.MAX_VARYING_VECTORS)>=s}function hn(){if(M===null)return"";const s=M.getShaderPrecisionFormat(M.VERTEX_SHADER,M.HIGH_FLOAT),t=M.getShaderPrecisionFormat(M.VERTEX_SHADER,M.MEDIUM_FLOAT),l=M.getShaderPrecisionFormat(M.FRAGMENT_SHADER,M.HIGH_FLOAT),i=M.getShaderPrecisionFormat(M.FRAGMENT_SHADER,M.MEDIUM_FLOAT),e=s&&l&&s.precision>0&&l.precision>0,n=t&&i&&t.precision>0&&i.precision>0;return e?"highp":n?"mediump":"lowp"}var gt=(s=>(s[s.POSITION_CARTESIAN=0]="POSITION_CARTESIAN",s[s.COLOR_PACKED=1]="COLOR_PACKED",s[s.COLOR_FLOATS_1=2]="COLOR_FLOATS_1",s[s.COLOR_FLOATS_255=3]="COLOR_FLOATS_255",s[s.NORMAL_FLOATS=4]="NORMAL_FLOATS",s[s.FILLER=5]="FILLER",s[s.INTENSITY=6]="INTENSITY",s[s.CLASSIFICATION=7]="CLASSIFICATION",s[s.NORMAL_SPHEREMAPPED=8]="NORMAL_SPHEREMAPPED",s[s.NORMAL_OCT16=9]="NORMAL_OCT16",s[s.NORMAL=10]="NORMAL",s))(gt||{});const at={DATA_TYPE_DOUBLE:{ordinal:0,size:8},DATA_TYPE_FLOAT:{ordinal:1,size:4},DATA_TYPE_INT8:{ordinal:2,size:1},DATA_TYPE_UINT8:{ordinal:3,size:1},DATA_TYPE_INT16:{ordinal:4,size:2},DATA_TYPE_UINT16:{ordinal:5,size:2},DATA_TYPE_INT32:{ordinal:6,size:4},DATA_TYPE_UINT32:{ordinal:7,size:4},DATA_TYPE_INT64:{ordinal:8,size:8},DATA_TYPE_UINT64:{ordinal:9,size:8}};function dt(s,t,l){return{name:s,type:t,numElements:l,byteSize:l*t.size}}const fi=dt(1,at.DATA_TYPE_INT8,4),an={POSITION_CARTESIAN:dt(0,at.DATA_TYPE_FLOAT,3),RGBA_PACKED:fi,COLOR_PACKED:fi,RGB_PACKED:dt(1,at.DATA_TYPE_INT8,3),NORMAL_FLOATS:dt(4,at.DATA_TYPE_FLOAT,3),FILLER_1B:dt(5,at.DATA_TYPE_UINT8,1),INTENSITY:dt(6,at.DATA_TYPE_UINT16,1),CLASSIFICATION:dt(7,at.DATA_TYPE_UINT8,1),NORMAL_SPHEREMAPPED:dt(8,at.DATA_TYPE_UINT8,2),NORMAL_OCT16:dt(9,at.DATA_TYPE_UINT8,2),NORMAL:dt(10,at.DATA_TYPE_FLOAT,3)};class Si{constructor(t=[]){this.attributes=[],this.byteSize=0,this.size=0;for(let l=0;l<t.length;l++){const i=t[l],e=an[i];this.attributes.push(e),this.byteSize+=e.byteSize,this.size++}}add(t){this.attributes.push(t),this.byteSize+=t.byteSize,this.size++}hasColors(){return this.attributes.find(dn)!==void 0}hasNormals(){return this.attributes.find(mn)!==void 0}}function dn({name:s}){return s===1}function mn({name:s}){return s===8||s===4||s===10||s===9}class St{constructor(t){this.versionMinor=0,this.version=t;const l=t.indexOf(".")===-1?t.length:t.indexOf(".");this.versionMajor=parseInt(t.substr(0,l),10),this.versionMinor=parseInt(t.substr(l+1),10),isNaN(this.versionMinor)&&(this.versionMinor=0)}newerThan(t){const l=new St(t);return this.versionMajor>l.versionMajor?!0:this.versionMajor===l.versionMajor&&this.versionMinor>l.versionMinor}equalOrHigher(t){const l=new St(t);return this.versionMajor>l.versionMajor?!0:this.versionMajor===l.versionMajor&&this.versionMinor>=l.versionMinor}upTo(t){return!this.newerThan(t)}}const ji="",Pi=typeof window<"u"&&window.Blob&&new Blob([atob(ji)],{type:"text/javascript;charset=utf-8"});function bn(){let s;try{if(s=Pi&&(window.URL||window.webkitURL).createObjectURL(Pi),!s)throw"";return new Worker(s)}catch{return new Worker("data:application/javascript;base64,"+ji)}finally{s&&(window.URL||window.webkitURL).revokeObjectURL(s)}}class on{constructor({getUrl:t=c=>Promise.resolve(c),version:l,boundingBox:i,scale:e,xhrRequest:n}){this.disposed=!1,this.workers=[],console.log([t,l,i,e,n]),typeof l=="string"?this.version=new St(l):this.version=l,this.xhrRequest=n,this.getUrl=t,this.boundingBox=i,this.scale=e,this.callbacks=[]}dispose(){this.workers.forEach(t=>t.terminate()),this.workers=[],this.disposed=!0}load(t){return t.loaded||this.disposed?Promise.resolve():Promise.resolve(this.getUrl(this.getNodeUrl(t))).then(l=>this.xhrRequest(l,{mode:"cors"})).then(l=>l.arrayBuffer()).then(l=>new Promise(i=>this.parse(t,l,i)))}getNodeUrl(t){let l=t.getUrl();return this.version.equalOrHigher("1.4")&&(l+=".bin"),l}parse(t,l,i){if(this.disposed){i();return}const e=this.getWorker(),n=t.pcoGeometry.pointAttributes,c=l.byteLength/n.byteSize;this.version.upTo("1.5")&&(t.numPoints=c),e.onmessage=h=>{if(this.disposed){i();return}const a=h.data,d=t.geometry=t.geometry||new pt;d.boundingBox=t.boundingBox,this.addBufferAttributes(d,a.attributeBuffers),this.addIndices(d,a.indices),this.addNormalAttribute(d,c),t.mean=new W().fromArray(a.mean),t.tightBoundingBox=this.getTightBoundingBox(a.tightBoundingBox),t.loaded=!0,t.loading=!1,t.failed=!1,t.pcoGeometry.numNodesLoading--,t.pcoGeometry.needsUpdate=!0,this.releaseWorker(e),this.callbacks.forEach(m=>m(t)),i()};const Z={buffer:l,pointAttributes:n,version:this.version.version,min:t.boundingBox.min.toArray(),offset:t.pcoGeometry.offset.toArray(),scale:this.scale,spacing:t.spacing,hasChildren:t.hasChildren};e.postMessage(Z,[Z.buffer])}getWorker(){const t=this.workers.pop();return t||new bn}releaseWorker(t){this.workers.push(t)}getTightBoundingBox({min:t,max:l}){const i=new O(new W().fromArray(t),new W().fromArray(l));return i.max.sub(i.min),i.min.set(0,0,0),i}addBufferAttributes(t,l){Object.keys(l).forEach(i=>{const e=l[i].buffer;this.isAttribute(i,gt.POSITION_CARTESIAN)?t.setAttribute("position",new z(new Float32Array(e),3)):this.isAttribute(i,gt.COLOR_PACKED)?t.setAttribute("color",new z(new Uint8Array(e),3,!0)):this.isAttribute(i,gt.INTENSITY)?t.setAttribute("intensity",new z(new Float32Array(e),1)):this.isAttribute(i,gt.CLASSIFICATION)?t.setAttribute("classification",new z(new Uint8Array(e),1)):this.isAttribute(i,gt.NORMAL_SPHEREMAPPED)?t.setAttribute("normal",new z(new Float32Array(e),3)):this.isAttribute(i,gt.NORMAL_OCT16)?t.setAttribute("normal",new z(new Float32Array(e),3)):this.isAttribute(i,gt.NORMAL)&&t.setAttribute("normal",new z(new Float32Array(e),3))})}addIndices(t,l){const i=new Ze(l,4);i.normalized=!0,t.setAttribute("indices",i)}addNormalAttribute(t,l){if(!t.getAttribute("normal")){const i=new Float32Array(l*3);t.setAttribute("normal",new z(new Float32Array(i),3))}}isAttribute(t,l){return parseInt(t,10)===l}}class rn{constructor(t,l,i,e,n){this.loader=t,this.boundingBox=l,this.tightBoundingBox=i,this.offset=e,this.xhrRequest=n,this.disposed=!1,this.needsUpdate=!0,this.octreeDir="",this.hierarchyStepSize=-1,this.nodes={},this.numNodesLoading=0,this.maxNumNodesLoading=3,this.spacing=0,this.pointAttributes=new Si([]),this.projection=null,this.url=null}dispose(){this.loader.dispose(),this.root.traverse(t=>t.dispose()),this.disposed=!0}addNodeLoadedCallback(t){this.loader.callbacks.push(t)}clearNodeLoadedCallbacks(){this.loader.callbacks=[]}}const Ti=5,Kl=class extends xt{constructor(s,t,l){super(),this.id=Kl.idCount++,this.level=0,this.spacing=0,this.hasChildren=!1,this.children=[null,null,null,null,null,null,null,null],this.mean=new W,this.numPoints=0,this.loaded=!1,this.loading=!1,this.failed=!1,this.parent=null,this.oneTimeDisposeHandlers=[],this.isLeafNode=!0,this.isTreeNode=!1,this.isGeometryNode=!0,this.name=s,this.index=Tl(s),this.pcoGeometry=t,this.boundingBox=l,this.tightBoundingBox=l.clone(),this.boundingSphere=l.getBoundingSphere(new nt)}dispose(){!this.geometry||!this.parent||(this.geometry.dispose(),this.geometry=void 0,this.loaded=!1,this.oneTimeDisposeHandlers.forEach(s=>s()),this.oneTimeDisposeHandlers=[])}getUrl(){const s=this.pcoGeometry,t=s.loader.version,l=[s.octreeDir];return s.loader&&t.equalOrHigher("1.5")?(l.push(this.getHierarchyBaseUrl()),l.push(this.name)):t.equalOrHigher("1.4")?l.push(this.name):t.upTo("1.3")&&l.push(this.name),l.join("/")}getHierarchyUrl(){return`${this.pcoGeometry.octreeDir}/${this.getHierarchyBaseUrl()}/${this.name}.hrc`}addChild(s){this.children[s.index]=s,this.isLeafNode=!1,s.parent=this}traverse(s,t=!0){const l=t?[this]:[];let i;for(;(i=l.pop())!==void 0;){s(i);for(const e of i.children)e!==null&&l.push(e)}}load(){if(!this.canLoad())return Promise.resolve();this.loading=!0,this.pcoGeometry.numNodesLoading++,this.pcoGeometry.needsUpdate=!0;let s;return this.pcoGeometry.loader.version.equalOrHigher("1.5")&&this.level%this.pcoGeometry.hierarchyStepSize===0&&this.hasChildren?s=this.loadHierachyThenPoints():s=this.loadPoints(),s.catch(t=>{throw this.loading=!1,this.failed=!0,this.pcoGeometry.numNodesLoading--,t})}canLoad(){return!this.loading&&!this.loaded&&!this.pcoGeometry.disposed&&!this.pcoGeometry.loader.disposed&&this.pcoGeometry.numNodesLoading<this.pcoGeometry.maxNumNodesLoading}loadPoints(){return this.pcoGeometry.needsUpdate=!0,this.pcoGeometry.loader.load(this)}loadHierachyThenPoints(){return this.level%this.pcoGeometry.hierarchyStepSize!==0?Promise.resolve():Promise.resolve(this.pcoGeometry.loader.getUrl(this.getHierarchyUrl())).then(s=>this.pcoGeometry.xhrRequest(s,{mode:"cors"})).then(s=>s.arrayBuffer()).then(s=>this.loadHierarchy(this,s))}getHierarchyBaseUrl(){const s=this.pcoGeometry.hierarchyStepSize,t=this.name.substr(1),l=Math.floor(t.length/s);let i="r/";for(let e=0;e<l;e++)i+=`${t.substr(e*s,s)}/`;return i.slice(0,-1)}loadHierarchy(s,t){const l=new DataView(t),i=this.getNodeData(s.name,0,l);s.numPoints=i.numPoints;const e=[i],n=[];let c=Ti;for(;e.length>0;){const h=e.shift();let a=1;for(let d=0;d<8&&c+1<t.byteLength;d++){if(h.children&a){const m=this.getNodeData(h.name+d,c,l);n.push(m),e.push(m),c+=Ti}a=a*2}}s.pcoGeometry.needsUpdate=!0;const Z=new Map;Z.set(s.name,s),n.forEach(h=>this.addNode(h,s.pcoGeometry,Z)),s.loadPoints()}getNodeData(s,t,l){const i=l.getUint8(t),e=l.getUint32(t+1,!0);return{children:i,numPoints:e,name:s}}addNode({name:s,numPoints:t,children:l},i,e){const n=Tl(s),c=s.substring(0,s.length-1),Z=e.get(c),h=s.length-1,a=vi(Z.boundingBox,n),d=new Kl(s,i,a);d.level=h,d.numPoints=t,d.hasChildren=l>0,d.spacing=i.spacing/Math.pow(2,h),Z.addChild(d),e.set(s,d)}};let _l=Kl;_l.idCount=0;function Wn(s,t,l){return Promise.resolve(t(s)).then(i=>l(i,{mode:"cors"}).then(e=>e.json()).then(Gn(i,t,l)))}function Gn(s,t,l){return i=>{const{offset:e,boundingBox:n,tightBoundingBox:c}=un(i),Z=new on({getUrl:t,version:i.version,boundingBox:n,scale:i.scale,xhrRequest:l}),h=new rn(Z,n,c,e,l);h.url=s,h.octreeDir=i.octreeDir,h.needsUpdate=!0,h.spacing=i.spacing,h.hierarchyStepSize=i.hierarchyStepSize,h.projection=i.projection,h.offset=e,h.pointAttributes=new Si(i.pointAttributes),console.log(h.pointAttributes);const a={},d=new St(i.version);return Yn(h,i,a,d).then(()=>(d.upTo("1.4")&&Vn(h,i,a),h.nodes=a,h))}}function un(s){const t=new W(s.boundingBox.lx,s.boundingBox.ly,s.boundingBox.lz),l=new W(s.boundingBox.ux,s.boundingBox.uy,s.boundingBox.uz),i=new O(t,l),e=i.clone(),n=t.clone();if(s.tightBoundingBox){const{lx:c,ly:Z,lz:h,ux:a,uy:d,uz:m}=s.tightBoundingBox;e.min.set(c,Z,h),e.max.set(a,d,m)}return i.min.sub(n),i.max.sub(n),e.min.sub(n),e.max.sub(n),{offset:n,boundingBox:i,tightBoundingBox:e}}function Yn(s,t,l,i){const e="r",n=new _l(e,s,s.boundingBox);return n.hasChildren=!0,n.spacing=s.spacing,i.upTo("1.5")?n.numPoints=t.hierarchy[0][1]:n.numPoints=0,s.root=n,l[e]=n,s.root.load()}function Vn(s,t,l){for(let i=1;i<t.hierarchy.length;i++){const[e,n]=t.hierarchy[i],{index:c,parentName:Z,level:h}=pn(e),a=l[Z],d=vi(a.boundingBox,c),m=new _l(e,s,d);m.level=h,m.numPoints=n,m.spacing=s.spacing/Math.pow(2,m.level),l[e]=m,a.addChild(m)}}function pn(s){return{index:Tl(s),parentName:s.substring(0,s.length-1),level:s.length-1}}function Xn(s){return s!=null&&s.isGeometryNode}function ql(s){return s!=null&&s.isTreeNode}function Li(s){this.content=[],this.scoreFunction=s}Li.prototype={push:function(s){this.content.push(s),this.bubbleUp(this.content.length-1)},pop:function(){var s=this.content[0],t=this.content.pop();return this.content.length>0&&(this.content[0]=t,this.sinkDown(0)),s},remove:function(s){for(var t=this.content.length,l=0;l<t;l++)if(this.content[l]==s){var i=this.content.pop();if(l==t-1)break;this.content[l]=i,this.bubbleUp(l),this.sinkDown(l);break}},size:function(){return this.content.length},bubbleUp:function(s){for(var t=this.content[s],l=this.scoreFunction(t);s>0;){var i=Math.floor((s+1)/2)-1,e=this.content[i];if(l>=this.scoreFunction(e))break;this.content[i]=t,this.content[s]=e,s=i}},sinkDown:function(s){for(var t=this.content.length,l=this.content[s],i=this.scoreFunction(l);;){var e=(s+1)*2,n=e-1,c=null;if(n<t){var Z=this.content[n],h=this.scoreFunction(Z);h<i&&(c=n)}if(e<t){var a=this.content[e],d=this.scoreFunction(a);d<(c==null?i:h)&&(c=e)}if(c==null)break;this.content[s]=this.content[c],this.content[c]=l,s=c}}};class gn extends Xe{constructor(t,l=new V(16776960)){const i=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),e=new Float32Array([t.min.x,t.min.y,t.min.z,t.max.x,t.min.y,t.min.z,t.max.x,t.min.y,t.max.z,t.min.x,t.min.y,t.max.z,t.min.x,t.max.y,t.min.z,t.max.x,t.max.y,t.min.z,t.max.x,t.max.y,t.max.z,t.min.x,t.max.y,t.max.z]),n=new pt;n.setIndex(new z(i,1)),n.setAttribute("position",new z(e,3));const c=new ri({color:l});super(n,c)}}class yn{constructor(t){this.node=t,this.next=null,this.previous=null}}class Rn{constructor(t=1e6){this.pointBudget=t,this.first=null,this.last=null,this.numPoints=0,this.items=new Map}get size(){return this.items.size}has(t){return this.items.has(t.id)}touch(t){if(!t.loaded)return;const l=this.items.get(t.id);l?this.touchExisting(l):this.addNew(t)}addNew(t){const l=new yn(t);l.previous=this.last,this.last=l,l.previous&&(l.previous.next=l),this.first||(this.first=l),this.items.set(t.id,l),this.numPoints+=t.numPoints}touchExisting(t){t.previous?t.next&&(t.previous.next=t.next,t.next.previous=t.previous,t.previous=this.last,t.next=null,this.last=t,t.previous&&(t.previous.next=t)):t.next&&(this.first=t.next,this.first.previous=null,t.previous=this.last,t.next=null,this.last=t,t.previous&&(t.previous.next=t))}remove(t){const l=this.items.get(t.id);l&&(this.items.size===1?(this.first=null,this.last=null):(l.previous||(this.first=l.next,this.first.previous=null),l.next||(this.last=l.previous,this.last.next=null),l.previous&&l.next&&(l.previous.next=l.next,l.next.previous=l.previous)),this.items.delete(t.id),this.numPoints-=t.numPoints)}getLRUItem(){return this.first?this.first.node:void 0}freeMemory(){if(!(this.items.size<=1))for(;this.numPoints>this.pointBudget*2;){const t=this.getLRUItem();t&&this.disposeSubtree(t)}}disposeSubtree(t){const l=[t];t.traverse(i=>{i.loaded&&l.push(i)});for(const i of l)i.dispose(),this.remove(i)}}class $l{constructor(t,l,i,e){this.pointCloudIndex=t,this.weight=l,this.node=i,this.parent=e}}class tl{constructor(){this._pointBudget=Be,this._rendererSize=new ht,this.maxNumNodesLoading=Ie,this.features=Zn,this.lru=new Rn(this._pointBudget),this.updateVisibilityStructures=(()=>{const t=new E,l=new E,i=new E;return(e,n)=>{var a;const c=[],Z=[],h=new Li(d=>1/d.weight);for(let d=0;d<e.length;d++){const m=e[d];if(!m.initialized())continue;m.numVisiblePoints=0,m.visibleNodes=[],m.visibleGeometry=[],n.updateMatrixWorld(!1);const b=n.matrixWorldInverse,o=m.matrixWorld;if(t.identity().multiply(n.projectionMatrix).multiply(b).multiply(o),c.push(new Ye().setFromProjectionMatrix(t)),l.copy(o).invert(),i.identity().multiply(l).multiply(n.matrixWorld),Z.push(new W().setFromMatrixPosition(i)),m.visible&&m.root!==null){const r=Number.MAX_VALUE;h.push(new $l(d,r,m.root))}ql(m.root)&&m.hideDescendants((a=m==null?void 0:m.root)==null?void 0:a.sceneNode);for(const r of m.boundingBoxNodes)r.visible=!1}return{frustums:c,cameraPositions:Z,priorityQueue:h}}})()}async loadPointCloud(t,l,i=(e,n)=>fetch(e,n)){if(t==="cloud.js")return await Wn(t,l,i).then(e=>new Ll(this,e));if(t==="metadata.json")return await cn(t,l,i).then(e=>new Ll(this,e));throw new Error("Unsupported file type")}updatePointClouds(t,l,i){const e=this.updateVisibility(t,l,i);for(let n=0;n<t.length;n++){const c=t[n];c.disposed||(c.material.updateMaterial(c,c.visibleNodes,l,i),c.updateVisibleBounds(),c.updateBoundingBoxes())}return this.lru.freeMemory(),e}static pick(t,l,i,e,n={}){return tl.picker=tl.picker||new qt,tl.picker.pick(l,i,e,t,n)}get pointBudget(){return this._pointBudget}set pointBudget(t){t!==this._pointBudget&&(this._pointBudget=t,this.lru.pointBudget=t,this.lru.freeMemory())}updateVisibility(t,l,i){let e=0;const n=[],c=[],{frustums:Z,cameraPositions:h,priorityQueue:a}=this.updateVisibilityStructures(t,l);let d=0,m=!1,b=!1,o;for(;(o=a.pop())!==void 0;){let u=o.node;if(e+u.numPoints>this.pointBudget)break;const Y=o.pointCloudIndex,X=t[Y],g=X.maxLevel!==void 0?X.maxLevel:1/0;if(u.level>g||!Z[Y].intersectsBox(u.boundingBox)||this.shouldClip(X,u.boundingBox))continue;e+=u.numPoints,X.numVisiblePoints+=u.numPoints;const y=o.parent;if(Xn(u)&&(!y||ql(y)))if(u.loaded&&d<Fi)u=X.toTreeNode(u,y),d++;else if(!u.failed)u.loaded&&d>=Fi&&(m=!0),c.push(u),X.visibleGeometry.push(u);else{b=!0;continue}ql(u)&&(this.updateTreeNodeVisibility(X,u,n),X.visibleGeometry.push(u.geometryNode));const F=.5*i.getSize(this._rendererSize).height*i.getPixelRatio();this.updateChildVisibility(o,a,X,u,h[Y],l,F)}const r=Math.min(this.maxNumNodesLoading,c.length),G=[];for(let u=0;u<r;u++)G.push(c[u].load());return{visibleNodes:n,numVisiblePoints:e,exceededMaxLoadsToGPU:m,nodeLoadFailed:b,nodeLoadPromises:G}}updateTreeNodeVisibility(t,l,i){this.lru.touch(l.geometryNode);const e=l.sceneNode;e.visible=!0,e.material=t.material,e.updateMatrix(),e.matrixWorld.multiplyMatrices(t.matrixWorld,e.matrix),i.push(l),t.visibleNodes.push(l),this.updateBoundingBoxVisibility(t,l)}updateChildVisibility(t,l,i,e,n,c,Z){const h=e.children;for(let a=0;a<h.length;a++){const d=h[a];if(d===null)continue;const m=d.boundingSphere,b=m.center.distanceTo(n),o=m.radius;let r=0;if(c.type===Ji){const X=c.fov*Math.PI/180,g=Math.tan(X/2);r=Z/(g*b)}else{const Y=c;r=2*Z/(Y.top-Y.bottom)}const G=o*r;if(G<i.minNodePixelSize)continue;const u=b<o?Number.MAX_VALUE:G+1/b;l.push(new $l(t.pointCloudIndex,u,d,e))}}updateBoundingBoxVisibility(t,l){if(t.showBoundingBox&&!l.boundingBoxNode){const i=new gn(l.boundingBox);i.matrixAutoUpdate=!1,t.boundingBoxNodes.push(i),l.boundingBoxNode=i,l.boundingBoxNode.matrix.copy(t.matrixWorld)}else t.showBoundingBox&&l.boundingBoxNode?(l.boundingBoxNode.visible=!0,l.boundingBoxNode.matrix.copy(t.matrixWorld)):!t.showBoundingBox&&l.boundingBoxNode&&(l.boundingBoxNode.visible=!1)}shouldClip(t,l){const i=t.material;if(i.numClipBoxes===0||i.clipMode!==Xt.CLIP_OUTSIDE)return!1;const e=l.clone();t.updateMatrixWorld(!0),e.applyMatrix4(t.matrixWorld);const n=i.clipBoxes;for(let c=0;c<n.length;c++){const Z=n[c].matrix,h=new O(new W(-.5,-.5,-.5),new W(.5,.5,.5)).applyMatrix4(Z);if(e.intersectsBox(h))return!1}return!0}}mt.PointCloudOctree=Ll,mt.Potree=tl,mt.QueueItem=$l,mt.Version=St,Object.defineProperty(mt,Symbol.toStringTag,{value:"Module"})});
//# sourceMappingURL=potree-loader.umd.js.map
